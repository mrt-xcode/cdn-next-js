{"version":3,"file":"static/chunks/72a30a16.741f20b7353a8762.js","mappings":"ACAA,aACA,CAACA,KAAK,gBAAmB,CAAGA,KAAK,gBAAmB,EAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAEnE,MACC,SAASC,CAAmC,CAAEC,CAAmB,CAAEC,CAAmB,CAAE,CAE/FA,EAAoBC,CAAC,CAACF,GACDC,EAAoBE,CAAC,CAACH,EAAqB,CACzC,SAAY,UAAW,CAAE,OAAqBI,EAAU,EACxD,oBAAuB,UAAW,CAAE,OAAqBC,EAAqB,EAC9E,eAAkB,UAAW,CAAE,OAAqBC,EAAgB,EACpE,wBAA2B,UAAW,CAAE,OAAqBC,EAAyB,EACtF,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,MAAS,UAAW,CAAE,OAAqBC,EAAO,EAClD,cAAiB,UAAW,CAAE,OAAqBC,EAAe,EAClE,gBAAmB,UAAW,CAAE,OAAqBC,EAAiB,EACtE,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,SAAY,UAAW,CAAE,OAAqBC,EAAU,EACxD,QAAW,UAAW,CAAE,OAAqBC,EAAS,EACtD,eAAkB,UAAW,CAAE,OAAqBC,EAAgB,EACpE,qBAAwB,UAAW,CAAE,OAAqBC,EAAsB,EAChF,mBAAsB,UAAW,CAAE,OAAqBC,EAAoB,EAC5E,oBAAuB,UAAW,CAAE,OAAqBC,EAAqB,EAC9E,sBAAyB,UAAW,CAAE,OAAqBC,EAAuB,EAClF,oBAAuB,UAAW,CAAE,OAAqBC,EAAqB,EAC9E,cAAiB,UAAW,CAAE,OAAqBC,EAAe,EAClE,KAAQ,UAAW,CAAE,OAAqBC,EAAM,EAChD,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,gBAAmB,UAAW,CAAE,OAAqBC,EAAiB,EACtE,SAAY,UAAW,CAAE,OAAqBC,EAAU,EACxD,aAAgB,UAAW,CAAE,OAAqBC,EAAc,EAChE,gBAAmB,UAAW,CAAE,OAAqBC,EAAiB,EACtE,aAAgB,UAAW,CAAE,OAAqBC,EAAc,EAChE,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,sBAAyB,UAAW,CAAE,OAAqBC,EAAuB,EAClF,cAAiB,UAAW,CAAE,OAAqBC,EAAe,EAClE,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,OAAU,UAAW,CAAE,OAAqBC,CAAQ,EACpD,oBAAuB,UAAW,CAAE,OAAqBC,EAAqB,EAC9E,MAAS,UAAW,CAAE,OAAqBC,CAAO,EAClD,YAAe,UAAW,CAAE,OAAqBC,CAAa,EAC9D,OAAU,UAAW,CAAE,OAAqBC,CAAQ,EACpD,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,WAAc,UAAW,CAAE,OAAqBC,EAAY,EAC5D,eAAkB,UAAW,CAAE,OAAqBC,EAAgB,EACpE,MAAS,UAAW,CAAE,OAAqBC,CAAO,EAClD,eAAkB,UAAW,CAAE,OAAqBC,EAAgB,EACpE,gBAAmB,UAAW,CAAE,OAAqBC,EAAiB,EACtE,SAAY,UAAW,CAAE,OAAqBC,CAAU,EACxD,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,IAAO,UAAW,CAAE,OAAqBC,CAAK,EAC9C,sBAAyB,UAAW,CAAE,OAAqBC,EAAuB,EAClF,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,gBAAmB,UAAW,CAAE,OAAqBC,EAAiB,EACtE,OAAU,UAAW,CAAE,OAAqBC,CAAQ,EACpD,WAAc,UAAW,CAAE,OAAqBC,EAAY,EAC5D,cAAiB,UAAW,CAAE,OAAqBC,EAAe,EAClE,MAAS,UAAW,CAAE,OAAqBC,CAAO,EAClD,OAAU,UAAW,CAAE,OAAqBC,CAAQ,EACpD,KAAQ,UAAW,CAAE,OAAqBC,CAAM,EAChD,MAAS,UAAW,CAAE,OAAqBC,EAAO,EAClD,MAAS,UAAW,CAAE,OAAqBC,EAAO,EAClD,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,aAAgB,UAAW,CAAE,OAAqBC,EAAc,EAChE,cAAiB,UAAW,CAAE,OAAqBC,EAAe,EAClE,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,aAAgB,UAAW,CAAE,OAAqBC,EAAc,EAChE,YAAe,UAAW,CAAE,OAAqBC,EAAa,EAC9D,gBAAmB,UAAW,CAAE,OAAqBC,EAAiB,EACtE,aAAgB,UAAW,CAAE,OAAqBC,EAAc,EAChE,UAAa,UAAW,CAAE,OAAqBC,EAAW,EAC1D,UAAa,UAAW,CAAE,OAAqBC,CAAW,EAC1D,eAAkB,UAAW,CAAE,OAAqBC,EAAgB,EACpE,WAAc,UAAW,CAAE,OAAqBC,EAAY,EAC5D,SAAY,UAAW,CAAE,OAAqBC,CAAU,EACxD,eAAkB,UAAW,CAAE,OAAqBC,CAAgB,EACpE,QAAW,UAAW,CAAE,OAAqBhE,EAAO,EACpD,uBAA0B,UAAW,CAAE,OAAqBiE,CAAwB,EACpF,uBAA0B,UAAW,CAAE,OAAqBC,CAAwB,EACpF,eAAkB,UAAW,CAAE,OAAqBC,CAAgB,EACpE,iBAAoB,UAAW,CAAE,OAAqBC,CAAkB,EACxE,QAAW,UAAW,CAAE,OAAqBC,CAAO,EACpD,UAAa,UAAW,CAAE,OAAqBC,CAAW,EAC1D,SAAY,UAAW,CAAE,OAAqBC,CAAU,EACxD,UAAa,UAAW,CAAE,OAAqBC,CAAW,EAC1D,gBAAmB,UAAW,CAAE,OAAqBC,CAAiB,EACtE,aAAgB,UAAW,CAAE,OAAqBC,CAAc,EAChE,aAAgB,UAAW,CAAE,OAAqBC,CAAc,CAClE,GACiEvF,EAAoB,OACrF,IAAIwF,EAAwExF,EAAoB,OAC1BA,EAAoB,MAClBA,EAAoB,OAChBA,EAAoB,OACxBA,EAAoB,OACTA,EAAoB,OACvG,IAAIyF,EAAsEzF,EAAoB,MACxBA,EAAoB,MAChBA,EAAoB,OACxBA,EAAoB,MAC1F,IAAI0F,EAAmC1F,EAAoB,OACWA,EAAoB,OAC1F,IAAI2F,EAAyC3F,EAAoB,OACQA,EAAoB,OACnBA,EAAoB,OACtBA,EAAoB,OAC5F,IAAI4F,EAA6C5F,EAAoB,OACMA,EAAoB,OAC/F,IAAI6F,EAAiD7F,EAAoB,ODlHvD8F,EAAA9F,EAAA,OAqFvCiF,EAAAc,OAAAC,MAAA,EACAC,UAAA,KACAC,UA3DA,WACA,IACIC,UAAAC,CAAA,CACJ,CAAAC,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACAG,EAAA,CACAC,OAAA,KACAC,gBAAA,GACAC,YAAA,GAAAR,UAAAC,EAGAQ,aAAAA,CAAAC,EAAAC,IACK,IAAAC,gBAAAF,EAAAC,GAGLE,YAAAA,GACA,GAAAxB,EAAAyB,CAAA,cAIO,OADP,MAAAC,kBADA,MAAAC,CADA,MAAAC,MAAAC,EAAA,EACAC,IAAA,IAGA,IAEA,EAOA,MAJA,qBAAAnB,WAAA,SAAAC,CAAA,GACAmB,QAAAC,cAAA,CAAAhB,EAAA,aAGAA,CAAA,EA+BCiB,KApBD,SAAAC,CAAA,EACA,IACAvB,UAAAA,CAAA,CACAwB,OAAAA,CAAA,CACIP,MAAAA,CAAA,CACJ,CAAAM,EACA,OACAjB,OAAA,KACAC,gBAAA,GACAC,YAAA,GACAR,UAAAA,EACAiB,MAAAA,EACAR,aAAAe,EAAAf,YAAA,CACAI,YAAAW,EAAAC,SAAA,CACA,CAMC,GAQD,SAAAhD,EAAAiD,CAAA,EACA,OAAAA,EAAAC,OAAA,uBACA,CAOA,SAAA3C,EAAA0C,CAAA,EACA,OAAAA,EAAAC,OAAA,gBACA,CAOA,SAAA1C,EAAAyC,CAAA,EACA,OAAAA,EAAAC,OAAA,gBACA,CAOA,SAAA5C,EAAA2C,CAAA,EAEE,MAAAE,CADF,CAAAF,GAAA,IAAAG,KAAA,4DACEC,GAAA,CAAAC,WAAA,CAGF,IAAAC,EAAA,YAOA,SAAArD,EAAAsD,CAAA,SACA,EAAAC,IAAA,CAAAD,GACAA,EAAAE,WAAA,GAGAF,CAHA,CAWA,SAAApD,EAAAqC,CAAA,EAKA,IAAAkB,EAAA,yCAAAC,IAAA,CAAAnB,IAAA,GACA,OAAAkB,CAAA,KAAAA,CAAA,KAAAA,CAAA,IAQA,SAAAxD,EAAA0D,CAAA,EACA,IAAAA,EAAAC,UAAA,QACA,OAAAD,CAAA,CAGA,IAAAE,EAAA,EAEA,OADAF,EAAAX,OAAA,iBAAAc,EAAAC,IAAAF,KAAAE,EAAAC,OAAAC,KAAAC,KAAA,CAAAd,WAAAU,KAAAA,CAAA,CACA,CAIA,IAAAK,EAAA,gBACAC,EAAA,mBACAC,EAAA,oBACAC,EAAA,8DACAC,EAAA,uBACAC,EAAA,mBAAAC,EAAA,kBAGA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,MAAA3B,EAAA2B,EAAAlB,IAAA,CAAAiB,UAGA,EAIA,CAAAA,EAAA3B,OAAA,CAAA4B,EAAA,KAAA3B,EAAAzB,MAAA,EAHA,CAAAmD,EAAA,GAYA,SAAA5E,EAAA4E,CAAA,EACA,IAAAE,EAAA,QACAC,EAAAH,EAAA3B,OAAA,gCAAAA,OAAA,mBACA+B,EAAA,EAiBA,MAhBA,CAAAD,EAAAC,EAAA,CAAAL,EAAAI,EAAAX,GACAU,CAAA,KAAAE,EACA,CAAAD,EAAAC,EAAA,CAAAL,EAAAI,EAAAV,GACAS,CAAA,KAAAE,EACA,CAAAD,EAAAC,EAAA,CAAAL,EAAAI,EAAAT,GACAQ,CAAA,KAAAE,EACA,CAAAD,EAAAC,EAAA,CAAAL,EAAAI,EAAAR,GACAO,CAAA,KAAAE,EACA,CAAAD,EAAAC,EAAA,CAAAL,EAAAI,EAAAP,GACAM,CAAA,KAAAE,EACA,CAAAD,EAAAC,EAAA,CAAAL,EAAAI,EAAAN,GACAK,CAAA,KAAAE,EACAD,EAAAA,EAAA9B,OAAA,kBAAAA,OAAA,SAA+E,MAAA8B,EAAAC,EAAA,CAAAL,EAAAI,EAAAL,GAG/EI,CAAA,KAAAE,EACAF,EAAAG,IAAA,KAGA,IAAAtH,EAAA,KAOA,SAAA6C,EAAA0E,CAAA,EACA,OAAAhB,KAAAiB,IAAA,CAAAjB,KAAAkB,GAAA,CAAAF,CAAA,OAAAhB,KAAAkB,GAAA,CAAAF,CAAA,OACA,CAQA,SAAAxE,EAAA2E,CAAA,CAAAH,CAAA,EACA,OAAAG,CAAA,IAAAH,CAAA,IAAAG,CAAA,IAAAH,CAAA,KAAA1E,CAAAA,EAAA6E,GAAA7E,EAAA0E,EAAA,CACA,CAQA,SAAAzE,EAAA4E,CAAA,CAAAH,CAAA,EACA,OAAAG,CAAA,IAAAH,CAAA,IAAAG,CAAA,IAAAH,CAAA,UAAAhB,KAAAoB,IAAA,CAAA5E,EAAA2E,EAAAH,GACA,CACA,SAAAvJ,EAAA4J,CAAA,EACA,OAAAA,EAAAA,EAAAA,CACA,CACA,SAAA3J,EAAA2J,CAAA,EACA,SAAAA,EAAAA,EAAA,GAAAA,CAAAA,CACA,CACA,SAAA1J,EAAA0J,CAAA,EACA,SAAAA,EAAA,GAAAA,CAAAA,EAAA,GAAAA,CAAAA,CACA,CACA,SAAAzJ,EAAAyJ,CAAA,EACA,SAAAA,CAAAA,EAAA,GAAAA,CAAAA,EAAA,GAAAA,CAAAA,CACA,CACA,SAAAnH,EAAAmH,CAAA,EACA,OAAAA,EAAAA,CACA,CACA,SAAAlH,EAAAkH,CAAA,EACA,SAAAA,EAAA,GAAAA,CAAAA,CACA,CACA,SAAAjH,EAAAiH,CAAA,EACA,SAAAA,CAAAA,EAAA,GAAAA,CAAAA,CAAA,CAGA,MAAApH,EACAqH,YAAAC,CAAA,CAAAlC,CAAA,CAAAmC,CAAA,EACA,KAAAD,QAAA,CAAAA,EACA,KAAAlC,IAAA,CAAAA,EACA,KAAAmC,KAAA,CAAAA,EACA,KAAAC,iBAAA,IAGA,OAAAC,MAAAH,CAAA,EACA,WAAAtH,EAAAsH,EAAA,YAGAI,OAAA,CACA,IAAAC,EAAAtE,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,QACA,CACAiE,SAAAA,CAAA,CACMlC,KAAAA,CAAA,CACN,MACA,OAAAxD,EAAA,KAAAgG,SAAA,IAAAC,IAAA,GAAAH,KAAA,CAAAC,GAAA1C,GAAA,CAAAsC,GAAA,IAAAvH,EAAAsH,EAAAlC,EAAAmC,GAAA,CAGAO,SAAAC,CAAA,EACA,IACMR,MAAAA,CAAA,CACN,MACA,OAAAA,IAAA,GAAAA,GAAAA,KAAAA,GAAAQ,CAAAA,GAAAR,IAAAA,CAAA,YAAAA,CAAA,CAGAS,SAAAC,CAAA,EACA,IACMV,MAAAA,CAAA,CACN,MAAAW,EAAA,iBAAAX,SAGA,GAAAU,EAIAA,EAAA5C,IAAA,CAAAkC,GAHAW,CAAA,CAMAC,iBAAA,CACA,YAAAH,QAAA,WAGAI,UAAA,CACA,SAAAN,QAAA,GACA,SAEA,IAAAO,EAAA,KAAAT,SAAA,GAGA,WACA,KAAAS,EAAAC,QAAA,OACA,eAAAjD,IAAA,CAAAgD,GAAA,QAGA,SACA,QACA,EAGAE,SAAAhB,CAAA,EAEA,OADA,KAAAA,KAAA,CAAAA,EACA,KAGAiB,SAAAC,CAAA,SACA,SAAAA,GAAA,KAAAX,QAAA,GACA,KAAAP,KAAA,CAGAkB,CAHA,CAMAC,UAAAD,CAAA,EACA,SAAAX,QAAA,UACA,SAAAW,EACA,EAGAvD,WAAAuD,EAHA,CAMA,IACMlB,MAAAA,CAAA,CACN,MAAAoB,EAAAzD,WAAAqC,GAOA,OAJA,KAAAS,QAAA,QACAW,CAAAA,GAAA,KAGAA,CAAA,CAGAf,UAAAa,CAAA,SACA,SAAAA,GAAA,KAAAX,QAAA,GACA,cAAAP,KAAA,IAAAzB,OAAA,KAAAyB,KAAA,EAGAzB,OAAA2C,EAHA,CAMAG,SAAAH,CAAA,MAAAhD,EAAA,KAAAmC,SAAA,CAAAa,UAGA,KAAAjB,iBAAA,GAIA,KAAAA,iBAAA,IACA/B,EAAA1D,EAAA0D,GACA,KAAA8B,KAAA,CAAA9B,GALAA,CAMA,CAGAoD,QAAA,CACA,UAGAC,QAAA,CACA,YAAAxB,QAAA,CAAAyB,UAAA,CAGAC,OAAA,CACA,YAAA1B,QAAA,CAAA2B,MAAA,CAGAC,UAAA,CACA,YAAAtB,SAAA,GAAA9C,OAAA,gBAGAqE,UAAAC,CAAA,MAAAC,EAAAhG,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IAGA,SAAAyE,QAAA,GACA,SAGA,IAAAwB,EAAAC,EAAA,mBAAAH,EAAA,CAAA7F,KAAAA,EAAA6F,EAAA,EAAAA,EAAA,CACA,CACMI,SAAAA,CAAA,OAAAlC,QAAA,CAAAmC,MAAA,CAGN,WACA,UAAAzB,QAAA,sBAAAU,SAAA,OAAA3C,KAAA2D,GAAA,CAAAF,EAAAG,WAAA,MAAAH,EAAAG,WAAA,MAGA,WAAA3B,QAAA,sBAAAU,SAAA,OAAA3C,KAAA6D,GAAA,CAAAJ,EAAAG,WAAA,MAAAH,EAAAG,WAAA,MAGA,WAAA3B,QAAA,oBAAAU,SAAA,OAAAc,EAAAG,WAAA,KAGA,WAAA3B,QAAA,oBAAAU,SAAA,OAAAc,EAAAG,WAAA,KAGA,WAAA3B,QAAA,qBAAAU,SAAA,QAAAI,MAAA,EAGA,WAAAd,QAAA,oBAAAU,SAAA,QAAAM,KAAA,EAGA,WAAAhB,QAAA,oBAAAU,SAAA,QAAAM,KAAA,IAGA,WAAAhB,QAAA,oBAAAU,SAAA,EAGA,WAAAV,QAAA,oBAAAU,SAAA,QAAAG,MAAA,SAGA,WAAAb,QAAA,uBAAAU,SAAA,EAGA,WAAAV,QAAA,oBAAAU,SAAA,QAAAG,MAAA,OAGA,WAAAb,QAAA,oBAAAU,SAAA,QAAAG,MAAA,OAGA,WAAAb,QAAA,oBAAAU,SAAA,QAAAG,MAAA,EAGA,WAAAb,QAAA,QAAAuB,EAAA,YAAAb,SAAA,QAAAM,KAAA,EAGA,WAAAhB,QAAA,mBAAAU,SAAA,GAAAc,EAAAG,WAAA,CAAAL,EAGA,SACA,IAAAX,EAAA,KAAAD,SAAA,GAGA,GAAAW,GAAAV,EAAA,EACA,OAAAA,EAAAa,EAAAG,WAAA,CAAAL,EAAA,CAGA,OAAAX,CAEA,EAGAkB,iBAAA,QACA,KAAA/B,QAAA,GAIA,KAAAE,QAAA,QACA,KAAAU,SAAA,GAGA,SAAAA,SAAA,GAPA,EAUAoB,YAAA,CACA,SAAAhC,QAAA,GACA,SAGA,WACA,UAAAE,QAAA,qBAAAU,SAAA,GAAA3C,CAAAA,KAAAgE,EAAA,KAGA,WAAA/B,QAAA,sBAAAU,SAAA,GAAA3C,CAAAA,KAAAgE,EAAA,KAGA,WAAA/B,QAAA,qBAAAU,SAAA,EAGA,SACA,YAAAA,SAAA,GAAA3C,CAAAA,KAAAgE,EAAA,KACA,EAGAC,eAAA,CACA,IAAA3B,EAAA,KAAAT,SAAA,GAAAxC,EAAA,aAAAI,IAAA,CAAA6C,GAWA,OARAjD,GACAA,CAAAA,EAAAA,CAAA,KAGAA,GACAA,CAAAA,EAAAiD,CAAA,EAGA,KAAAf,QAAA,CAAA2C,WAAA,CAAA7E,EAAA,CAGA8E,uBAAAC,CAAA,CAAAC,CAAA,MAAA3B,EAAA,KAAAuB,aAAA,GAGA,IAAAvB,EACM,YAIN,sBAAAA,EAAA4B,cAAA,CACM,OAAA5B,EAAA4B,cAAA,MAAA/C,QAAA,CAAAgD,GAAA,CAAAH,EAAAC,EAAA,CAIN,sBAAA3B,EAAA8B,aAAA,EACA,GAAA9B,EAAA+B,gBAAA,GAAA1C,QAAA,IACA,IAAA2C,EAAAhC,EAAAiC,YAAA,qBAAAjC,EAAAA,EAAA+B,gBAAA,GAAAR,aAAA,GAGAS,EAAA3C,QAAA,IACAW,EAAAiC,YAAA,wBAAAnC,QAAA,CAAAkC,EAAAlD,KAAA,CACA,QAGAkB,EAAA8B,aAAA,MAAAjD,QAAA,CAAAgD,GAAA,CAAAH,EAAAC,EAAA,QAGA,KAGAO,iBAAA,QACA,KAAA7C,QAAA,GAIA9H,EAAA4K,mBAAA,MAAAhD,SAAA,IAHA,KAMAiD,WAAAT,CAAA,EAKA,QAJA7C,EAAA,KAAAqB,QAAA,GACAkC,EAAAvD,EAAoBjE,MAAA,CAAAyH,EAAA,EAGpBC,EAAA,EAAAA,EAAAF,IACA,MAAAvD,CAAA,CAAAyD,EAAA,EACAD,IAGAA,IAAAA,GALAC,KAUA,GAAAZ,EAAAtC,QAAsB,SAAAE,QAAA,IAAA+C,IAAAA,EAAQ,KAAAtF,EAAA,IAAA9C,EAAA4E,EAG9B9B,CAAAA,EAAAwF,EAAA,GACAxF,EAAAyF,KAAA,CAAAd,EAAA1B,SAAA,GACAnB,EAAA9B,EAAA0F,MAAA,GACA,QAGA,IAAAnL,EAAA,KAAAsH,QAAA,MAAAlC,IAAA,CAAAmC,EAAA,CAGA,CACAvH,EAAA4K,mBAAA,EACA,sBACA,oBACA,yBACA,gBACA,iBACA,sBACA,2BACA,0BACA,wBACA,kBACA,0BAGA,OAAAjJ,EACA0F,aAAA,CACA,KAAA+D,SAAA,IAGAC,OAAA,CACA,KAAAD,SAAA,IAGAE,WAAAzH,CAAA,CAAAC,CAAA,EACA,KAAAsH,SAAA,CAAAvO,IAAA,EACAgH,MAAAA,EACKC,OAAAA,CACL,GAGAyH,eAAA,CACA,KAAAH,SAAA,CAAAI,GAAA,GAGAC,YAAA,CACA,IACML,UAAAA,CAAA,CACN,MACA,OAAAA,CAAA,CAAAA,EAAA9H,MAAA,IAGA,IAAAO,OAAA,CACA,YAAA4H,UAAA,GAAA5H,KAAA,CAGA,IAAAC,QAAA,CACA,YAAA2H,UAAA,GAAA3H,MAAA,CAGA6F,YAAAzM,CAAA,QACA,iBAAAA,EACAA,EAGAA,MAAAA,EACA,KAAA2G,KAAA,CAGA3G,MAAAA,EACA,KAAA4G,MAAA,CAGAiC,KAAAiB,IAAA,CAAAjB,KAAAkB,GAAA,MAAApD,KAAA,IAAAkC,KAAAkB,GAAA,MAAAnD,MAAA,KAAAiC,KAAAiB,IAAA,GAXA,CAaA,CAGA,MAAAnH,EACAwH,YAAAqE,CAAA,CAAAC,CAAA,EACA,KAAAD,CAAA,CAAAA,EACA,KAAAC,CAAA,CAAAA,CAAA,CAGA,OAAAC,MAAAC,CAAA,EACA,IAAAC,EAAAzI,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,MACA,CAAAqI,EAAAI,CAAA,CAAAH,EAAAG,CAAA,EAAA5J,EAAA2J,GACA,WAAAhM,EAAA6L,EAAAC,EAAA,CAGA,OAAAI,WAAAC,CAAA,EACA,IAAAF,EAAAzI,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,MACA,CAAAqI,EAAAI,CAAA,CAAAH,EAAAD,CAAA,EAAAxJ,EAAA8J,GACA,WAAAnM,EAAA6L,EAAAC,EAAA,CAGA,OAAAM,UAAAC,CAAA,EAKA,QAJAC,EAAAjK,EAAAgK,GACApB,EAAAqB,EAAA7I,MAAA,CAAA8I,EAAA,GAGApB,EAAA,EAAAA,EAAAF,EAAAE,GAAA,EACAoB,EAAAvP,IAAA,KAAAgD,EAAAsM,CAAA,CAAAnB,EAAA,CAAAmB,CAAA,CAAAnB,EAAA,KAGA,OAAAoB,CAAA,CAGAC,QAAAR,CAAA,EACA,OAAA9F,KAAAuG,KAAA,CAAAT,EAAAF,CAAA,MAAAA,CAAA,CAAAE,EAAAH,CAAA,MAAAA,CAAA,EAGAa,eAAAC,CAAA,EACA,IACAd,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MACAc,EAAAf,EAAAc,CAAA,IAAAb,EAAAa,CAAA,IAAAA,CAAA,IACAE,EAAAhB,EAAAc,CAAA,IAAAb,EAAAa,CAAA,IAAAA,CAAA,IACA,KAAAd,CAAA,CAAAe,EACA,KAAAd,CAAA,CAAAe,CAAA,CAEA,CAGA,MAAAnN,EACA8H,YAAAoC,CAAA,EACA,KAAAA,MAAA,CAAAA,EACA,KAAAkD,OAAA,IACA,KAAAC,MAAA,IAA6B,KAAAC,aAAA,IAEe,KAAAC,OAAA,MAAAA,OAAA,CAAAC,IAAA,OAG5C,KAAAC,WAAA,MAAAA,WAAA,CAAAD,IAAA,OAGAE,WAAA,CACA,YAAAN,OAAA,CAGAO,OAAA,CACA,SAAAP,OAAA,EAIA,IACAlD,OAAAA,CAAA,CACAqD,QAAAA,CAAA,CACME,YAAAA,CAAA,CACN,MACArI,EAAA8E,EAAAa,GAAA,CAAA3F,MAAA,CACAA,EAAAwI,OAAA,CAAAL,EACAnI,EAAAyI,WAAA,CAAAJ,EACA,KAAAL,OAAA,IAXA,CAcAU,MAAA,CACA,QAAAV,OAAA,EAIA,IAAAhI,EAAA,KAAA8E,MAAA,CAAAa,GAAA,CAAA3F,MAAA,CACA,KAAAgI,OAAA,IACAhI,EAAAwI,OAAA,MACAxI,EAAAyI,WAAA,MANA,CASAE,WAAA,CACA,YAAAX,OAAA,OAAAC,MAAA,CAAAtJ,MAAA,GAGAiK,WAAA,CACA,QAAAZ,OAAA,EAIA,IACAlD,OAAAnC,CAAA,CACAsF,OAAAA,CAAA,CACMC,cAAAA,CAAA,CACN,MACA,CACMW,MAAAA,CAAA,EAAAlG,EAAAgD,GAAA,CAAA3F,MAAA,CAGN6I,GACAA,CAAAA,EAAAC,MAAA,KAGAb,EAAAc,OAAA,EAAAhJ,EAAAsG,IAAA,CAMA,IALA,IACQ2C,IAAAA,CAAA,CACR,CAAAjJ,EAAAyF,EAAA0C,CAAA,CAAA7B,EAAA,CAGAb,GACAwD,EAAAxD,GACAA,EAAAA,EAAAyD,MAAA,GAIA,KAAAhB,MAAA,IACA,KAAAC,aAAA,IA7BA,CAgCAgB,UAAA1D,CAAA,CAAAG,CAAA,EACA,QAAAqC,OAAA,EAAArC,GAIA,IACAsC,OAAAA,CAAA,CACMC,cAAAA,CAAA,CACN,MACAD,EAAAc,OAAA,EAAAI,EAAA9C,IAAA,CACA,IACAU,EAAAA,CAAA,CACQC,EAAAA,CAAA,EAAAmC,CAGR,EAAAjB,CAAA,CAAA7B,EAAA,EAAAV,EAAAyD,aAAA,EAAAzD,EAAAyD,aAAA,CAAArC,EAAAC,IACAkB,CAAAA,CAAA,CAAA7B,EAAA,CAAAb,CAAA,CAEA,GAhBA,CAmBA6D,iBAAA7D,CAAA,CAAA8D,CAAA,EACA,QAAAtB,OAAA,EAAAsB,GAIA,IACArB,OAAAA,CAAA,CACMC,cAAAA,CAAA,CACN,MACAD,EAAAc,OAAA,EAAAQ,EAAAlD,IAAA,CACA,IACAU,EAAAA,CAAA,CACQC,EAAAA,CAAA,EAAAuC,CAGR,EAAArB,CAAA,CAAA7B,EAAA,EAAAiD,EAAAE,YAAA,CAAAzC,EAAAC,IACAkB,CAAAA,CAAA,CAAA7B,EAAA,CAAAb,CAAA,CAEA,GAhBA,CAmBAiE,MAAA1C,CAAA,CAAAC,CAAA,EAQA,IAPA,IACAlI,OAAAA,CAAA,CACM6G,IAAAA,CAAA,CACN,MAAAb,MAAA,CACAoC,EAAA,IAAAhM,EAAA6L,EAAAC,GAAAxB,EAAAG,EAAA3F,MAAA,CAGAwF,GACA0B,EAAAH,CAAA,EAAAvB,EAAAkE,UAAA,CACAxC,EAAAF,CAAA,EAAAxB,EAAAmE,SAAA,CACAnE,EAAAA,EAAAoE,YAAA,CAWA,OARA9K,EAAA+K,OAAA,EACA3C,CAAAA,EAAAH,CAAA,EAAAjI,EAAA+K,OAAA,EAGA/K,EAAAgL,OAAA,EACA5C,CAAAA,EAAAF,CAAA,EAAAlI,EAAAgL,OAAA,EAGA5C,CAAA,CAGAiB,QAAA4B,CAAA,EACA,IACAhD,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAAAyC,KAAA,CAAAM,EAAAC,OAAA,CAAAD,EAAAE,OAAA,EACA,KAAAhC,MAAA,CAAA/P,IAAA,EACAgS,KAAA,UACAnD,EAAAA,EAAAC,EAAAA,EAGAgC,IAAAmB,CAAA,EACAA,EAAAhC,OAAA,EACAgC,EAAAhC,OAAA,EACA,CAGA,GAGAE,YAAA0B,CAAA,EACA,IACAhD,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAAAyC,KAAA,CAAAM,EAAAC,OAAA,CAAAD,EAAAE,OAAA,EACA,KAAAhC,MAAA,CAAA/P,IAAA,EACAgS,KAAA,cACAnD,EAAAA,EAAAC,EAAAA,EAGAgC,IAAAmB,CAAA,EACAA,EAAA9B,WAAA,EACA8B,EAAA9B,WAAA,EACA,CAGA,GAEA,CAGA,IAAA+B,EAAA,oBAAAtL,OAAAA,OAAA,KACAuL,EAAA,oBAAA5K,MAAAA,MAAA2I,IAAA,CAAAxJ,KAAAA,GACA,WACA5C,EACA0G,YAAAiD,CAAA,EACA,IACAlG,MAAAA,EAAA4K,CAAA,CACMvL,OAAAA,EAAAsL,CAAA,CACN,CAAA1L,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA,KAAAiH,GAAA,CAAAA,EACA,KAAA2E,SAAA,IACA,KAAAC,kBAAA,KACA,KAAAC,YAAA,KACA,KAAAC,aAAA,KACA,KAAA5F,QAAA,KAAA7H,EACA,KAAA0N,KAAA,KAAA9P,EAAA,MACA,KAAA+P,UAAA,IACA,KAAAC,KAAA,IACA,KAAAC,aAAA,GACA,KAAAC,WAAA,IACA,KAAAC,aAAA,IACA,KAAAC,UAAA,MACA,KAAAlM,MAAA,CAAAA,EACA,KAAAW,KAAA,CAAAA,CAAA,CAGAwL,KAAAC,CAAA,EACA,KAAAN,KAAA,CAAA1S,IAAA,CAAAgT,EAAA,CAGAC,OAAA,QAEA,KAAAC,YAAA,CAIA,KAAAA,YAAA,CAHAC,QAAAC,OAAA,GAMAC,SAAA,CACA,QAAAT,WAAA,CACA,SAEA,IAAAA,EAAA,KAAAF,KAAA,CAAAY,KAAA,CAAAC,GAAAA,KAYA,OATAX,IAAA,KAAAF,KAAA,IAGA,KAAAc,YAAA,EACA,KAAAA,YAAA,IAIA,KAAAZ,WAAA,CAAAA,EACAA,CAAA,CAGAa,YAAAhG,CAAA,EAEAA,EAAAiG,WAAA,iBACAjG,EAAAkG,OAAA,QACAlG,EAAAmG,QAAA,SACAnG,EAAAoG,UAAA,GAGAC,WAAAjM,CAAA,EACA,IACA4C,SAAAA,CAAA,CACAgD,IAAAA,CAAA,CACAsG,YAAAA,CAAA,CACA/M,MAAAA,CAAA,CACAgN,aAAAA,CAAA,CACA/M,OAAAA,CAAA,CACAgN,cAAAA,CAAA,CACAC,KAAAA,EAAA,EACAC,KAAAA,EAAA,EACAC,KAAAA,CAAA,CACAC,KAAAA,CAAA,CACAC,KAAAA,EAAA,GACAC,MAAAA,EAAA,EACMC,MAAAA,EAAA,EACN,CAAA3M,EAIA,CAAA4M,EAAAC,EAAA,CAAAC,EAHgFZ,GAAA9L,OAAA,gBAGhF4C,KAAA,MACA+J,EAAAH,GAAA,WAAwDI,EAAAH,GAAA,OAGxDI,EAAA9N,EAAAgN,EACAe,EAAA9N,EAAAgN,EACAe,EAAA9L,KAAA2D,GAAA,CAAAiI,EAAAC,GACAE,EAAA/L,KAAA6D,GAAA,CAAA+H,EAAAC,GACAG,EAAAlB,EAAAmB,EAAAlB,EAGA,SAAAY,IACAK,GAAAF,EACAG,GAAAH,GAGA,UAAAH,IACAK,GAAAD,EACAE,GAAAF,GAGA,IAAAG,EAAA,IAAAjS,EAAAsH,EAAA,OAAA2J,GACAiB,EAAA,IAAAlS,EAAAsH,EAAA,OAAA4J,GAAAiB,EAAAF,EAAAnK,QAAA,IAAAoK,EAAApK,QAAA,GAOA,GAJAqK,GACA7H,EAAA8H,SAAA,EAAAP,EAAAI,EAAA9I,SAAA,OAAA0I,EAAAK,EAAA/I,SAAA,OAGAgI,EAAA,CACA,IAAAkB,EAAAR,EAAAT,EACAkB,EAAAT,EAAAR,EACA/G,EAAAiI,SAAA,GACAjI,EAAAkI,MAAA,CAAAH,EAAAC,GACAhI,EAAAmI,MAAA,CAAA5O,EAAAyO,GACAhI,EAAAmI,MAAA,CAAA5O,EAAAC,GACAwG,EAAAmI,MAAA,CAAAJ,EAAAvO,GACAwG,EAAAoI,SAAA,GACApI,EAAA6G,IAAA,MAGA,CAAAgB,EAAA,CACA,IAAAQ,EAAAjB,SAAAA,GAAAG,IAAAD,EACAgB,EAAAlB,UAAAA,GAAAI,IAAAF,EACAiB,EAAAnB,SAAAA,GAAAG,IAAAF,EAAAmB,EAAApB,UAAAA,GAAAI,IAAAH,EAGAF,EAAA/L,UAAA,UAAAiN,CAAAA,GAAAC,CAAA,GACAtI,EAAA8H,SAAA,CAAAvO,EAAA,EAAAkO,EAAA,KAGAN,EAAAnJ,QAAA,UAAAuK,CAAAA,GAAAC,CAAA,GACAxI,EAAA8H,SAAA,GAAAtO,EAAA,EAAAkO,EAAA,GAGAP,EAAA/L,UAAA,UAAAiN,CAAAA,GAAAC,CAAA,GACAtI,EAAA8H,SAAA,CAAAvO,EAAAkO,EAAA,GAGAN,EAAAnJ,QAAA,UAAAuK,CAAAA,GAAAC,CAAA,GACAxI,EAAA8H,SAAA,GAAAtO,EAAAkO,EACM,QAIN,IACA,IAAAP,SAAAA,EACAnH,EAAA0B,KAAA,CAAA2F,EAAAC,GAAA,UAGAF,SAAAA,EACApH,EAAA0B,KAAA,CAAA6F,EAAAA,GAAA,UAGAH,UAAAA,EACApH,EAAA0B,KAAA,CAAA8F,EAAAA,EACM,CAINxH,EAAA8H,SAAA,EAAArB,EAAA,CAAAC,EAAA,CAGA9D,MAAA/C,CAAA,EACA,IACA4I,aAAAA,EAAA,GACApP,YAAAA,EAAA,GACAD,gBAAAA,EAAA,GACAsP,iBAAAA,EAAA,GACAC,YAAAA,EAAA,GACAC,YAAAA,CAAA,CACAC,WAAAA,CAAA,CACAC,YAAAA,CAAA,CACAC,QAAAA,CAAA,CACMC,QAAAA,CAAA,CACN,CAAAjQ,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA,CACA4L,UAAAA,CAAA,CACMI,MAAAA,CAAA,CACN,MACAG,EAAA,IAAAP,EAUA,GATA,KAAAO,aAAA,CAAAA,EACA,KAAAO,YAAA,KAAAC,QAAAC,GAAA,CACK,KAAAI,YAAA,CAAAJ,CAAA,GAGL,KAAAC,OAAA,IACA,KAAAqD,MAAA,CAAApJ,EAAA6I,EAAAC,EAAAE,EAAAC,EAAAC,EAAAC,GAGAP,GAIA,IAAAS,EAAAC,KAAAD,GAAA,GACAE,EAAAF,EAAA3M,EAAA,EAGA8M,EAAA,KACA9M,CAAAA,EAAA2M,CAAAA,EAAAC,KAAAD,GAAA,IAAAE,CAAA,GAGAlE,IAAAkE,EAAAF,EAAA3M,EAAA2I,EAGA,KAAAoE,YAAA,CAAAlQ,EAAAwP,KACA,KAAAK,MAAA,CAAApJ,EAAA6I,EAAAC,EAAAE,EAAAC,EAAAC,EAAAC,GACAjE,EAAA9B,SAAA,KAIA,KAAAoC,UAAA,CAAAjN,EAAAiR,EAAA,EAGAhQ,GACA0L,EAAAnC,KAAA,GAGA,KAAAyC,UAAA,CAAAjN,EAAAiR,GA3BA,CA8BAtG,MAAA,CACM,KAAAsC,UAAA,GACNjN,EAAAmR,MAAA,MAAAlE,UAAA,EACA,KAAAA,UAAA,OAGA,KAAAN,KAAA,CAAAhC,IAAA,GAGAuG,aAAAlQ,CAAA,CAAAwP,CAAA,EAEA,IAAAxP,EAAA,CACA,IACQ8L,cAAAA,CAAA,CACR,MAGA,GAHA,KAAAF,UAAA,CAAAwE,MAAA,EAAAF,EAAAG,IAAAA,EAAAC,MAAA,CAAAxE,IAAAoE,EAAA,IAIA,QACM,UAIN,mBAAAV,GAAAA,KAIA,MAAAzD,WAAA,OAAAS,OAAA,IAKA,KAAAb,KAAA,CAAA/B,SAAA,GAIA,CAGAiG,OAAApJ,CAAA,CAAA6I,CAAA,CAAAC,CAAA,CAAAE,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IACAnE,aAAAA,CAAA,CACAC,cAAAA,CAAA,CACA5F,SAAAA,CAAA,CACAc,IAAAA,CAAA,CACMoF,cAAAA,CAAA,CACN,MACA/K,EAAA2F,EAAA3F,MAAA,CAAA6E,EAAA6B,KAAA,GAGA1G,EAAAd,KAAA,EAAAc,EAAAb,MAAA,CACM0F,EAAA8B,UAAA,CAAA3G,EAAAd,KAAA,CAAAc,EAAAb,MAAA,EAEN0F,EAAA8B,UAAA,CAAA6D,EAAAC,GAGA,IAAA6E,EAAA9J,EAAA+J,QAAA,UAAAC,EAAAhK,EAAA+J,QAAA,UAGA,EAAAlB,GAAAtD,CAAAA,GAAA,iBAAAyD,GAAA,iBAAAC,CAAA,IAEAa,EAAAnM,QAAA,KAAAnD,EAAAd,KAAA,CAAAoQ,EAAA9K,SAAA,MAGAxE,EAAA6I,KAAA,EACA7I,CAAAA,EAAA6I,KAAA,CAAA3J,KAAA,IAAAuQ,MAAA,CAAAzP,EAAAd,KAAA,SAIAsQ,EAAArM,QAAA,KAAAnD,EAAAb,MAAA,CAAAqQ,EAAAhL,SAAA,MAGAxE,EAAA6I,KAAA,EACA7I,CAAAA,EAAA6I,KAAA,CAAA1J,MAAA,IAAAsQ,MAAA,CAAAzP,EAAAb,MAAA,UAKA,IAAAuQ,EAAA1P,EAAA2P,WAAA,EAAA3P,EAAAd,KAAA,CAAA0Q,EAAA5P,EAAA6P,YAAA,EAAA7P,EAAAb,MAAA,CAkBA,GAfAkP,GAAAiB,EAAAnM,QAAA,IAAAqM,EAAArM,QAAA,KACAuM,EAAAJ,EAAA9K,SAAA,MACAoL,EAAAJ,EAAAhL,SAAA,OAEAK,EAAA8B,UAAA,CAAA+I,EAAAE,GAGA,iBAAAlB,GACAlJ,EAAAO,YAAA,SAAAnC,QAAA,CAAA8K,GAGA,iBAAAC,GACAnJ,EAAAO,YAAA,SAAAnC,QAAA,CAAA+K,GAGA,iBAAAH,GAAA,iBAAAC,EAAA,CACA,IAAAqB,EAAAvS,EAAAiI,EAAAO,YAAA,YAAA9C,SAAA,IACA8M,EAAA,EAAAC,EAAA,EAGA,oBAAAxB,EAAA,KAAAyB,EAAAzK,EAAA+J,QAAA,UAGAU,EAAA9M,QAAA,GACU4M,EAAAE,EAAAzL,SAAA,MAAAgK,EACV0B,MAAAJ,CAAA,MACAC,CAAAA,EAAAD,CAAA,IAAAtB,CAAA,CACA,IAGA,iBAAAC,EAAA,KAAA0B,EAAA3K,EAAA+J,QAAA,WAGAY,EAAAhN,QAAA,GACU6M,EAAAG,EAAA3L,SAAA,MAAAiK,EACVyB,MAAAJ,CAAA,MACAE,CAAAA,EAAAF,CAAA,IAAArB,CAAA,CACA,IAIAsB,CAAAA,EAAAC,CAAA,EAGAA,GACAA,CAAAA,EAAAD,CAAA,EAGAvK,EAAAO,YAAA,aAAAnC,QAAA,CAAA4K,GACAhJ,EAAAO,YAAA,cAAAnC,QAAA,CAAA6K,GACA,IAAA2B,EAAA5K,EAAA+J,QAAA,oBACMa,EAAAxM,QAAA,IAAA6L,MAAA,CAAAW,EAAAnN,SAAA,cAAAwM,MAAA,GAAAM,EAAA,MAAAN,MAAA,GAAAO,EAAA,SAKNrK,EAAA0K,SAAA,KAAAX,EAAAE,GAEApK,EAAAoJ,MAAA,CAAAjJ,GAGAoF,GACA,MAAAA,aAAA,IACA,CAGA,CACA/O,EAAAoO,aAAA,CAAAA,EAAApO,EAAAsU,YAAA,CAAAjG,EAGA,IACEiG,aAAAA,CAAA,CACF,CAAAtU,EACAuU,EAAA,oBAAA/R,UAAAA,UAAA,WACA1D,EACA4H,aAAA,CACA,IACAjD,MAAAA,EAAA6Q,CAAA,CACM9R,UAAAA,EAAA+R,CAAA,CACN,CAAA7R,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA,KAAAe,KAAA,CAAAA,EACA,KAAAjB,SAAA,CAAAA,CAAA,CAGAyI,MAAAuJ,CAAA,MAAAC,EAAA,KAGA,SAAA5S,EAAAyB,CAAA,qBACA,EAAAyB,UAAA,MACA0P,EAAAC,eAAA,CAAAF,GAGKC,EAAAE,IAAA,CAAAH,EAHL,IAIA,CAGAE,gBAAAE,CAAA,MAAAC,EAAA,SAAArS,SAAA,CAGA,IACM,YAAAsS,aAAA,CAAAD,EAAAH,eAAA,CAAAE,EAAA,iBACN,OAAAG,EAAA,CACA,YAAAD,aAAA,CAAAD,EAAAH,eAAA,CAAAE,EAAA,YACA,EAGAE,cAAAnO,CAAA,MAAAqO,EAAArO,EAAAsO,oBAAA,mBAGA,GAAAD,EACA,YAAAA,EAAAE,WAAA,EAGA,OAAAvO,CAAA,CAGAgO,KAAAjR,CAAA,MAAAyR,EAAA,KAGA,SAAAtT,EAAAyB,CAAA,cAEA,IAAAsR,EAAA,KAAApR,CADA,MAAA2R,EAAA1R,KAAA,CAAAC,EAAA,EACA0R,IAAA,GACK,OAAAD,EAAAT,eAAA,CAAAE,EACL,KAEA,CAGA,MAAA/T,EACA6F,YAAA+I,CAAA,CAAAvE,CAAA,EACA,KAAAgD,IAAA,aACA,KAAAhD,KAAA,MACA,KAAAA,KAAA,CAAAhM,EAAA+L,KAAA,CAAAC,EAAA,CAGAmK,MAAA1L,CAAA,EACA,IACAoB,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAAAE,KAAA,CACAvB,EAAA8H,SAAA,CAAA1G,GAAA,EAAAC,GAAA,GAGAsK,QAAA3L,CAAA,EACA,IACAoB,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAAAE,KAAA,CACAvB,EAAA8H,SAAA,IAAA1G,GAAA,KAAAC,GAAA,GAGAuK,aAAArK,CAAA,EACA,IACAH,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAAAE,KAAA,CACAA,EAAAU,cAAA,UAAAb,GAAA,EAAAC,GAAA,IAEA,CAGA,MAAApL,EACA8G,YAAAC,CAAA,CAAA6O,CAAA,CAAAC,CAAA,EACA,KAAAvH,IAAA,UACA,KAAAwH,KAAA,MACA,KAAAC,OAAA,MACA,KAAAC,OAAA,MACA,KAAAC,EAAA,GACA,KAAAC,EAAA,GACA,IAAAC,EAAAxU,EAAAiU,EACA,MAAAE,KAAA,KAAArW,EAAAsH,EAAA,QAAAoP,CAAA,KACA,KAAAJ,OAAA,CAAAF,CAAA,IACA,KAAAG,OAAA,CAAAH,CAAA,IACA,KAAAI,EAAA,CAAAE,CAAA,OACA,KAAAD,EAAA,CAAAC,CAAA,OAGAV,MAAA1L,CAAA,EACA,IACAkM,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACAH,QAAAA,CAAA,CACAC,QAAAA,CAAA,CACMF,MAAAA,CAAA,CACN,MACAM,EAAAH,EAAAF,EAAAnN,SAAA,MACAyN,EAAAH,EAAAF,EAAApN,SAAA,MACAmB,EAAA8H,SAAA,CAAAuE,EAAAC,GACAtM,EAAA6L,MAAA,CAAAE,EAAAvM,UAAA,IACAQ,EAAA8H,SAAA,EAAAuE,EAAA,CAAAC,EAAA,CAGAX,QAAA3L,CAAA,EACA,IACAkM,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACAH,QAAAA,CAAA,CACAC,QAAAA,CAAA,CACMF,MAAAA,CAAA,CACN,MACAM,EAAAH,EAAAF,EAAAnN,SAAA,MACAyN,EAAAH,EAAAF,EAAApN,SAAA,MACAmB,EAAA8H,SAAA,CAAAuE,EAAAC,GACAtM,EAAA6L,MAAA,IAAAE,EAAAvM,UAAA,IACAQ,EAAA8H,SAAA,EAAAuE,EAAA,CAAAC,EAAA,CAGAV,aAAArK,CAAA,EACA,IACA2K,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACMJ,MAAAA,CAAA,CACN,MACAQ,EAAAR,EAAAvM,UAAA,GACA+B,EAAAU,cAAA,UAAAiK,GAAA,EAAAC,GAAA,EACA,EACA5K,EAAAU,cAAA,EAAAxG,KAAA+Q,GAAA,CAAAD,GAAA9Q,KAAAgR,GAAA,CAAAF,GAAA,CAAA9Q,KAAAgR,GAAA,CAAAF,GAAA9Q,KAAA+Q,GAAA,CAAAD,GAAA,MACAhL,EAAAU,cAAA,WAAAiK,GAAA,GAAAC,GAAA,EACA,EAEA,CAGA,MAAA/V,EACA2G,YAAA+I,CAAA,CAAApE,CAAA,CAAAoK,CAAA,EACA,KAAAvH,IAAA,SACA,KAAA7C,KAAA,MACA,KAAAsK,OAAA,MACA,KAAAC,OAAA,MAA6C,IAAAS,EAAAnX,EAAAkM,UAAA,CAAAC,GAG7CgL,CAAAA,IAAAA,EAAAtL,CAAA,EAAAsL,IAAAA,EAAArL,CAAA,IACAqL,EAAAtL,CAAA,CAAAlM,EACAwX,EAAArL,CAAA,CAAAnM,GAGA,KAAAwM,KAAA,CAAAgL,EACA,KAAAV,OAAA,CAAAF,CAAA,IACA,KAAAG,OAAA,CAAAH,CAAA,IAGAJ,MAAA1L,CAAA,EACA,IACA0B,MAAA,CACAN,EAAAA,CAAA,CACOC,EAAAA,CAAA,CACP,CACA2K,QAAAA,CAAA,CACMC,QAAAA,CAAA,CACN,MACAI,EAAAL,EAAAnN,SAAA,MACAyN,EAAAL,EAAApN,SAAA,MACAmB,EAAA8H,SAAA,CAAAuE,EAAAC,GACAtM,EAAA0B,KAAA,CAAAN,EAAAC,GAAAD,GACApB,EAAA8H,SAAA,EAAAuE,EAAA,CAAAC,EAAA,CAGAX,QAAA3L,CAAA,EACA,IACA0B,MAAA,CACAN,EAAAA,CAAA,CACOC,EAAAA,CAAA,CACP,CACA2K,QAAAA,CAAA,CACMC,QAAAA,CAAA,CACN,MACAI,EAAAL,EAAAnN,SAAA,MACAyN,EAAAL,EAAApN,SAAA,MACAmB,EAAA8H,SAAA,CAAAuE,EAAAC,GACAtM,EAAA0B,KAAA,GAAAN,EAAA,EAAAC,GAAAD,GACApB,EAAA8H,SAAA,EAAAuE,EAAA,CAAAC,EAAA,CAGAV,aAAArK,CAAA,EACA,IACAH,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAAAK,KAAA,CACAH,EAAAU,cAAA,EAAAb,GAAA,MAAAC,GAAA,QAEA,CAGA,MAAAtM,EACAgI,YAAA+I,CAAA,CAAA6G,CAAA,CAAAb,CAAA,EACA,KAAAvH,IAAA,UACA,KAAAoI,MAAA,IACA,KAAAX,OAAA,MACA,KAAAC,OAAA,MACA,KAAAU,MAAA,CAAA/U,EAAA+U,GACA,KAAAX,OAAA,CAAAF,CAAA,IACA,KAAAG,OAAA,CAAAH,CAAA,IAGAJ,MAAA1L,CAAA,EACA,IACAgM,QAAAA,CAAA,CACAC,QAAAA,CAAA,CACMU,OAAAA,CAAA,CACN,MACAN,EAAAL,EAAAnN,SAAA,MACAyN,EAAAL,EAAApN,SAAA,MACAmB,EAAA8H,SAAA,CAAAuE,EAAAC,GACAtM,EAAAkC,SAAA,CAAAyK,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACA3M,EAAA8H,SAAA,EAAAuE,EAAA,CAAAC,EAAA,CAGAX,QAAA3L,CAAA,EACA,IACAgM,QAAAA,CAAA,CACAC,QAAAA,CAAA,CACMU,OAAAA,CAAA,CACN,MACAC,EAAAD,CAAA,IACAE,EAAAF,CAAA,IACAG,EAAAH,CAAA,IACA/Z,EAAA+Z,CAAA,IACAI,EAAAJ,CAAA,IACAK,EAAAL,CAAA,IAIAM,EAAA,EAAAL,CAAAA,EAAAG,CAAAA,EAAAA,EAAAC,EAAAA,CAAAE,EAAAL,EAAAja,CAAAA,EAAAA,EAAAoa,EAAAA,CAAAG,EAAAL,EAAAla,CAAAA,EAAAA,EAAAma,EAAAA,CAAAI,CAAA,EACAd,EAAAL,EAAAnN,SAAA,MACAyN,EAAAL,EAAApN,SAAA,MACAmB,EAAA8H,SAAA,CAAAuE,EAAAC,GACAtM,EAAAkC,SAAA,CAAA+K,EAAAF,CAAAA,EAAAA,EAAAC,EAAAA,CAAAE,EAAAD,EAAAD,CAAAA,EAAAA,EAAApa,EAAAA,CAAA8N,EAAAuM,EAAAH,CAAAA,EAAAA,EAAAD,EAAAA,CAAAnM,EAAAuM,EAAAL,CAAAA,EAAAA,EAAAE,EAAAA,CAAAK,EAAAF,EAAAJ,CAAAA,EAAAG,EAAAF,EAAAC,CAAAA,EAAAE,EAAAH,CAAAA,EAAAla,EAAAga,EAAAI,CAAAA,GACAhN,EAAA8H,SAAA,EAAAuE,EAAA,CAAAC,EAAA,CAGAV,aAAArK,CAAA,EACAA,EAAAU,cAAA,MAAA0K,MAAA,EAEA,CAGA,MAAArW,UAAAvB,EACAgI,YAAAC,CAAA,CAAAoQ,CAAA,CAAAtB,CAAA,EACA,MAAA9O,EAAAoQ,EAAAtB,GACA,KAAAvH,IAAA,QACA,KAAAwH,KAAA,MACA,KAAAA,KAAA,KAAArW,EAAAsH,EAAA,QAAAoQ,EAAA,CAEA,CAGA,MAAA7W,WAAAD,EACAyG,YAAAC,CAAA,CAAAoQ,CAAA,CAAAtB,CAAA,EACA,MAAA9O,EAAAoQ,EAAAtB,GACA,KAAAvH,IAAA,SACA,KAAAoI,MAAA,MAAAlR,KAAA4R,GAAA,MAAAtB,KAAA,CAAAvM,UAAA,WAEA,CAGA,MAAAhJ,WAAAF,EACAyG,YAAAC,CAAA,CAAAoQ,CAAA,CAAAtB,CAAA,EACA,MAAA9O,EAAAoQ,EAAAtB,GACA,KAAAvH,IAAA,SACA,KAAAoI,MAAA,IAAAlR,KAAA4R,GAAA,MAAAtB,KAAA,CAAAvM,UAAA,aAEA,CAYA,MAAAvI,GACA8F,YAAAC,CAAA,CAAAkF,CAAA,CAAA4J,CAAA,EACA,KAAA9O,QAAA,CAAAA,EACA,KAAAsQ,UAAA,IAEAC,EADArL,GAZA3E,IAAA,GAAA/C,OAAA,yBAAAA,OAAA,sBAAA4C,KAAA,gBAaAgG,OAAA,CAAAlB,GAAA,CACA,GAAAA,SAAAA,GAIA,IAAAqC,EAAAtH,EAAA,CAAAuQ,SAfAtL,CAAA,EACA,IAAAqC,EAAAtH,EAAA,CAAAiF,EAAA9E,KAAA,MACA,OAAAmH,EAAAhH,IAAA,GAAAN,EAAAM,IAAA,GAAA/C,OAAA,WAaA0H,GAAAuL,EAAAxW,GAAAyW,cAAA,CAAAnJ,EAAA,MAGA,IAAAkJ,GACA,KAAAH,UAAA,CAAA/a,IAAA,KAAAkb,EAAA,KAAAzQ,QAAA,CAAAC,EAAA6O,IAPA,EASA,CAGA,OAAA6B,YAAA3Q,CAAA,CAAA6C,CAAA,EACA,IAAA4K,EAAA5K,EAAA+J,QAAA,oBACA,CAAAgE,EAAAC,EAAAD,CAAA,EAAA/N,EAAA+J,QAAA,2BAAAxM,KAAA,UAGA,EAAAI,QAAA,GACA,IAAAvG,GAAA+F,EAAAyN,EAAAnN,SAAA,GAJA,CAAAsQ,EAAAC,EAAA,EAOA,KAGAnC,MAAA1L,CAAA,EAMA,OALA,CACMsN,WAAAA,CAAA,CACN,MAAA9M,EAAA8M,EAAAtU,MAAA,CAGA0H,EAAA,EAAAA,EAAAF,EAAAE,IACA4M,CAAA,CAAA5M,EAAA,CAAAgL,KAAA,CAAA1L,EACA,CAGA2L,QAAA3L,CAAA,EAMA,OALA,CACMsN,WAAAA,CAAA,CACN,MAAA9M,EAAA8M,EAAAtU,MAAA,CAGA0H,EAAAF,EAAA,EAAAE,GAAA,EAAAA,IACA4M,CAAA,CAAA5M,EAAA,CAAAiL,OAAA,CAAA3L,EACI,CAIJ4L,aAAArK,CAAA,EAMA,OALA,CACM+L,WAAAA,CAAA,CACN,MAAA9M,EAAA8M,EAAAtU,MAAA,CAGA0H,EAAA,EAAAA,EAAAF,EAAAE,IACA4M,CAAA,CAAA5M,EAAA,CAAAkL,YAAA,CAAArK,EACA,CAGA,CACAtK,GAAAyW,cAAA,EACA5F,UAAA5Q,EACA2U,OAAA5V,EACAyL,MAAAtL,EACAuW,OAAA5X,EACA+Y,MAAAvX,GACAwX,MAAAvX,EAAA,CAGA,OAAA5C,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,EACA,IAAA6T,EAAAjV,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IAYA,GAXA,KAAAiE,QAAA,CAAAA,EACA,KAAA7C,IAAA,CAAAA,EACA,KAAA6T,gBAAA,CAAAA,EACA,KAAAC,UAAA,IACA,KAAAC,MAAA,IACA,KAAAC,iBAAA,IACA,KAAAC,eAAA,IACA,KAAAC,oBAAA,IACA,KAAA/K,MAAA,WAAAgL,QAAA,IAGA,CAAAnU,GAAAA,IAAAA,EAAAoU,QAAA,CAEM,OAINC,MAAAC,IAAA,CAAAtU,EAAA8T,UAAA,EAAA7K,OAAA,CAAAsL,GAAA,CACA,IAAAC,EAAAnX,EAAAkX,EAAAC,QAAA,CACK,MAAAV,UAAA,CAAAU,EAAA,KAAAjZ,EAAAsH,EAAA2R,EAAAD,EAAAzR,KAAA,CACL,GAAyC,KAAA2R,4BAAA,GAGzC,KAAAxO,YAAA,UAAA5C,QAAA,IAEA0Q,IADA,CAAA9N,YAAA,UAAA9C,SAAA,GAAAF,KAAA,MAAAzC,GAAA,CAAAmL,GAAAA,EAAAvI,IAAA,IACA6F,OAAA,CAAAF,GAAA,CACA,GAAAA,GAIA,IAAApI,EAAAmC,EAAA,CAAAiG,EAAA9F,KAAA,MAAAzC,GAAA,CAAAmL,GAAAA,EAAAvI,IAAA,GACO,MAAA2Q,MAAA,CAAApT,EAAA,KAAApF,EAAAsH,EAAAlC,EAAAmC,GAJP,GAQA,IACM0C,YAAAA,CAAA,CACN,CAAA3C,EAAsC6R,EAAA,KAAAzO,YAAA,OAGtCyO,EAAArR,QAAA,IACA,CAAAmC,CAAA,CAAAkP,EAAAvR,SAAA,KACAqC,CAAAA,CAAA,CAAAkP,EAAAvR,SAAA,UAIAkR,MAAAC,IAAA,CAAAtU,EAAA2U,UAAA,EAAA1L,OAAA,CAAA2L,GAAA,CACA,GAAAA,IAAAA,EAAAR,QAAA,CACQ,KAAAS,QAAA,CAAAD,QACR,GAAAf,GAAAe,CAAAA,IAAAA,EAAAR,QAAA,EAAAQ,IAAAA,EAAAR,QAAA,OAAAU,EAAAjS,EAAAkS,cAAA,CAAAH,EAGAE,CAAAA,EAAAE,OAAA,GAAAnW,MAAmC,IACnC,KAAAgW,QAAA,CAAAC,EAEK,GACL,CAGA7O,aAAAtF,CAAA,EACA,IAAAsU,EAAArW,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IAAAsW,EAAA,KAAApB,UAAA,CAAAnT,EAAA,CAGA,IAAAuU,GAAAD,EAAA,KAAAE,EAAA,IAAA5Z,EAAA,KAAAsH,QAAA,CAAAlC,EAAA,IAIA,OADA,KAAAmT,UAAA,CAAAnT,EAAA,CAAAwU,EACAA,CAAA,QAGAD,GAAA3Z,EAAAyH,KAAA,MAAAH,QAAA,EAGAkD,kBAAA,CACA,QAAAqP,KAAA,KAAAtB,UAAA,CACA,GAAAsB,SAAAA,GAAAA,EAAAvR,QAAA,UACA,YAAAiQ,UAAA,CAAAsB,EAAA,CAIA,OAAA7Z,EAAAyH,KAAA,MAAAH,QAAA,EAGA4M,SAAA9O,CAAA,EACA,IAAAsU,EAAArW,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IACAyW,EAAAzW,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IAAAmK,EAAA,KAAAgL,MAAA,CAAApT,EAAA,CAGA,GAAAoI,EACA,OAAAA,CAAA,CAEA,IAAAmM,EAAA,KAAAjP,YAAA,CAAAtF,GAGA,GAAAuU,MAAAA,GAAgCA,EAAA7R,QAAA,GAGhC,OAHgC,KAAA0Q,MAAA,CAAApT,EAAA,CAAAuU,EAGhCA,CAAA,CAGA,IAAAG,EAAA,CACA,IACQlM,OAAAA,CAAA,OAGR,GAAAA,EAAA,KAAAmM,EAAAnM,EAAAsG,QAAA,CAAA9O,GAGA,GAAA2U,MAAAA,GAAAA,EAAAjS,QAAA,GACA,OAAAiS,CACA,CACA,IAGAL,EAAA,KAAAM,EAAA,IAAAha,EAAA,KAAAsH,QAAA,CAAAlC,EAAA,IAIA,OADA,KAAAoT,MAAA,CAAApT,EAAA,CAAA4U,EACAA,CAAA,QAGAxM,GAAAxN,EAAAyH,KAAA,MAAAH,QAAA,EAGAiM,OAAAjJ,CAAA,EAGA,iBAAA4J,QAAA,YAAAtM,SAAA,oBAAAsM,QAAA,eAAAtM,SAAA,IAMA,GAHA0C,EAAA2P,IAAA,GAGA,KAAA/F,QAAA,SAAApM,QAAA,IACA,IAAAoS,EAAA,KAAAhG,QAAA,SAAAlK,aAAA,GAGAkQ,IACA,KAAAC,YAAA,CAAA7P,GACA4P,EAAAlE,KAAA,CAAA1L,EAAA,MAEA,uBAAA4J,QAAA,WAAA1L,QAAA,UACA,IAAA4R,EAAA,KAAAlG,QAAA,WAAAlK,aAAA,GAGAoQ,IACA,KAAAD,YAAA,CAAA7P,GACA8P,EAAApE,KAAA,CAAA1L,EAAA,MAEA,MACA,KAAA+P,UAAA,CAAA/P,GACA,KAAAgQ,cAAA,CAAAhQ,GACA,KAAAiQ,YAAA,CAAAjQ,EAAA,CAGAA,EAAAkQ,OAAA,GA3BA,CA8BAH,WAAAjK,CAAA,GAGA+J,aAAA7P,CAAA,EACA,IAAAkC,EAAAjL,GAAA0W,WAAA,MAAA3Q,QAAA,OAGAkF,GACMA,EAAAwJ,KAAA,CAAA1L,GAGN,IAAAmQ,EAAA,KAAAvG,QAAA,oBAGA,GAAAuG,EAAA3S,QAAA,QAAAqJ,EAAAsJ,EAAAzQ,aAAA,GAGAmH,GACAA,EAAA6E,KAAA,CAAA1L,EAEA,EAGAiQ,aAAAnK,CAAA,GAGAkK,eAAAhQ,CAAA,EACA,KAAAsO,QAAA,CAAAlL,OAAA,CAAAgN,GAAA,CACKA,EAAAnH,MAAA,CAAAjJ,EACL,GAGAgP,SAAAD,CAAA,EACA,IAAAqB,EAAArB,aAAAnb,GAAAmb,EAAA,KAAA/R,QAAA,CAAAqT,aAAA,CAAAtB,EAAA,CAAAqB,EAAA9M,MAAA,MAGA1P,GAAA0c,gBAAA,CAAAC,QAAA,CAAAH,EAAA7L,IAAA,GACA,KAAA+J,QAAA,CAAA/b,IAAA,CAAA6d,EACA,CAGAI,gBAAArU,CAAA,EAGA,IAHAsU,EAGA,CACMtW,KAAAA,CAAA,OAGN,sBAAAA,EAAAM,OAAA,CACA,OAAAN,EAAAM,OAAA,CAAA0B,EAAA,CAEA,IAAAuU,EAAA,OAAAD,CAAAA,EAAAtW,EAAAiG,YAAA,GAAAqQ,KAAA,IAAAA,EAAA,OAAAA,EAAAE,IAAA,CAAAxW,EAAA,eAGA,EAAAuW,GAAAA,KAAAA,GAIAA,EAAAtT,KAAA,MAAAwT,IAAA,CAAAC,GAAA,IAAA/G,MAAA,CAAA+G,KAAA1U,EAAA,CAGAyS,8BAAA,CACA,IACAV,OAAAA,CAAA,CACMC,kBAAAA,CAAA,OAAAnR,QAAA,CAGN,QAAAb,KAAA+R,EACA,IAAA/R,EAAAf,UAAA,YAAAoV,eAAA,CAAArU,GAAA,CACA,IAAA+G,EAAAgL,CAAA,CAAA/R,EAAA,CAAAE,EAAA8R,CAAA,CAAAhS,EAAA,CAGA,GAAA+G,EACA,QAAApI,KAAAoI,EAAA,KAAA4N,EAAA,KAAA3C,iBAAA,CAAArT,EAAA,MAGA,IAAAgW,GACAA,CAAAA,EAAA,OAGAzU,GAAAyU,IACA,KAAA5C,MAAA,CAAApT,EAAA,CAAAoI,CAAA,CAAApI,EAAA,CACA,KAAAqT,iBAAA,CAAArT,EAAA,CAAAuB,EAEA,CACA,CACA,CAIA0U,aAAAlR,CAAA,CAAAmR,CAAA,EAYA,OAXAA,EAAAxH,MAAA,EAAAyH,EAAAnW,IAAA,KAAAoW,EAAArR,EAAA+J,QAAA,CAAA9O,GAGA,IAAAoW,EAAA1T,QAAA,GACA,OAAAyT,CAAA,CAGA,IAAAhU,EAAAiU,EAAA5T,SAAA,GAEK,OADL4T,EAAAjT,QAAA,KACK,IAAAgT,EAAA,CAAAnW,EAAAmC,EAAA,GACL,GACA,CAGAkU,cAAAtR,CAAA,CAAAqO,CAAA,EACAA,EAAA9K,OAAA,CAAAhJ,GAAA,CACA,IAAAU,EAAAmC,EAAA,CAAA7C,EACKyF,EAAA+J,QAAA,CAAA9O,EAAA,IAAAmD,QAAA,CAAAhB,EACL,GAGAmU,cAAA,KAAAC,EAGA,cAAAA,CAAAA,EAAA,KAAA/N,MAAA,GAAA+N,KAAA,IAAAA,EAAA,OAAAA,EAAA/C,QAAA,CAAAgD,OAAA,YAGA,CAAA1d,GAAA0c,gBAAA,iBAGAnZ,WAAAvD,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,EAAA,CAEA,CAGA,SAAAuD,GAAAC,CAAA,EACA,IAAAC,EAAAD,EAAAjU,IAAA,GACA,eAAAxC,IAAA,CAAA0W,GAAAA,EAAA,IAAA3H,MAAA,CAAA2H,EAAA,KAsEA,MAAArd,GACA2I,YAAA2U,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAL,CAAA,CAAAM,CAAA,EACA,IAAAC,EAAAD,EAAA,iBAAAA,EAAA1d,GAAAkN,KAAA,CAAAwQ,GAAAA,CAAA,IACA,KAAAN,UAAA,CAAAA,GAAAO,EAAAP,UAAA,CACA,KAAAK,QAAA,CAAAA,GAAAE,EAAAF,QAAA,CACA,KAAAH,SAAA,CAAAA,GAAAK,EAAAL,SAAA,CACA,KAAAE,UAAA,CAAAA,GAAAG,EAAAH,UAAA,CACA,KAAAD,WAAA,CAAAA,GAAAI,EAAAJ,WAAA,CAGA,OAAArQ,OAAA,CACA,IAAA0Q,EAAAjZ,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA+Y,EAAA/Y,UAAAC,MAAA,GAAAD,SAAA,IAAAE,KAAAA,CAAA,CACAyY,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAL,EAAA,GACAS,EAAA3a,EAAA0a,GAAAzU,IAAA,GAAAH,KAAA,MACA8U,EAAA,CACAL,SAAA,GACAH,UAAA,GACAE,WAAA,GACAD,YAAA,EACA,EAgDA,OA/CAM,EAAA7O,OAAA,CAAA+O,GAAA,CACA,WACA,KAAAD,EAAAR,SAAA,EAAAtd,GAAA8Z,MAAA,CAAAqC,QAAA,CAAA4B,GACA,YAAAA,GACAT,CAAAA,EAAAS,CAAA,EAGAD,EAAAR,SAAA,cAGA,CAAAQ,EAAAP,WAAA,EAAAvd,GAAAge,QAAA,CAAA7B,QAAA,CAAA4B,GACA,YAAAA,GACAR,CAAAA,EAAAQ,CAAA,EAGAD,EAAAR,SAAA,IACAQ,EAAAP,WAAA,cAGA,CAAAO,EAAAN,UAAA,EAAAxd,GAAAie,OAAA,CAAA9B,QAAA,CAAA4B,GACA,YAAAA,GACAP,CAAAA,EAAAO,CAAA,EAGAD,EAAAR,SAAA,IACAQ,EAAAP,WAAA,IACAO,EAAAN,UAAA,cAGA,CAAAM,EAAAL,QAAA,CACA,YAAAM,GACA,EAAAN,EAAA,CAAAM,EAAA/U,KAAA,OAGA8U,EAAAR,SAAA,IACAQ,EAAAP,WAAA,IACAO,EAAAN,UAAA,IACAM,EAAAL,QAAA,kBAIA,YAAAM,GACAX,CAAAA,GAAAW,CAAA,CAGK,CACL,GACA,IAAA/d,GAAAsd,EAAAC,EAAAC,EAAAC,EAAAL,EAAAM,EAAA,CAGAQ,UAAA,KA9IuBd,EA+IvB,OAAAe,SArIAb,CAAA,EACA,IAAAA,EACA,SAEA,IAAAc,EAAAd,EAAAnU,IAAA,GAAAvC,WAAA,GAGA,OAAAwX,GACA,aACA,aACA,cACA,cACA,cACA,mBAAAA,CAGA,SACA,4BAAAzX,IAAA,CAAAyX,GACA,OAAAA,CAAA,CAGA,QACA,CACA,EA8GA,KAAAd,SAAA,OAAAC,WAAA,CAAAc,SAtGAb,CAAA,EACA,IAAAA,EACA,SAEA,IAAAc,EAAAd,EAAArU,IAAA,GAAAvC,WAAA,GAGA,OAAA0X,GACA,aACA,WACA,cACA,aACA,cACA,cACA,mBAAAA,CAGA,SACA,cAAA3X,IAAA,CAAA2X,GACA,OAAAA,CAAA,CAGA,QACA,GA+EA,KAAAd,UAAA,OAAAC,QAAA,EA/IuBL,EAgJvB,KAAAA,UAAA,CA/IA,SAAAhZ,EAAAgZ,EAAAA,EAAAjU,IAAA,GAAAH,KAAA,MAAAzC,GAAA,CAAA4W,IAAA/U,IAAA,OA+IA,CAAAA,IAAA,MAAAe,IAAA,GAGA,CACAnJ,GAAA8Z,MAAA,iCACA9Z,GAAAge,QAAA,6BAAAhe,GAAAie,OAAA,yEAGA,OAAApf,GACA8J,aAAA,CACA,IAAA4V,EAAA5Z,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAA6Z,OAAAC,GAAA,CACAC,EAAA/Z,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAA6Z,OAAAC,GAAA,CACAE,EAAAha,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAA6Z,OAAAC,GAAA,CACAG,EAAAja,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAA6Z,OAAAC,GAAA,CACA,KAAAF,EAAA,CAAAA,EACA,KAAAG,EAAA,CAAAA,EACA,KAAAC,EAAA,CAAAA,EACA,KAAAC,EAAA,CAAAA,EACA,KAAAC,QAAA,CAAAN,EAAAG,GACA,KAAAG,QAAA,CAAAF,EAAAC,EAAA,CAGA,IAAA5R,GAAA,CACA,YAAAuR,EAAA,CAGA,IAAAtR,GAAA,CACA,YAAAyR,EAAA,CAGA,IAAAvZ,OAAA,CACA,YAAAwZ,EAAA,MAAAJ,EAAA,CAGA,IAAAnZ,QAAA,CACA,YAAAwZ,EAAA,MAAAF,EAAA,CAGAG,SAAA7R,CAAA,CAAAC,CAAA,EACA,SAAAD,IACAmJ,CAAAA,MAAA,KAAAoI,EAAA,GAAApI,MAAA,KAAAwI,EAAA,KACA,KAAAJ,EAAA,CAAAvR,EACA,KAAA2R,EAAA,CAAA3R,GAGAA,EAAA,KAAAuR,EAAA,EACA,MAAAA,EAAA,CAAAvR,CAAAA,EAGAA,EAAA,KAAA2R,EAAA,EACA,MAAAA,EAAA,CAAA3R,CAAAA,GAIA,SAAAC,IACAkJ,CAAAA,MAAA,KAAAuI,EAAA,GAAAvI,MAAA,KAAAyI,EAAA,KACA,KAAAF,EAAA,CAAAzR,EACA,KAAA2R,EAAA,CAAA3R,GAGAA,EAAA,KAAAyR,EAAA,EACA,MAAAA,EAAA,CAAAzR,CAAAA,EAGAA,EAAA,KAAA2R,EAAA,EACA,MAAAA,EAAA,CAAA3R,CAAAA,EAEA,CAGA6R,KAAA9R,CAAA,EACA,KAAA6R,QAAA,CAAA7R,EAAA,MAGA+R,KAAA9R,CAAA,EACA,KAAA4R,QAAA,MAAA5R,EAAA,CAGA+R,eAAAzP,CAAA,EACA,GAAAA,GAIA,IACAgP,GAAAA,CAAA,CACAG,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACMC,GAAAA,CAAA,CACN,CAAArP,EACA,KAAAsP,QAAA,CAAAN,EAAAG,GACA,KAAAG,QAAA,CAAAF,EAAAC,GAVA,CAaAK,SAAAvW,CAAA,CAAAwW,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OAAAhY,KAAAkB,GAAA,GAAAG,EAAA,GAAAwW,EAAA,EAAA7X,KAAAkB,GAAA,GAAAG,EAAA,GAAAA,EAAAyW,EAAA,KAAAzW,CAAAA,EAAArB,KAAAkB,GAAA,CAAAG,EAAA,GAAA0W,EAAA/X,KAAAkB,GAAA,CAAAG,EAAA,GAAA2W,CAAA,CAGAC,eAAAC,CAAA,CAAAL,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAA5G,EAAA,EAAAyG,EAAA,GAAAC,EAAA,EAAAC,EACA5G,EAAA,GAAA0G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA3G,EAAA,EAAAyG,EAAA,EAAAD,EAGA,GAAA1G,IAAAA,EAAA,CACA,GAAAC,IAAAA,EACA,OAEA,IAAA/P,EAAA,CAAAgQ,EAAAD,EAGA,EAAA/P,GAAAA,EAAA,IACA6W,EACU,KAAAT,IAAA,MAAAG,QAAA,CAAAvW,EAAAwW,EAAAC,EAAAC,EAAAC,IAEV,KAAAN,IAAA,MAAAE,QAAA,CAAAvW,EAAAwW,EAAAC,EAAAC,EAAAC,KAIA,WAEAG,EAAAnY,KAAAkB,GAAA,CAAAkQ,EAAA,KAAAC,EAAAF,EAGA,IAAAgH,CAAAA,EAAA,IAGA,IAAAC,EAAA,EAAAhH,EAAApR,KAAAiB,IAAA,CAAAkX,EAAA,KAAAhH,CAAAA,EAGA,EAAAiH,GAAAA,EAAA,IACAF,EACQ,KAAAT,IAAA,MAAAG,QAAA,CAAAQ,EAAAP,EAAAC,EAAAC,EAAAC,IAER,KAAAN,IAAA,MAAAE,QAAA,CAAAQ,EAAAP,EAAAC,EAAAC,EAAAC,KAGA,IAAAK,EAAA,EAAAjH,EAAApR,KAAAiB,IAAA,CAAAkX,EAAA,KAAAhH,CAAAA,EAGA,EAAAkH,GAAAA,EAAA,IACAH,EACQ,KAAAT,IAAA,MAAAG,QAAA,CAAAS,EAAAR,EAAAC,EAAAC,EAAAC,IAER,KAAAN,IAAA,MAAAE,QAAA,CAAAS,EAAAR,EAAAC,EAAAC,EAAAC,KAnBA,CAyBAM,eAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,KAAAtB,QAAA,CAAAe,EAAAC,GACA,KAAAhB,QAAA,CAAAqB,EAAAC,GACA,KAAAb,cAAA,IAAAM,EAAAE,EAAAE,EAAAE,GACA,KAAAZ,cAAA,IAAAO,EAAAE,EAAAE,EAAAE,EAAA,CAGAC,kBAAAR,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAA0C,CAAAC,CAAA,MAAAI,EAAAT,EAAA,IAAAE,CAAAA,EAAAF,CAAA,EAEAU,EAAAT,EAAA,IAAAE,CAAAA,EAAAF,CAAA,EAO1C,KAAAF,cAAA,CAAAC,EAAAC,EAAAQ,EAL2CA,EAAA,IAAAL,CAAAA,EAAAJ,CAAA,EAK3CU,EAH2CA,EAAA,IAAAL,CAAAA,EAAAJ,CAAA,EAG3CG,EAAAC,EAAA,CAGAxQ,aAAAzC,CAAA,CAAAC,CAAA,EACA,IACAsR,GAAAA,CAAA,CACAG,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACMC,GAAAA,CAAA,CACN,MACA,OAAAL,GAAAvR,GAAAA,GAAA2R,GAAAD,GAAAzR,GAAAA,GAAA2R,CAAA,CAEA,CAGA,MAAA3d,WAAAiD,EAAAqc,EAAA,CACA5X,YAAA6E,CAAA,EACA,MAAAA,EACApH,OAAA,uBACAA,OAAA,4CACA,KAAAoa,OAAA,MACA,KAAAhS,KAAA,MACA,KAAAiS,OAAA,MACA,KAAAC,OAAA,MACA,KAAAC,QAAA,MAAAA,QAAA,CACA,KAAArU,CAAA,IACA,KAAAsU,eAAA,MACA,KAAAnT,MAAA,IACA,KAAAoT,MAAA,IAGAC,OAAA,CACA,KAAAxU,CAAA,IACA,KAAAoU,OAAA,MACA,KAAAE,eAAA,MACA,KAAApS,KAAA,KAAArN,EAAA,KACA,KAAAqf,OAAA,KAAArf,EAAA,KACA,KAAAsf,OAAA,KAAAtf,EAAA,KACA,KAAAsM,MAAA,IACA,KAAAoT,MAAA,IAGAE,OAAA,CACA,IACAzU,EAAAA,CAAA,CACMqU,SAAAA,CAAA,CACN,MACA,OAAArU,GAAAqU,EAAA/b,MAAA,GAGAoc,MAAA,CACA,IAAAN,EAAA,KAAAC,QAAA,QAAArU,CAAA,EAGA,OAFA,KAAAsU,eAAA,MAAAF,OAAA,CACA,KAAAA,OAAA,CAAAA,EACAA,CAAA,CAGAO,UAAA,CACA,IAAAC,EAAAvc,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,QACAwc,EAAAxc,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,QACAwI,EAAA,IAAAhM,EAAA,KAAAuf,OAAA,CAAAQ,EAAA,MAAAR,OAAA,CAAAS,EAAA,EACA,YAAAC,YAAA,CAAAjU,EAAA,CAGAkU,kBAAAH,CAAA,CAAAC,CAAA,EACA,IAAAhU,EAAA,KAAA8T,QAAA,CAAAC,EAAAC,GAEA,OADA,KAAAX,OAAA,CAAArT,EACAA,CAAA,CAGAmU,kBAAAJ,CAAA,CAAAC,CAAA,EACA,IAAAhU,EAAA,KAAA8T,QAAA,CAAAC,EAAAC,GAEA,OADA,KAAAV,OAAA,CAAAtT,EACAA,CAAA,CAGAoU,0BAAA,KAAAX,EAAA,KAAAA,eAAA,CAAAzQ,IAAA,CAGA,GAAAyQ,IAAA1c,EAAAqc,EAAA,CAAAiB,QAAA,EAAAZ,IAAA1c,EAAAqc,EAAA,CAAAkB,eAAA,EAAAb,IAAA1c,EAAAqc,EAAA,CAAAmB,OAAA,EAAAd,IAAA1c,EAAAqc,EAAA,CAAAoB,cAAA,CACM,YAAAlB,OAAA,CAIN,IACAA,QAAA,CACAzT,EAAA8K,CAAA,CACO7K,EAAA8K,CAAA,CACP,CACAyI,QAAA,CACAxT,EAAA4U,CAAA,CACA3U,EAAA4U,CAAA,CACM,CACN,MAEA,OADA,IAAA1gB,EAAA,EAAA2W,EAAA8J,EAAA,EAAA7J,EAAA8J,EACA,CAGAT,aAAAjU,CAAA,EACA,QAAAuT,OAAA,CAAAoB,QAAA,EACA,IACA9U,EAAAA,CAAA,CACQC,EAAAA,CAAA,CACR,MAAAwT,OAAA,CACAtT,EAAAH,CAAA,EAAAA,EACAG,EAAAF,CAAA,EAAAA,CAAA,QAGAE,CAAA,CAGA4U,UAAA5U,CAAA,CAAAkN,CAAA,CAAA2H,CAAA,EACA,IACAvU,OAAAA,CAAA,CACMoT,OAAAA,CAAA,CAAQ,MAGdmB,GAAAnB,EAAAjc,MAAA,KAAAic,CAAA,CAAAA,EAAAjc,MAAA,KACAic,CAAAA,CAAA,CAAAA,EAAAjc,MAAA,IAAA6I,CAAA,CAAAA,EAAA7I,MAAA,IAAA+I,OAAA,CAAAqU,EAAA,EAGA,KAAAC,cAAA,CAAA9U,EAAAkN,EAAAA,EAAA1M,OAAA,CAAAR,GAAA,MAGA8U,eAAA9U,CAAA,CAAAwK,CAAA,EACA,KAAAlK,MAAA,CAAAtP,IAAA,CAAAgP,GACA,KAAA0T,MAAA,CAAA1iB,IAAA,CAAAwZ,EAAA,CAGAuK,iBAAA,CACA,YAAAzU,MAAA,CAGA0U,iBAAA,CAMA,OALA,CACMtB,OAAAA,CAAA,CACN,MAAAzU,EAAAyU,EAAAjc,MAAA,CAGA0H,EAAA,EAAAA,EAAAF,EAAAE,IACA,IAAAuU,CAAA,CAAAvU,EAAA,CACA,SAAA8V,EAAA9V,EAAA,EAAA8V,EAAAhW,EAAAgW,IACA,GAAAvB,CAAA,CAAAuB,EAAA,EACAvB,CAAA,CAAAvU,EAAA,CAAAuU,CAAA,CAAAuB,EAAA,CACA,MACA,CAEA,OAGAvB,CAAA,CAEA,CAGA,MAAAjf,WAAApC,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAA0d,mBAAA,IAGAC,kBAAA,CAKA,IALuB,IAAA5W,EAAA,EAEvBD,EAAA,KAGAA,GAAA,CAAmE,IAAA8W,EAAA9W,EAAA+J,QAAA,kBAGnE+M,EAAAnZ,QAAA,MACAsC,CAAAA,GAAA6W,EAAAvY,SAAA,IAGAyB,EAAAA,EAAAyD,MAAA,CAGA,OAAAxD,CAAA,CAGAiQ,WAAA/P,CAAA,MAAA4W,EAAA7d,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IAGA,IAAA6d,EAAA,CAGA,IAAAC,EAAA,KAAAjN,QAAA,SACAkN,EAAA,KAAAlN,QAAA,iBACAmN,EAAA,KAAAnN,QAAA,WAAAoN,EAAA,KAAApN,QAAA,mBAGA,GAAAiN,EAAAhZ,eAAA,QAAAoZ,EAAAJ,EAAAjX,sBAAA,MAAAkX,GAGAG,GACAjX,CAAAA,EAAAiX,SAAA,CAAAA,CAAA,CAEA,SAAAJ,EAAArZ,QAAA,IACA,iBAAAqZ,EAAAvZ,SAAA,IACAuZ,EAAA5Y,QAAA,MAAA2L,QAAA,UAAAtL,QAAA,IAEA,IAAA4Y,EAAAL,EAAAvY,QAAA,GAGA,YAAA4Y,GACAlX,CAAAA,EAAAiX,SAAA,CAAAC,SAAAA,EAAA,gBAAAA,CAAA,CACA,IAGAJ,EAAAtZ,QAAA,QAAA2Z,EAAA,IAAAzhB,EAAA,KAAAsH,QAAA,QAAAgD,EAAAiX,SAAA,EAAA1W,UAAA,CAAAuW,GAAAxY,QAAA,EAGQ0B,CAAAA,EAAAiX,SAAA,CAAAE,CAAA,IAIRJ,EAAAlZ,eAAA,QAAAoI,EAAA8Q,EAAAnX,sBAAA,MAAAoX,GAGA/Q,GACAjG,CAAAA,EAAAiG,WAAA,CAAAA,CAAA,CAEA,SAAA8Q,EAAAvZ,QAAA,IACA,iBAAAuZ,EAAAzZ,SAAA,IACAyZ,EAAA9Y,QAAA,MAAA2L,QAAA,UAAAtL,QAAA,IAEA,IAAA8Y,EAAAL,EAAAzZ,SAAA,GAGA,YAAA8Z,GACApX,CAAAA,EAAAiG,WAAA,CAAAmR,SAAAA,EAAA,gBAAAA,CAAA,CACA,IAGAJ,EAAAxZ,QAAA,QAAA6Z,EAAA,IAAA3hB,EAAA,KAAAsH,QAAA,UAAAgD,EAAAiG,WAAA,EAAA1F,UAAA,CAAAyW,GAAA1Z,SAAA,EAGA0C,CAAAA,EAAAiG,WAAA,CAAAoR,CAAA,KAEAC,EAAA,KAAA1N,QAAA,iBAGA,GAAA0N,EAAA9Z,QAAA,IACA,IAAA+Z,EAAAD,EAAAzY,SAAA,EACAmB,CAAAA,EAAAwX,SAAA,IAAAtiB,CACA,KAGAuiB,EAAA,KAAA7N,QAAA,mBACA8N,EAAA,KAAA9N,QAAA,oBACA+N,EAAA,KAAA/N,QAAA,sBAGAgO,EAAA,KAAAhO,QAAA,qBAAAiO,EAAA,KAAAjO,QAAA,sBAoBA,GAjBA6N,EAAAja,QAAA,IACAwC,CAAAA,EAAAkG,OAAA,CAAAuR,EAAAna,SAAA,IAGAoa,EAAAla,QAAA,IACAwC,CAAAA,EAAAmG,QAAA,CAAAuR,EAAApa,SAAA,IAGAqa,EAAAna,QAAA,IACQwC,CAAAA,EAAAoG,UAAA,CAAAuR,EAAAvZ,SAAA,IAQRwZ,EAAApa,QAAA,IAAAoa,SAAAA,EAAAta,SAAA,QAAAwa,EAAAlgB,EAAAggB,EAAAta,SAAA,GAGA,UAAA0C,EAAA+X,WAAA,CACU/X,EAAA+X,WAAA,CAAAD,GAEV,SAAA9X,EAAAgY,cAAA,CAEYhY,EAAAgY,cAAA,CAAAF,EAEZ,SAAA9X,EAAAiY,OAAA,EAAAH,IAAAA,EAAA9e,MAAA,EAAA8e,IAAAA,CAAA,KAEA9X,CAAAA,EAAAiY,OAAA,CAAAH,CAAA,EAEA,IAAAI,EAAAL,EAAAhZ,SAAA,EAGA,UAAAmB,EAAAmY,cAAA,CACUnY,EAAAmY,cAAA,CAAAD,EAEV,SAAAlY,EAAAoY,oBAAA,CAEYpY,EAAAoY,oBAAA,CAAAF,EAEZ,SAAAlY,EAAAqY,aAAA,EAEArY,CAAAA,EAAAqY,aAAA,CAAAH,CAAA,CAEM,KAGN,KAAAzB,mBAAA,IAGA,SAAAzW,EAAAgS,IAAA,EACA,IAAAsG,EAAA,KAAA1O,QAAA,SACA2O,EAAA,KAAA3O,QAAA,eACA4O,EAAA,KAAA5O,QAAA,iBACA6O,EAAA,KAAA7O,QAAA,gBACA8O,EAAA,KAAA9O,QAAA,cACA+O,EAAA,KAAA/O,QAAA,gBACAoI,EAAA,IAAA5d,GAAAmkB,EAAAjb,SAAA,GAAAkb,EAAAlb,SAAA,GAAAmb,EAAAnb,SAAA,GAAAob,EAAAlb,QAAA,MAAAsM,MAAA,CAAA4O,EAAA7Z,SAAA,cAAA8Z,EAAArb,SAAA,GAAAlJ,GAAAkN,KAAA,CAAAgX,EAAAhb,SAAA,GAAA0C,EAAAgS,IAAA,GACAuG,EAAAta,QAAA,CAAA+T,EAAAN,SAAA,EACA8G,EAAAva,QAAA,CAAA+T,EAAAL,WAAA,EACA8G,EAAAxa,QAAA,CAAA+T,EAAAJ,UAAA,EACA8G,EAAAza,QAAA,CAAA+T,EAAAH,QAAA,EACA8G,EAAA1a,QAAA,CAAA+T,EAAAR,UAAA,EAAAxR,EAAAgS,IAAA,CAAAA,EAAAM,QAAA,GAGAoG,EAAA5a,QAAA,KACA,KAAAd,QAAA,CAAA2B,MAAA,CAAA+Z,EAAA7Z,SAAA,GACA,KAAA4X,mBAAA,IACA,KAI8B,KAAA5G,YAAA,CAAA7P,GAG9BA,EAAA4Y,WAAA,MAAAlC,gBAAA,GACA,CAGAzG,aAAAjQ,CAAA,QAAAiQ,YAAA,CAAAjQ,GAGA,KAAAyW,mBAAA,EACA,KAAAzZ,QAAA,CAAA6b,SAAA,EACA,CAEA,CAGA,MAAAzjB,WAAAY,GACA+G,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,QACA,KAAAuU,UAAA,MACA,KAAAA,UAAA,KAAAzjB,GAAA,KAAA+K,YAAA,MAAA9C,SAAA,IAGAsE,KAAA5B,CAAA,EACA,IACM8Y,WAAAA,CAAA,CACN,MACAnV,EAAA,IAAA1Q,GAOA,IAPA6lB,EAAA5D,KAAA,GAGAlV,GACAA,EAAAiI,SAAA,GAGA,CAAA6Q,EAAA3D,KAAA,IACA,OAAA2D,EAAA1D,IAAA,GAAA7Q,IAAA,EACA,KAAAlP,GAAA0jB,OAAA,CACA,KAAAC,KAAA,CAAAhZ,EAAA2D,GAAA,WAGAtO,GAAA4jB,OAAA,CACA,KAAAC,KAAA,CAAAlZ,EAAA2D,GAAA,WAGAtO,GAAA8jB,aAAA,CACA,KAAAC,KAAA,CAAApZ,EAAA2D,GAAA,WAGAtO,GAAAgkB,YAAA,CACA,KAAAC,KAAA,CAAAtZ,EAAA2D,GAAA,WAGAtO,GAAAugB,QAAA,CACA,KAAA2D,KAAA,CAAAvZ,EAAA2D,GAAA,WAGAtO,GAAAwgB,eAAA,CACA,KAAA2D,KAAA,CAAAxZ,EAAA2D,GAAA,WAGAtO,GAAAygB,OAAA,CACA,KAAA2D,KAAA,CAAAzZ,EAAA2D,GAAA,WAGAtO,GAAA0gB,cAAA,CACA,KAAA2D,KAAA,CAAA1Z,EAAA2D,GAAA,WAGAtO,GAAAskB,GAAA,CACA,KAAAC,KAAA,CAAA5Z,EAAA2D,GAAA,WAGAtO,GAAAwkB,UAAA,CACA,KAAAC,KAAA,CAAA9Z,EAAA2D,EAEA,CAGA,OAAAA,CAAA,CAGAoW,eAAAjU,CAAA,EACA,YAAAlE,IAAA,GAGAoY,YAAA,CACA,IACMlB,WAAAA,CAAA,CACN,MACAjX,EAAAiX,EAAAxC,eAAA,GACArB,EAAA6D,EAAAvC,eAAA,GAEA,OADA1U,EAAAlH,GAAA,EAAA4G,EAAAb,IAAA,CAAAa,EAAA0T,CAAA,CAAAvU,EAAA,EACA,CAGAsP,eAAAhQ,CAAA,EACA,KAAA4B,IAAA,CAAA5B,GACA,KAAAhD,QAAA,CAAAmC,MAAA,CAAA4F,KAAA,CAAAxB,SAAA,MAAAvD,GAAA,IAAAia,EAAA,KAAArQ,QAAA,cAGA,KAAA5J,EAAAiX,SAAA,GACAgD,YAAAA,EAAA3c,SAAA,YACQ0C,EAAAka,IAAA,CAAAD,EAAA3c,SAAA,IAER0C,EAAAka,IAAA,IAIA,KAAAla,EAAAiG,WAAA,GACA,4BAAA7F,YAAA,kBAAA9C,SAAA,IACA0C,EAAA2P,IAAA,GACA3P,EAAAma,YAAA,cACAna,EAAAoa,MAAA,GACQpa,EAAAkQ,OAAA,IAERlQ,EAAAoa,MAAA,IAGA,IAAAC,EAAA,KAAAL,UAAA,GAGA,GAAAK,EAAA,CACA,IAAAC,EAAAD,EAAArhB,MAAA,GACAuhB,EAAA,KAAA3Q,QAAA,iBACA4Q,EAAA,KAAA5Q,QAAA,eAAA6Q,EAAA,KAAA7Q,QAAA,eAGA,GAAA2Q,EAAA1c,eAAA,IACA,IAAA6c,EAAAH,EAAA7a,aAAA,GACA,CAAA6B,EAAAwK,EAAA,CAAAsO,CAAA,IACAK,EAAAzR,MAAA,CAAAjJ,EAAAuB,EAAAwK,EAAA,IAGAyO,EAAA3c,eAAA,GAGA,QAHA8c,EAAAH,EAAA9a,aAAA,GAGAgB,EAAA,EAAAA,EAAA4Z,EAAA5Z,IAAA,KAAAka,EAAAC,EAAA,CAAAR,CAAA,CAAA3Z,EAAA,CAGAia,EAAA1R,MAAA,CAAAjJ,EAAA4a,EAAAC,EACA,IAGAJ,EAAA5c,eAAA,QAAAid,EAAAL,EAAA/a,aAAA,GAEA,CAAAqb,EAAAC,EAAA,CAAAX,CAAA,CAAAC,EAAA,CAGAQ,EAAA7R,MAAA,CAAAjJ,EAAA+a,EAAAC,EACA,EACA,CAGA,OAAAhC,MAAAF,CAAA,EACA,IAAAvX,EAAAuX,EAAApD,iBAAA,GAEA,OADAoD,EAAAlW,KAAA,CAAAkW,EAAAjE,OAAA,CACA,CACAtT,MAAAA,CACA,EAGAyX,MAAAhZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACMvX,MAAAA,CAAA,CACN,CAAAnM,GAAA4jB,KAAA,CAAAF,GACA,CACA1X,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAE,EACAuX,EAAA3C,SAAA,CAAA5U,GAAAoC,EAAAsP,QAAA,CAAA7R,EAAAC,GAGArB,GACAA,EAAAkI,MAAA,CAAA9G,EAAAC,EACA,CAGA,OAAA6X,MAAAJ,CAAA,EACA,IACMjE,QAAAA,CAAA,CACN,CAAAiE,EACAvX,EAAAuX,EAAApD,iBAAA,GACA,OACAb,QAAAA,EACAtT,MAAAA,CACA,EAGA2X,MAAAlZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACMtT,MAAAA,CAAA,CACN,CAAAnM,GAAA8jB,KAAA,CAAAJ,GACA,CACA1X,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAE,EACAuX,EAAA3C,SAAA,CAAA5U,EAAAsT,GAAAlR,EAAAsP,QAAA,CAAA7R,EAAAC,GAGArB,GACAA,EAAAmI,MAAA,CAAA/G,EAAAC,EACA,CAGA,OAAA+X,MAAAN,CAAA,EACA,IACAjE,QAAAA,CAAA,CACMC,QAAAA,CAAA,CACN,CAAAgE,EACAvX,EAAA,IAAAhM,EAAA,CAAAuf,EAAAoB,QAAA,CAAArB,EAAAzT,CAAA,IAAA0T,EAAA1T,CAAA,CAAAyT,EAAAxT,CAAA,EAEA,OADAyX,EAAAjE,OAAA,CAAAtT,EACA,CACAsT,QAAAA,EACAtT,MAAAA,CACA,EAGA6X,MAAApZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACMtT,MAAAA,CAAA,CACN,CAAAnM,GAAAgkB,KAAA,CAAAN,GACA,CACA1X,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAE,EACAuX,EAAA3C,SAAA,CAAA5U,EAAAsT,GAAAlR,EAAAsP,QAAA,CAAA7R,EAAAC,GAGArB,GACAA,EAAAmI,MAAA,CAAA/G,EAAAC,EACA,CAGA,OAAAiY,MAAAR,CAAA,EACA,IACAjE,QAAAA,CAAA,CACMC,QAAAA,CAAA,CACN,CAAAgE,EACAvX,EAAA,IAAAhM,EAAAsf,EAAAzT,CAAA,EAAA0T,EAAAoB,QAAA,CAAArB,EAAAxT,CAAA,IAAAyT,EAAAzT,CAAA,EAEA,OADAyX,EAAAjE,OAAA,CAAAtT,EACA,CACAsT,QAAAA,EACAtT,MAAAA,CACA,EAGA+X,MAAAtZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACMtT,MAAAA,CAAA,CACN,CAAAnM,GAAAkkB,KAAA,CAAAR,GACA,CACA1X,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAE,EACAuX,EAAA3C,SAAA,CAAA5U,EAAAsT,GAAAlR,EAAAsP,QAAA,CAAA7R,EAAAC,GAGArB,GACAA,EAAAmI,MAAA,CAAA/G,EAAAC,EACA,CAGA,OAAAkY,MAAAT,CAAA,EACA,IACMjE,QAAAA,CAAA,CACN,CAAAiE,EACAvX,EAAAuX,EAAAzD,QAAA,YACA4F,EAAAnC,EAAArD,iBAAA,YACAyF,EAAApC,EAAApD,iBAAA,GACA,OACAb,QAAAA,EACAtT,MAAAA,EACA0Z,aAAAA,EACAC,aAAAA,CACA,EAGA3B,MAAAvZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACAtT,MAAAA,CAAA,CACA0Z,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAmkB,KAAA,CAAAT,GACAA,EAAA3C,SAAA,CAAA+E,EAAAD,EAAA1Z,GAAAoC,EAAAoQ,cAAA,CAAAc,EAAAzT,CAAA,CAAAyT,EAAAxT,CAAA,CAAAE,EAAAH,CAAA,CAAAG,EAAAF,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAGArB,GACAA,EAAAmb,aAAA,CAAA5Z,EAAAH,CAAA,CAAAG,EAAAF,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,CACA,CAGA,OAAAmY,MAAAV,CAAA,EACA,IACMjE,QAAAA,CAAA,CACN,CAAAiE,EACAvX,EAAAuX,EAAAnD,wBAAA,GACAsF,EAAAnC,EAAArD,iBAAA,YACAyF,EAAApC,EAAApD,iBAAA,GACA,OACAb,QAAAA,EACAtT,MAAAA,EACA0Z,aAAAA,EACAC,aAAAA,CACA,EAGA1B,MAAAxZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACAtT,MAAAA,CAAA,CACA0Z,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAokB,KAAA,CAAAV,GACAA,EAAA3C,SAAA,CAAA+E,EAAAD,EAAA1Z,GAAAoC,EAAAoQ,cAAA,CAAAc,EAAAzT,CAAA,CAAAyT,EAAAxT,CAAA,CAAAE,EAAAH,CAAA,CAAAG,EAAAF,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAGArB,GACAA,EAAAmb,aAAA,CAAA5Z,EAAAH,CAAA,CAAAG,EAAAF,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,CACA,CAGA,OAAAoY,MAAAX,CAAA,EACA,IACMjE,QAAAA,CAAA,CACN,CAAAiE,EACAmC,EAAAnC,EAAArD,iBAAA,YACAyF,EAAApC,EAAApD,iBAAA,GACA,OACAb,QAAAA,EACAoG,aAAAA,EACAC,aAAAA,CACA,EAGAzB,MAAAzZ,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACAoG,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAqkB,KAAA,CAAAX,GACAA,EAAA3C,SAAA,CAAA+E,EAAAD,EAAAA,GAAAtX,EAAA6Q,iBAAA,CAAAK,EAAAzT,CAAA,CAAAyT,EAAAxT,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAGArB,GACAA,EAAAob,gBAAA,CAAAH,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,CACA,CAGA,OAAAqY,MAAAZ,CAAA,EACA,IACMjE,QAAAA,CAAA,CACN,CAAAiE,EACAmC,EAAAnC,EAAAnD,wBAAA,EACAmD,CAAAA,EAAAlE,OAAA,CAAAqG,EACA,IAAAC,EAAApC,EAAApD,iBAAA,GACA,OACAb,QAAAA,EACAoG,aAAAA,EACAC,aAAAA,CACA,EAGAxB,MAAA1Z,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAjE,QAAAA,CAAA,CACAoG,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAskB,KAAA,CAAAZ,GACAA,EAAA3C,SAAA,CAAA+E,EAAAD,EAAAA,GAAAtX,EAAA6Q,iBAAA,CAAAK,EAAAzT,CAAA,CAAAyT,EAAAxT,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAGArB,GACAA,EAAAob,gBAAA,CAAAH,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,CACA,CAGA,OAAAuY,MAAAd,CAAA,EACA,IACAjE,QAAAA,CAAA,CACMC,QAAAA,CAAA,CACN,CAAAgE,EACA,CACAuC,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACAC,KAAAA,CAAA,CACAC,SAAAA,CAAA,CACMC,UAAAA,CAAA,CACN,CAAA3G,EACA4G,EAAAH,EAAA9f,CAAAA,KAAAgE,EAAA,MACAyb,EAAApC,EAAApD,iBAAA,GAGsRiG,EAAA,IAAApmB,EAAAkG,KAAA+Q,GAAA,CAAAkP,GAAA7G,CAAAA,EAAAzT,CAAA,CAAA8Z,EAAA9Z,CAAA,IAAA3F,KAAAgR,GAAA,CAAAiP,GAAA7G,CAAAA,EAAAxT,CAAA,CAAA6Z,EAAA7Z,CAAA,KAAA5F,KAAAgR,GAAA,CAAAiP,GAAA7G,CAAAA,EAAAzT,CAAA,CAAA8Z,EAAA9Z,CAAA,IAAA3F,KAAA+Q,GAAA,CAAAkP,GAAA7G,CAAAA,EAAAxT,CAAA,CAAA6Z,EAAA7Z,CAAA,KAEtRua,EAAAngB,KAAAkB,GAAA,CAAAgf,EAAAva,CAAA,IAAA3F,KAAAkB,GAAA,CAAA0e,EAAA,GAAA5f,KAAAkB,GAAA,CAAAgf,EAAAta,CAAA,IAAA5F,KAAAkB,GAAA,CAAA2e,EAAA,GAGAM,EAAA,IACAP,GAAA5f,KAAAiB,IAAA,CAAAkf,GACMN,GAAA7f,KAAAiB,IAAA,CAAAkf,IAGN,IAAAC,EAAA,CAAAL,IAAAC,EAAA,MAAAhgB,KAAAiB,IAAA,EAAAjB,KAAAkB,GAAA,CAAA0e,EAAA,GAAA5f,KAAAkB,GAAA,CAAA2e,EAAA,GAAA7f,KAAAkB,GAAA,CAAA0e,EAAA,GAAA5f,KAAAkB,GAAA,CAAAgf,EAAAta,CAAA,IAAA5F,KAAAkB,GAAA,CAAA2e,EAAA,GAAA7f,KAAAkB,GAAA,CAAAgf,EAAAva,CAAA,KAAA3F,CAAAA,KAAAkB,GAAA,CAAA0e,EAAA,GAAA5f,KAAAkB,GAAA,CAAAgf,EAAAta,CAAA,IAAA5F,KAAAkB,GAAA,CAAA2e,EAAA,GAAA7f,KAAAkB,GAAA,CAAAgf,EAAAva,CAAA,MAGAmJ,MAAAsR,IACAA,CAAAA,EAAA,GAEwE,IAAAC,EAAA,IAAAvmB,EAAAsmB,EAAAR,EAAAM,EAAAta,CAAA,CAAAia,EAAAO,CAAAA,CAAAA,EAAAP,CAAA,EAAAK,EAAAva,CAAA,CAAAia,GAEmKU,EAAA,IAAAxmB,EAAA,CAAAsf,EAAAzT,CAAA,CAAA8Z,EAAA9Z,CAAA,IAAA3F,KAAA+Q,GAAA,CAAAkP,GAAAI,EAAA1a,CAAA,CAAA3F,KAAAgR,GAAA,CAAAiP,GAAAI,EAAAza,CAAA,EAAAwT,EAAAxT,CAAA,CAAA6Z,EAAA7Z,CAAA,IAAA5F,KAAAgR,GAAA,CAAAiP,GAAAI,EAAA1a,CAAA,CAAA3F,KAAA+Q,GAAA,CAAAkP,GAAAI,EAAAza,CAAA,EAG3O2a,EAAAhkB,EAAA,QAAA2jB,EAAAva,CAAA,CAAA0a,EAAA1a,CAAA,EAAAia,EAAA,CAAAM,EAAAta,CAAA,CAAAya,EAAAza,CAAA,EAAAia,EAAA,EAGA1e,EAAA,EAAA+e,EAAAva,CAAA,CAAA0a,EAAA1a,CAAA,EAAAia,EAAA,CAAAM,EAAAta,CAAA,CAAAya,EAAAza,CAAA,EAAAia,EAAA,CACA7e,EAAA,GAAAkf,EAAAva,CAAA,CAAA0a,EAAA1a,CAAA,EAAiCia,EAAA,EAAAM,EAAAta,CAAA,CAAAya,EAAAza,CAAA,EAAAia,EAAA,CAAAW,EAAAjkB,EAAA4E,EAAAH,GAWjC,OARA,IAAAxE,EAAA2E,EAAAH,IACAwf,CAAAA,EAAAxgB,KAAAgE,EAAA,EAGAxH,EAAA2E,EAAAH,IAAA,GACAwf,CAAAA,EAAA,GAGA,CACAf,aAAAA,EACAG,GAAAA,EACAC,GAAAA,EACAG,UAAAA,EACAC,cAAAA,EACAK,MAAAA,EACAC,GAAAA,EACAC,GAAAA,CACA,EAGArC,MAAA5Z,CAAA,CAAA2D,CAAA,EACA,IACMmV,WAAAA,CAAA,CACN,MACA,CACAoC,aAAAA,CAAA,CACAG,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACAG,UAAAA,CAAA,CACAC,cAAAA,CAAA,CACAK,MAAAA,CAAA,CACAC,GAAAA,CAAA,CACMC,GAAAA,CAAA,CAAiC,CAAA7mB,GAAAwkB,KAAA,CAAAd,GAGvCoD,EAAA,EAAAT,EAAA,KACAU,EAAAH,EAAAE,EAAAD,CAAAA,EAAA,GACAG,EAAA,IAAA7mB,EAAAwmB,EAAA3a,CAAA,CAAAia,EAAA5f,KAAA+Q,GAAA,CAAA2P,GAAAJ,EAAA1a,CAAA,CAAAia,EAAA7f,KAAAgR,GAAA,CAAA0P,IAKA,GAJArD,EAAAzC,cAAA,CAAA+F,EAAAD,EAAAD,EAAAzgB,KAAAgE,EAAA,IACAqZ,EAAAzC,cAAA,CAAA6E,EAAAiB,EAAAD,EAAAzgB,KAA0DgE,EAAA,EAAAkE,EAAAsP,QAAA,CAAAiI,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAG1DrB,GAAA,CAAAuK,MAAAyR,IAAA,CAAAzR,MAAA0R,GAAA,CAEA,IAAAI,EAAAhB,EAAAC,EAAA,EAAAD,EAAAC,CAAA,CACAgB,EAAAjB,EAAAC,EAAAA,EAAAD,EAAA,EACArb,EAAA8H,SAAA,CAAAiU,EAAA3a,CAAA,CAAA2a,EAAA1a,CAAA,EACArB,EAAA6L,MAAA,CAAA6P,GACA1b,EAAA0B,KAAA,CAAA2a,EAAAC,GACAtc,EAAAuc,GAAA,KANAlB,EAAAC,EAAAD,EAAAC,CAAA,CAMAU,EAAAA,EAAAC,EAAAO,QAAA,EAAAf,IACAzb,EAAA0B,KAAA,GAAA2a,EAAA,EAAAC,GACAtc,EAAA6L,MAAA,EAAA6P,GACA1b,EAAA8H,SAAA,EAAAiU,EAAA3a,CAAA,EAAA2a,EAAA1a,CAAA,CACA,EAGA,OAAAyY,MAAAhB,CAAA,EACAA,EAAAjE,OAAA,CAAAiE,EAAAlW,KAAA,CAGAkX,MAAA9Z,CAAA,CAAA2D,CAAA,EAAAvO,GAAA0kB,KAAA,MAAAhB,UAAA,EAGA9Y,GAEA2D,EAAAgP,EAAA,GAAAhP,EAAAoP,EAAA,EAAApP,EAAAmP,EAAA,GAAAnP,EAAAqP,EAAA,EACAhT,EAAAoI,SAAA,EAEA,CAEA,CAGA,MAAA5T,WAAAY,GACA2H,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,SACA,KAAAkY,SAAA,MAAArc,YAAA,gBAAAhC,SAAA,GACA,KAAAse,OAAA,MAAAtc,YAAA,YAAA9C,SAAA,GACA,KAAAqf,UAAA,MAAAvc,YAAA,gBAAA9C,SAAA,GAEA,CAGA,MAAAxG,WAAAd,GACA+G,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA,aAAArD,IAAAkX,GACA,KAAAzJ,IAAA,QACA,KAAAnD,CAAA,GACA,KAAAC,CAAA,GACA,KAAAub,YAAA,IAGA7M,WAAA/P,CAAA,EACA,IAAA4W,EAAA7d,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IACA,MAAAgX,UAAA,CAAA/P,EAAA4W,GAAA,IAAAiG,EAAA,KAAAjT,QAAA,sBAAAvJ,eAAA,SAAAuJ,QAAA,uBAAAvJ,eAAA,GAGAwc,GACA7c,CAAAA,EAAA6c,YAAA,CAAAA,CAAA,CACA,CAGAC,uBAAA,CACA,KAAA1b,CAAA,GACA,KAAAC,CAAA,GACA,KAAA0b,SAAA,IACA,KAAAC,cAAA,GACA,KAAAvW,IAAA,CAAAmM,OAAAqK,iBAAA,CACA,KAAAC,IAAA,CAAAtK,OAAAuK,iBAAA,CAGApD,eAAA/Z,CAAA,EACA,iBAAAuE,IAAA,CACM,YAAA6Y,sBAAA,CAAApd,EAAA,CAIN,KAAA8c,qBAAA,GACA,KAAAO,+BAA4B,CAAArd,GAAA,IAAA2D,EAAA,KAY5B,OATA,KAAA2K,QAAA,CAAAlL,OAAA,EAAA0C,EAAApF,IAAA,KAAA4c,EAAA,KAAAC,mBAAA,CAAAvd,EAAA,UAAAU,GAGAiD,EAGAA,EAAAyP,cAAA,CAAAkK,GAFQ3Z,EAAA2Z,CAIR,GACA3Z,CAAA,CAGA6Z,aAAA,CACA,IACAxgB,SAAAA,CAAA,CACMsG,OAAAA,CAAA,CACN,MACAma,EAAArpB,GAAAkN,KAAA,CAAAtE,EAAAgD,GAAA,CAAAgS,IAAA,EAAAH,QAAA,CAEA,OADAvO,EAAAsG,QAAA,cAAAxL,SAAA,CAAAqf,EACA,CAGAL,uBAAApd,CAAA,EACA,IAAA6R,EAAA,KAAA2L,WAAA,GACA,WAAAvqB,GAAA,KAAAmO,CAAA,MAAAC,CAAA,CAAAwQ,EAAA,KAAAzQ,CAAA,MAAAsc,WAAA,CAAA1d,GAAA,KAAAqB,CAAA,EAGAsc,SAAA3L,CAAA,CAAAvG,CAAA,CAAA/K,CAAA,EACA,IAAAkd,EAAAnS,CAAA,CAAA/K,EAAA,CAAAmd,EAAA,KAGA,GAAA7L,EAAA8L,QAAA,EACA,IAAAtd,EAAAiL,EAAAzS,MAAA,CACA+kB,EAAAtS,CAAA,CAAA/K,EAAA,GACAsd,EAAAvS,CAAA,CAAA/K,EAAA,GAAAic,EAAA,WAeA,GAZAjc,CAAAA,IAAAA,GAAAqd,MAAAA,CAAA,GAAArd,EAAAF,EAAA,GAAAwd,MAAAA,GACArB,CAAAA,EAAA,YAGAjc,EAAA,GAAAqd,MAAAA,GAAArd,EAAAF,EAAA,GAAAwd,MAAAA,GACArB,CAAAA,EAAA,UAGAjc,EAAA,GAAAqd,MAAAA,GAAArd,CAAAA,IAAAF,EAAA,GAAAwd,MAAAA,CAAA,GACArB,CAAAA,EAAA,WAGA,SAAA3K,EAAAiM,MAAA,CAAAL,EAAA,EAEA,IAAAM,EAAAlM,EAAAiM,MAAA,CAAAL,EAAA,CACAC,EAAAK,aAAA1pB,GAAA0pB,EAAAA,CAAA,CAAAvB,EAAA,CACM,MAENkB,EAAA7L,EAAAiM,MAAA,CAAAL,EAAA,CAOA,OAJAC,GACAA,CAAAA,EAAA7L,EAAAmM,YAAA,EAGAN,CAAA,CAGA1O,SAAA,CACA,SAGAiP,gBAAAjkB,CAAA,EACA,IAAA8U,EAAA9U,GAAA,KAAAA,IAAA,CACA2U,EAAAN,MAAAC,IAAA,CAAAQ,EAAAoP,UAAA,CAAAvP,UAAA,EACAnX,EAAAmX,EAAAwC,OAAA,CAAArC,GACAqP,EAAAxP,EAAA9V,MAAA,GACAyS,EAAAnU,EACA2X,EAAA1D,WAAA,MAWA,OARA,IAAA5T,GACA8T,CAAAA,EAAA5T,EAAA4T,EAAA,EAGA9T,IAAA2mB,GACA7S,CAAAA,EAAA3T,EAAA2T,EAAA,EAGAA,CAAA,CAGAuE,eAAAhQ,CAAA,EACA,iBAAAuE,IAAA,EACA,KAAAga,sBAAA,CAAAve,GACM,WAIN,CAAA8c,qBAAA,GAA+C,KAAAO,+BAAA,CAAArd,GAG/C,KAAAsO,QAAA,CAAAlL,OAAA,EAAA0C,EAAApF,IAAA,CACK,KAAA8d,WAAA,CAAAxe,EAAA,UAAAU,EACL,GACA,IACMqE,MAAAA,CAAA,CAAwB,MAAA/H,QAAA,CAAAmC,MAAA,CAG9B4F,EAAApC,SAAA,IACAoC,EAAArB,gBAAA,WAAAqW,cAAA,CAAA/Z,GACA,CAGAue,uBAAAve,CAAA,EACA,IACAhD,SAAAA,CAAA,CACMsG,OAAAA,CAAA,CACN,MACAmb,EAAA,KAAAtP,OAAA,GAAAuP,EAAApb,EAAAsG,QAAA,gBAAAlK,aAAA,GAGA,GAAAgf,EAAA,CAYA,OAXA,CACQC,WAAAA,CAAA,CACR,CAAAD,EAAAE,QAAA,CACAC,EAAAzqB,GAAAkN,KAAA,CAAAtE,EAAAgD,GAAA,CAAAgS,IAAA,EACAH,EAAAvO,EAAAsG,QAAA,cAAAxL,SAAA,CAAAygB,EAAAhN,QAAA,EACAH,EAAApO,EAAAsG,QAAA,eAAAtM,SAAA,CAAAuhB,EAAAnN,SAAA,EACAhQ,EAAAmQ,EAAA8M,EACAlT,EAAAiT,EAAAI,KAAA,CAAAL,EAAArhB,KAAA,KAAA2hB,OAAA,GAAAviB,IAAA,KAAAiiB,CAAA,CACAO,EAAApnB,EAAA0L,EAAAlD,YAAA,OAAA9C,SAAA,IAAAkD,EAAAiL,EAAAzS,MAAA,CAGA0H,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAmd,EAAA,KAAAF,QAAA,CAAAe,EAAAjT,EAAA/K,GACAV,EAAA8H,SAAA,MAAA1G,CAAA,MAAAC,CAAA,EACArB,EAAA0B,KAAA,CAAAA,EAAA,CAAAA,GACA,IAAAud,EAAAjf,EAAAwX,SAAA,CAAAxX,EAAAwX,SAAA,CAAAxX,EAAAwX,SAAA,CAAAmH,EAAA9M,EAGA,WAAAH,GACA1R,EAAAkC,SAAA,eAEA2b,EAAA5U,MAAA,CAAAjJ,GAGA,WAAA0R,GACA1R,EAAAkC,SAAA,gBAGAlC,EAAAwX,SAAA,CAAAyH,EACAjf,EAAA0B,KAAA,GAAAA,EAAA,GAAAA,GACA1B,EAAA8H,SAAA,OAAA1G,CAAA,OAAAC,CAAA,OAAAD,CAAA,EAAAyQ,EAAAgM,CAAAA,EAAApB,SAAA,EAAAiC,EAAAjC,SAAA,EAAAkC,EAGA,SAAAK,CAAA,CAAAte,EAAA,EAAA6J,MAAAyU,CAAA,CAAAte,EAAA,GACA,MAAAU,CAAA,EAAA4d,CAAA,CAAAte,EAAA,CACA,CAGA,UAGA,CACAU,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,MAUArB,EAAAiX,SAAA,EACAjX,EAAAkf,QAAA,CAAAT,EAAArd,EAAAC,GAGArB,EAAAiG,WAAA,EACMjG,EAAAmf,UAAA,CAAAV,EAAArd,EAAAC,EAEN,CAGA+d,gBAAA,CACA,UAAApC,cAAA,OAAAD,SAAA,CAAA/jB,MAAA,GAOA,IAAAqmB,EAAA,KAAAtC,SAAA,MAAAC,cAAA,EACAsC,EAAAD,EAAuBzV,QAAA,gBAAAtM,SAAA,UAEvBiiB,EAAA,EAIMA,EADND,UAAAA,EACMD,EAAAje,CAAA,MAAAqF,IAAA,CACN6Y,QAAAA,EACMD,EAAAje,CAAA,MAAA8b,IAAA,CAENmC,EAAAje,CAAA,OAAAqF,IAAA,MAAAyW,IAAA,IAGA,QAAAxc,EAAA,KAAAsc,cAAA,CAAAtc,EAAA,KAAAqc,SAAA,CAAA/jB,MAAA,CAAA0H,IACM,KAAAqc,SAAA,CAAArc,EAAA,CAAAU,CAAA,EAAAme,CAIN,MAAA9Y,IAAA,CAAAmM,OAAAqK,iBAAA,CACA,KAAAC,IAAA,CAAAtK,OAAAuK,iBAAA,CACA,KAAAH,cAAA,MAAAD,SAAA,CAAA/jB,MAAA,CA1BA,CA6BAqkB,gCAAArd,CAAA,EACA,KAAAsO,QAAA,CAAAlL,OAAA,EAAA0C,EAAApF,IAAA,CACK,KAAA8e,mCAAA,CAAAxf,EAAA,UAAAU,EACL,GACA,KAAA0e,cAAA,GAGAI,oCAAAxf,CAAA,CAAAyf,CAAA,CAAAnc,CAAA,CAAA5C,CAAA,MAAA0P,EAAA9M,EAAAgL,QAAA,CAAA5N,EAAA,CAGA0P,EAAA9B,QAAA,CAAAtV,MAAA,GACAoX,EAAA9B,QAAA,CAAAlL,OAAA,EAAA0C,EAAApF,IAAA,CACO+e,EAAAD,mCAAA,CAAAxf,EAAAyf,EAAArP,EAAA1P,EACD,GAGN,KAAAgf,sBAAA,CAAA1f,EAAAyf,EAAAnc,EAAA5C,EACA,CAGAgf,uBAAA1f,CAAA,CAAAyf,CAAA,CAAAnc,CAAA,CAAA5C,CAAA,MAAA0P,EAAA9M,EAAAgL,QAAA,CAAA5N,EAAA,CAGA,sBAAA0P,EAAAsN,WAAA,CACA,OAAAtN,CAAA,CAGApQ,EAAA2P,IAAA,GACAS,EAAAL,UAAA,CAAA/P,EAAA,IACA,IAAA2f,EAAAvP,EAAAhQ,YAAA,MACAwf,EAAAxP,EAAAhQ,YAAA,MACAyf,EAAAzP,EAAAhQ,YAAA,OACA0f,EAAA1P,EAAAhQ,YAAA,OACAse,EAAAtO,EAAAxG,QAAA,gBAAAlK,aAAA,GAAAof,EAAAtC,QAAAkC,IAAAA,EAAAI,KAAA,CAGA,IAAApe,IAGAif,EAAAniB,QAAA,IACAmiB,EAAA1hB,QAAA,CAAAmS,EAAA2P,qBAAA,OAGAH,EAAApiB,QAAA,IACAoiB,EAAA3hB,QAAA,CAAAmS,EAAA2P,qBAAA,OAGAF,EAAAriB,QAAA,IACAqiB,EAAA5hB,QAAA,CAAAmS,EAAA2P,qBAAA,QAGAD,EAAAtiB,QAAA,IACAsiB,EAAA7hB,QAAA,CAAAmS,EAAA2P,qBAAA,SAGA,IAAAxmB,EAAA6W,EAAAsN,WAAA,CAAA1d,GAkDA,OA/CA8e,GACAW,CAAAA,EAAAre,CAAA,EAAA7H,CAAA,EAGAomB,EAAAniB,QAAA,IAEAiiB,EAAAL,cAAA,GAAAhP,EAAAhP,CAAA,CAAAue,EAAA9gB,SAAA,MAGAghB,EAAAriB,QAAA,IACA4S,CAAAA,EAAAhP,CAAA,EAAAye,EAAAhhB,SAAA,SAGAghB,EAAAriB,QAAA,IACAiiB,CAAAA,EAAAre,CAAA,EAAAye,EAAAhhB,SAAA,OAGAuR,EAAAhP,CAAA,CAAAqe,EAAAre,CAAA,EAEAqe,EAAAre,CAAA,CAAAgP,EAAAhP,CAAA,CAGA0d,GACAW,CAAAA,EAAAre,CAAA,EAAA7H,CAAA,EAGAqmB,EAAApiB,QAAA,IAAA4S,EAAA/O,CAAA,CAAAue,EAAA/gB,SAAA,MAGAihB,EAAAtiB,QAAA,IACA4S,CAAAA,EAAA/O,CAAA,EAAAye,EAAAjhB,SAAA,SAGAihB,EAAAtiB,QAAA,IACAiiB,CAAAA,EAAApe,CAAA,EAAAye,EAAAjhB,SAAA,OAGAuR,EAAA/O,CAAA,CAAAoe,EAAApe,CAAA,EAE4Boe,EAAApe,CAAA,CAAA+O,EAAA/O,CAAA,CAG5Boe,EAAA1C,SAAA,CAAAxqB,IAAA,CAAA6d,GACAqP,EAAAhZ,IAAA,CAAAhL,KAAA2D,GAAA,CAAAqgB,EAAAhZ,IAAA,CAAA2J,EAAAhP,CAAA,CAAAgP,EAAAhP,CAAA,CAAA7H,GACAkmB,EAAAvC,IAAA,CAAAzhB,KAAA6D,GAAA,CAAAmgB,EAAAvC,IAAA,CAAA9M,EAAAhP,CAAA,CAAAgP,EAAAhP,CAAA,CAAA7H,GACA6W,EAAAH,YAAA,CAAAjQ,GACAA,EAAAkQ,OAAA,GACAE,CAAA,CAGAmN,oBAAAvd,CAAA,CAAAyf,CAAoC,CAAAnc,CAAA,CAAA5C,CAAA,MAAA0P,EAAA9M,EAAAgL,QAAA,CAAA5N,EAAA,CAGpC,sBAAA0P,EAAA2J,cAAA,CACA,YAEA,IAAApW,EAAAyM,EAAA2J,cAAA,CAAA/Z,UAGA,GAIAoQ,EAAA9B,QAAA,CAAAlL,OAAA,EAAA0C,EAAApF,IAAA,CACA,IAAA4c,EAAAmC,EAAAlC,mBAAA,CAAAvd,EAAAyf,EAAArP,EAAA1P,GACKiD,EAAAyP,cAAA,CAAAkK,EACL,GACA3Z,GAPA,KAUA6a,YAAAxe,CAAA,CAAAyf,CAAA,CAAAnc,CAAA,CAAA5C,CAAA,EACA,IAAA0P,EAAA9M,EAAAgL,QAAA,CAAA5N,EAAA,CACA0P,EAAAnH,MAAA,CAAAjJ,GACAoQ,EAAA9B,QAAA,CAAAlL,OAAA,EAAA0C,EAAApF,IAAA,CACK+e,EAAAjB,WAAA,CAAAxe,EAAAyf,EAAArP,EAAA1P,EACL,GAGAgd,YAAA1d,CAAA,EACA,IACM4c,aAAAA,CAAA,OAGN,IAAAA,EACA,OAAAA,CAAA,CAGA,IAAA6B,EAAA,KAAAtP,OAAA,GACA6Q,EAAA,KAAAC,iBAAA,CAAAjgB,EAAAye,GAEA,OADA,KAAA7B,YAAA,CAAAoD,EACAA,CAAA,CAGAC,kBAAAjgB,CAAA,CAAAkgB,CAAA,EACA,IAAAA,EAAAlnB,MAAA,CACA,SAGA,IACMsK,OAAAA,CAAA,CACN,MAAAob,EAAApb,EAAAsG,QAAA,gBAAAlK,aAAA,GAGA,GAAAgf,EAAA,CAOA,QANA7M,EAAA,KAAA2L,WAAA,GACA/R,EAAAiT,EAAAI,KAAA,CAAAoB,EAAA9iB,KAAA,KAAA2hB,OAAA,GAAAviB,IAAA,KAAA0jB,CAAA,CACAlB,EAAApnB,EAAA0L,EAAAlD,YAAA,OAAA9C,SAAA,IACAkD,EAAAiL,EAAAzS,MAAA,CAAAmnB,EAAA,EAGAzf,EAAA,EAAAA,EAAAF,EAAAE,IACAyf,GAAA,CAAAtC,IAAA,CAAAF,QAAA,CAAAe,EAAAjT,EAAA/K,GAAA+b,SAAA,EAAAiC,EAAAjC,SAAA,EAAA5K,EAAA6M,EAAAE,QAAA,CAAAD,UAAA,CAGA,SAAAK,CAAA,CAAAte,EAAA,EAAA6J,MAAAyU,CAAA,CAAAte,EAAA,GACAyf,CAAAA,GAAAnB,CAAA,CAAAte,EAAA,EAIA,OAAAyf,CAAA,IAGA,CAAAngB,EAAA0d,WAAA,CACA,OAAAwC,GAAAA,EAAAlnB,MAAA,CAGAgH,EAAA2P,IAAA,GACA,KAAAI,UAAA,CAAA/P,EAAA,IACA,IACMzG,MAAAymB,CAAA,CACN,CAAAhgB,EAAA0d,WAAA,CAAAwC,GAGA,OAFA,KAAAjQ,YAAA,CAAAjQ,GACAA,EAAAkQ,OAAA,GACA8P,CACA,CASAD,sBAAAjlB,CAAA,EAIA,IAHA,IAAA+Z,EAAA,KAGAA,aAAA/d,IAAA+d,EAAAzD,YAAA,SAAAgP,EAAAvL,EAAAvR,MAAA,CAAAlD,YAAA,CAAAtF,GAGA,GAAAslB,EAAA5iB,QAAA,KACA,OAAA4iB,EAAAliB,QAAA,MAGA2W,EAAAA,EAAAvR,MAAA,CAGA,YAEA,CAGA,MAAAzM,WAAAC,GACAiG,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAyB,aAAAtD,IAAAmX,GAAA,KAAAzJ,IAAA,SAGzB,KAAAkH,IAAA,MAAA6C,QAAA,CAAAtV,MAAA,WAAAolB,eAAA,GAGAjP,SAAA,CACA,YAAA1D,IAAA,CAEA,CAGA,MAAA4U,WAAAxpB,GACAkG,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,YAEA,CAGA,MAAArO,WAAAF,GACA+G,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,OACA,KAAA+b,IAAA,IAGAvQ,WAAA/P,CAAA,EAGA,IAHAugB,EAGA,CACMvjB,SAAAA,CAAA,CACN,MACA,CACAmC,OAAAA,CAAA,CACMhG,OAAAA,CAAA,CACN,CAAA6D,EACA3C,EAAA2F,EAAA3F,MAAA,CAGA,GAHA8E,EAAA6G,WAAA,CAAAhG,GAGA3F,EAAA6I,KAAA,WAAAlD,EAAAgS,IAAA,EAAA7Y,GAAA,SAAAA,EAAAqnB,gBAAA,EACAxgB,EAAAgS,IAAA,CAAA7Y,EAAAqnB,gBAAA,CAAAnmB,GAAAomB,gBAAA,aAAAC,EAAA,IAAAhrB,EAAAsH,EAAA,WAAA5I,GAAAkN,KAAA,CAAAtB,EAAAgS,IAAA,EAAAH,QAAA,EAGA6O,EAAAljB,QAAA,KACAR,EAAAyB,UAAA,CAAAiiB,EAAA7hB,SAAA,MACA7B,EAAA2B,MAAA,CAAA3B,EAAAyB,UAAA,CACM,KAIN,CAAA2B,YAAA,MAAA5C,QAAA,IACA,KAAA4C,YAAA,SAAAnC,QAAA,IAGA,KAAAmC,YAAA,MAAA5C,QAAA,IACA,KAAA4C,YAAA,SAAAnC,QAAA,IAGA,IACA1E,MAAAA,CAAA,CACMC,OAAAA,CAAA,EAAA2F,EAAAD,QAAA,CAGN,KAAA0K,QAAA,UAAApM,QAAA,IACA,KAAAoM,QAAA,aAAA3L,QAAA,SAGA,KAAA2L,QAAA,WAAApM,QAAA,IACA,KAAAoM,QAAA,cAAA3L,QAAA,SAGA,KAAA2L,QAAA,UAAApM,QAAA,IACA,KAAAoM,QAAA,aAAA3L,QAAA,UAGA,IAAA0iB,EAAA,KAAAvgB,YAAA,SACAwgB,EAAA,KAAAxgB,YAAA,SACAygB,EAAA,KAAAzgB,YAAA,YACA+J,EAAA0W,EAAArjB,QAAA,GAAA5F,EAAAipB,EAAAvjB,SAAA,SACAuJ,EAAA,MAAAyZ,IAAA,mBAAA1W,QAAA,aAAA1L,QAAA,WACAuI,EAAA,EACAC,EAAA,EACAI,EAAA,EAAAC,EAAA,EAGAoD,IACA1D,EAAA0D,CAAA,IACAzD,EAAAyD,CAAA,KAGA,KAAAmW,IAAA,GACA/mB,EAAA,KAAAqQ,QAAA,UAAA/K,SAAA,MAAArF,EAAA,KAAAoQ,QAAA,WAAA/K,SAAA,MAGA,gBAAA0F,IAAA,GACAuC,EAAAL,EACAM,EAAAL,EACAD,EAAA,EACAC,EAAA,IAIAvH,EAAAD,QAAA,CAAA8B,UAAA,CAAAzH,EAAAC,GAGA,KAAAW,IAAA,EACA,OAAAmJ,MAAA,UAAAid,CAAAA,EAAA,KAAApmB,IAAA,CAAAkkB,UAAA,GAAAkC,KAAA,IAAAA,EAAA,OAAAA,EAAA5R,QAAA,2BAAA/E,QAAA,oBAAApM,QAAA,UAAAoM,QAAA,2BAAApM,QAAA,IACA,KAAAoM,QAAA,2BAAA3L,QAAA,YAGA,MAAA8R,UAAA,CAAA/P,GAAAA,EAAA8H,SAAA,MAAA1H,YAAA,MAAAvB,SAAA,WAAAuB,YAAA,MAAAvB,SAAA,OAGAsL,IACA5Q,EAAA4Q,CAAA,IACA3Q,EAAA2Q,CAAA,KAGAnN,EAAAqJ,UAAA,EACArG,IAAAA,EACAsG,YAAA,KAAAlG,YAAA,wBAAA9C,SAAA,GACA/D,MAAA4F,EAAAD,QAAA,CAAA3F,KAAA,CACAgN,aAAAhN,EACAC,OAAA2F,EAAAD,QAAA,CAAA1F,MAAA,CACAgN,cAAAhN,EACAiN,KAAAA,EACAC,KAAAA,EACAC,KAAAga,EAAAziB,QAAA,GACA0I,KAAAga,EAAA1iB,QAAA,GACA2I,KAAAA,EACAC,MAAAA,EACKC,MAAAA,CAAA,GAGLoD,IACAhL,EAAAD,QAAA,CAAA+B,aAAA,GACA9B,EAAAD,QAAA,CAAA8B,UAAA,CAAAzH,EAAAC,GACA,CAGAyW,aAAAjQ,CAAA,EACA,MAAAiQ,YAAA,CAAAjQ,GACA,KAAAhD,QAAA,CAAAmC,MAAA,CAAAD,QAAA,CAAA+B,aAAA,EACA,CASA6f,OAAAvnB,CAAA,EACA,IAAAC,EAAAT,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAAQ,CAAA,CACAwnB,EAAAhoB,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IACAioB,EAAA,KAAA5gB,YAAA,aACA6gB,EAAA,KAAA7gB,YAAA,cACAygB,EAAA,KAAAzgB,YAAA,YACA8gB,EAAA,KAAA9gB,YAAA,UACA+gB,EAAAH,EAAA5iB,SAAA,IAAAgjB,EAAAH,EAAA7iB,SAAA,IAGA,GAAA2iB,GACA,oBAAAA,EACQ,KAAA3gB,YAAA,2BAAAnC,QAAA,CAAA8iB,OACR,KAAAM,EAAA,KAAAjhB,YAAA,wBAGAihB,EAAA7jB,QAAA,IACA6jB,EAAApjB,QAAA,CAAAojB,EAAA/jB,SAAA,GAAA9C,OAAA,0BAEA,KAGAwmB,EAAA/iB,QAAA,CAAA1E,GAAA0nB,EAAAhjB,QAAA,CAAAzE,GAGAqnB,EAAArjB,QAAA,IACAqjB,EAAA5iB,QAAA,QAAA6L,MAAA,CAAAqX,GAAA5nB,EAAA,KAAAuQ,MAAA,CAAAsX,GAAA5nB,IAGA0nB,EAAA1jB,QAAA,IACA,IAAAmM,EAAA,KAAAC,QAAA,UAAAC,EAAA,KAAAD,QAAA,WAGAD,EAAAnM,QAAA,IACAmM,EAAA1L,QAAA,IAAA6L,MAAA,CAAAvQ,EAAA,OAGAsQ,EAAArM,QAAA,IACAqM,EAAA5L,QAAA,IAAA6L,MAAA,CAAAtQ,EAAA,MAEA,EAEA,CAGA,MAAAzD,WAAAX,GACA2H,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,QAGA3C,KAAA5B,CAAA,EACA,IAAAoB,EAAA,KAAAhB,YAAA,MAAAvB,SAAA,MACAwC,EAAA,KAAAjB,YAAA,MAAAvB,SAAA,MACAtF,EAAA,KAAAqQ,QAAA,gBAAA/K,SAAA,MACArF,EAAA,KAAAoQ,QAAA,iBAAA/K,SAAA,MACAyiB,EAAA,KAAAlhB,YAAA,OACAmhB,EAAA,KAAAnhB,YAAA,OACAohB,EAAAF,EAAAziB,SAAA,MAAA4iB,EAAAF,EAAA1iB,SAAA,MAcA,GAXAyiB,EAAA9jB,QAAA,KAAA+jB,EAAA/jB,QAAA,IACAikB,CAAAA,EAAAD,CAAA,EAGAD,EAAA/jB,QAAA,KAAA8jB,EAAA9jB,QAAA,IACAgkB,CAAAA,EAAAC,CAAA,EAGAD,EAAA/lB,KAAA2D,GAAA,CAAAoiB,EAAAjoB,EAAA,GAAAkoB,EAAAhmB,KAAA2D,GAAA,CAAAqiB,EAAAjoB,EAAA,GAGAwG,EAAA,CACA,IAAA0hB,EAAA,EAAuB,EAAAjmB,KAAAiB,IAAA,UAAAsD,EAAAiI,SAAA,GAGvBzO,EAAA,GAAAD,EAAA,IACAyG,EAAAkI,MAAA,CAAA9G,EAAAogB,EAAAngB,GACArB,EAAAmI,MAAA,CAAA/G,EAAA7H,EAAAioB,EAAAngB,GACArB,EAAAmb,aAAA,CAAA/Z,EAAA7H,EAAAioB,EAAAE,EAAAF,EAAAngB,EAAAD,EAAA7H,EAAA8H,EAAAogB,EAAAC,EAAAD,EAAArgB,EAAA7H,EAAA8H,EAAAogB,GACAzhB,EAAAmI,MAAA,CAAA/G,EAAA7H,EAAA8H,EAAA7H,EAAAioB,GACAzhB,EAAAmb,aAAA,CAAA/Z,EAAA7H,EAAA8H,EAAA7H,EAAAioB,EAAAC,EAAAD,EAAArgB,EAAA7H,EAAAioB,EAAAE,EAAAF,EAAAngB,EAAA7H,EAAA4H,EAAA7H,EAAAioB,EAAAngB,EAAA7H,GACAwG,EAAAmI,MAAA,CAAA/G,EAAAogB,EAAAngB,EAAA7H,GACAwG,EAAAmb,aAAA,CAAA/Z,EAAAogB,EAAAE,EAAAF,EAAAngB,EAAA7H,EAAA4H,EAAAC,EAAA7H,EAAAioB,EAAAC,EAAAD,EAAArgB,EAAAC,EAAA7H,EAAAioB,GACAzhB,EAAAmI,MAAA,CAAA/G,EAAAC,EAAAogB,GACAzhB,EAAAmb,aAAA,CAAA/Z,EAAAC,EAAAogB,EAAAC,EAAAD,EAAArgB,EAAAogB,EAAAE,EAAAF,EAAAngB,EAAAD,EAAAogB,EAAAngB,GACArB,EAAAoI,SAAA,GACA,QAGA,IAAAnV,GAAAmO,EAAAC,EAAAD,EAAA7H,EAAA8H,EAAA7H,EAAA,CAGAwgB,YAAA,CACA,YAEA,CAGA,MAAAzmB,WAAA6B,GACA2H,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,UAGA3C,KAAA5B,CAAA,EACA,IAAAkM,EAAA,KAAA9L,YAAA,OAAAvB,SAAA,MACAsN,EAAA,KAAA/L,YAAA,OAAAvB,SAAA,MAAAlM,EAAA,KAAAyN,YAAA,MAAAvB,SAAA,GASA,OANAmB,GAAArN,EAAA,IACAqN,EAAAiI,SAAA,GACAjI,EAAAuc,GAAA,CAAArQ,EAAAC,EAAAxZ,EAAA,EAAA8I,EAAAA,KAAAgE,EAAA,KACAO,EAAAoI,SAAA,IAGA,IAAAnV,GAAAiZ,EAAAvZ,EAAAwZ,EAAAxZ,EAAAuZ,EAAAvZ,EAAAwZ,EAAAxZ,EAAA,CAGAqnB,YAAA,CACA,YAEA,CAGA,MAAAnmB,WAAAuB,GACA2H,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,WAGA3C,KAAA5B,CAAA,EACA,IAAA0hB,EAAA,IAAAjmB,KAAAiB,IAAA,UACA8kB,EAAA,KAAAphB,YAAA,OAAAvB,SAAA,MACA4iB,EAAA,KAAArhB,YAAA,OAAAvB,SAAA,MACAqN,EAAA,KAAA9L,YAAA,OAAAvB,SAAA,MAAAsN,EAAA,KAAA/L,YAAA,OAAAvB,SAAA,MAaA,OAVAmB,GAAAwhB,EAAA,GAAAC,EAAA,IACAzhB,EAAAiI,SAAA,GACAjI,EAAAkI,MAAA,CAAAgE,EAAAsV,EAAArV,GACAnM,EAAAmb,aAAA,CAAAjP,EAAAsV,EAAArV,EAAAuV,EAAAD,EAAAvV,EAAAwV,EAAAF,EAAArV,EAAAsV,EAAAvV,EAAAC,EAAAsV,GACAzhB,EAAAmb,aAAA,CAAAjP,EAAAwV,EAAAF,EAAArV,EAAAsV,EAAAvV,EAAAsV,EAAArV,EAAAuV,EAAAD,EAAAvV,EAAAsV,EAAArV,GACAnM,EAAAmb,aAAA,CAAAjP,EAAAsV,EAAArV,EAAAuV,EAAAD,EAAAvV,EAAAwV,EAAAF,EAAArV,EAAAsV,EAAAvV,EAAAC,EAAAsV,GACAzhB,EAAAmb,aAAA,CAAAjP,EAAAwV,EAAAF,EAAArV,EAAAsV,EAAAvV,EAAAsV,EAAArV,EAAAuV,EAAAD,EAAAvV,EAAAsV,EAAArV,GACAnM,EAAAoI,SAAA,IAGA,IAAAnV,GAAAiZ,EAAAsV,EAAArV,EAAAsV,EAAAvV,EAAAsV,EAAArV,EAAAsV,EAAA,CAGAzH,YAAA,CACA,YAEA,CAGA,MAAArlB,WAAAS,GACA2H,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,QAGAod,WAAA,CACA,WAAApsB,EAAA,KAAA6K,YAAA,OAAAvB,SAAA,WAAAuB,YAAA,OAAAvB,SAAA,WAAAtJ,EAAA,KAAA6K,YAAA,OAAAvB,SAAA,WAAAuB,YAAA,OAAAvB,SAAA,QAGA+C,KAAA5B,CAAA,EACA,KACAoB,EAAAwgB,CAAA,CACKvgB,EAAAwgB,CAAA,CACL,EACAzgB,EAAAuR,CAAA,CACKtR,EAAAyR,CAAA,QAAA6O,SAAA,GASL,OANA3hB,IACAA,EAAAiI,SAAA,GACAjI,EAAAkI,MAAA,CAAA0Z,EAAAC,GACA7hB,EAAAmI,MAAA,CAAAwK,EAAAG,IAGA,IAAA7f,GAAA2uB,EAAAC,EAAAlP,EAAAG,EAAA,CAGAkH,YAAA,CACA,IAAA1G,EAAAC,EAAA,MAAAoO,SAAA,GACA/U,EAAA0G,EAAAvR,OAAA,CAAAwR,GACA,QAAAD,EAAA1G,EAAA,EAAA2G,EAAA3G,EAAA,EAEA,CAGA,MAAAnX,WAAAL,GACA2H,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,YACA,KAAA1C,MAAA,IACA,KAAAA,MAAA,CAAAtM,EAAAoM,SAAA,MAAAvB,YAAA,WAAA9C,SAAA,IAGAsE,KAAA5B,CAAA,EACA,IACM6B,OAAAA,CAAA,CACN,MACA,EACAT,EAAAwgB,CAAA,CACKvgB,EAAAwgB,CAAA,CACL,EAAAhgB,EAAA8B,EAAA,IAAA1Q,GAAA2uB,EAAAC,GAmBA,OAhBA7hB,IACAA,EAAAiI,SAAA,GACAjI,EAAAkI,MAAA,CAAA0Z,EAAAC,IAGAhgB,EAAAuB,OAAA,CAAAhJ,GAAA,CACA,IACAgH,EAAAA,CAAA,CACQC,EAAAA,CAAA,CACR,CAAAjH,EAAAuJ,EAAAsP,QAAA,CAAA7R,EAAAC,GAGArB,GACAA,EAAAmI,MAAA,CAAA/G,EAAAC,EAEA,GACAsC,CAAA,CAGAqW,YAAA,CACA,IACMnY,OAAAA,CAAA,CACN,MACAyc,EAAAzc,EAAA7I,MAAA,GACAqhB,EAAA,GAaA,OAZAxY,EAAAuB,OAAA,EAAA7B,EAAAb,IAAA,CACAA,IAAA4d,GAIKjE,EAAA9nB,IAAA,EAAAgP,EAAAA,EAAAQ,OAAA,CAAAF,CAAA,CAAAnB,EAAA,QAGL2Z,EAAArhB,MAAA,IACAqhB,EAAA9nB,IAAA,EAAAsP,CAAA,CAAAA,EAAA7I,MAAA,IAAAqhB,CAAA,CAAAA,EAAArhB,MAAA,SAGAqhB,CAAA,CAEA,CAGA,MAAA7kB,WAAAC,GACAsH,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,WAGA3C,KAAA5B,CAAA,EACA,IAAA2D,EAAA,MAAA/B,IAAA,CAAA5B,GACA,EACAoB,EAAAA,CAAA,CACKC,EAAAA,CAAA,QAAAQ,MAAA,CAQL,OALA7B,IACAA,EAAAmI,MAAA,CAAA/G,EAAAC,GACArB,EAAAoI,SAAA,IAGAzE,CAAA,CAEA,CAGA,MAAArO,WAAA1B,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,WAGAtE,cAAAD,CAAA,CAAA8F,CAAA,CAAAgc,CAAA,EACA,IAAAvoB,EAAA,KAAAqQ,QAAA,UAAA/K,SAAA,SAA+DrF,EAAA,KAAAoQ,QAAA,WAAA/K,SAAA,SAG/DkjB,EAAA,IAAA7rB,GAAA,KAAA8G,QAAA,MACA+kB,CAAAA,EAAA9T,UAAA,CAAA9D,OAAA,KAAAzU,EAAA,KAAAsH,QAAA,gBAAAoD,YAAA,YAAAlC,QAAA,IACA6jB,EAAA9T,UAAA,CAAA1U,KAAA,KAAA7D,EAAA,KAAAsH,QAAA,YAAA8M,MAAA,CAAAvQ,EAAA,OACAwoB,EAAA9T,UAAA,CAAAzU,MAAA,KAAA9D,EAAA,KAAAsH,QAAA,aAAA8M,MAAA,CAAAtQ,EAAA,OACAuoB,EAAA9T,UAAA,CAAA/L,SAAA,KAAAxM,EAAA,KAAAsH,QAAA,kBAAAoD,YAAA,qBAAAlC,QAAA,IACA6jB,EAAAzT,QAAA,MAAAA,QAAA,CACA,IAAA0T,EAAA,KAAAhlB,QAAA,CAAA1D,YAAA,CAAAC,EAAAC,GACAyoB,EAAAD,EAAAE,UAAA,OACAvC,EAAA,KAAAvf,YAAA,MAAAwf,EAAA,KAAAxf,YAAA,MAGAuf,EAAAniB,QAAA,IAAAoiB,EAAApiB,QAAA,IACAykB,EAAAna,SAAA,CAAA6X,EAAA9gB,SAAA,SAAA+gB,EAAA/gB,SAAA,UAGAijB,EAAAtkB,QAAA,GACM,KAAA0Q,MAAA,iBAAA4T,EAEA7nB,QAAAC,cAAA,MAAAgU,MAAA,iBAIN,QAAA9M,EAAA,GAAAA,GAAuB,EAAAA,IACvB,QAAAC,EAAA,GAAAA,GAAA,EAAAA,IACA4gB,EAAAtS,IAAA,GACAoS,EAAA9T,UAAA,CAAA7M,CAAA,KAAA1L,EAAA,KAAAsH,QAAA,KAAAoE,EAAA4gB,EAAAzoB,KAAA,EACAwoB,EAAA9T,UAAA,CAAA5M,CAAA,KAAA3L,EAAA,KAAAsH,QAAA,KAAAqE,EAAA2gB,EAAAxoB,MAAA,EACAuoB,EAAA9Y,MAAA,CAAAgZ,GACAA,EAAA/R,OAAA,GAKA,OADAlQ,EAAAC,aAAA,CAAA+hB,EAAA,SACA,CAEA,CAGA,MAAAntB,WAAAjB,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,UAGA0E,OAAAjJ,CAAA,CAAAuB,CAAA,CAAAwK,CAAA,EACA,GAAAxK,GAIA,IACAH,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAE,EACA4gB,EAAA,KAAA/hB,YAAA,WAAA9C,SAAA,SACA8kB,EAAA,KAAAhiB,YAAA,gBAAA9C,SAAA,gBAAA0C,EAAA8H,SAAA,CAAA1G,EAAAC,GAGA,SAAA8gB,GACAniB,EAAA6L,MAAA,CAAAE,GAGA,gBAAAqW,GACApiB,EAAA0B,KAAA,CAAA1B,EAAAwX,SAAA,CAAAxX,EAAAwX,SAAA,EAEgBxX,EAAA2P,IAAA,GAGhB,IAAA0S,EAAA,IAAAnsB,GAAA,KAAA8G,QAAA,MACAqlB,CAAAA,EAAA9d,IAAA,MAAAA,IAAA,CACA8d,EAAApU,UAAA,CAAA9D,OAAA,KAAAzU,EAAA,KAAAsH,QAAA,gBAAAoD,YAAA,YAAAlC,QAAA,IACAmkB,EAAApU,UAAA,CAAAtH,IAAA,KAAAjR,EAAA,KAAAsH,QAAA,aAAAoD,YAAA,SAAAlC,QAAA,IACAmkB,EAAApU,UAAA,CAAArH,IAAA,KAAAlR,EAAA,KAAAsH,QAAA,aAAAoD,YAAA,SAAAlC,QAAA,IACAmkB,EAAApU,UAAA,CAAA1U,KAAA,KAAA7D,EAAA,KAAAsH,QAAA,cAAAoD,YAAA,gBAAAlC,QAAA,IACAmkB,EAAApU,UAAA,CAAAzU,MAAA,KAAA9D,EAAA,KAAAsH,QAAA,eAAAoD,YAAA,iBAAAlC,QAAA,IACAmkB,EAAApU,UAAA,CAAAqU,QAAA,KAAA5sB,EAAA,KAAAsH,QAAA,iBAAAoD,YAAA,aAAAlC,QAAA,IACAmkB,EAAApU,UAAA,CAAAiM,IAAA,KAAAxkB,EAAA,KAAAsH,QAAA,aAAAoD,YAAA,SAAA9B,QAAA,WACA+jB,EAAApU,UAAA,CAAAmM,MAAA,KAAA1kB,EAAA,KAAAsH,QAAA,eAAAoD,YAAA,WAAAlC,QAAA,UACAmkB,EAAA/T,QAAA,MAAAA,QAAA,CACA+T,EAAApZ,MAAA,CAAAjJ,GAAAA,EAAAkQ,OAAA,GAGA,gBAAAkS,GACApiB,EAAA0B,KAAA,GAAA1B,EAAAwX,SAAA,GAAAxX,EAAAwX,SAAA,EAGA,SAAA2K,GACAniB,EAAA6L,MAAA,EAAAE,GAGA/L,EAAA8H,SAAA,EAAA1G,EAAA,CAAAC,GA3CA,CA6CA,CAGA,MAAA5N,WAAAG,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,QAGA0E,QAAA,EAEA,CAGA,MAAA1U,WAAAyB,GACA+G,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,KAGAwV,eAAA/Z,CAAA,EACA,IAAA2D,EAAA,IAAA1Q,GAIA,OAHA,KAAAqb,QAAA,CAAAlL,OAAA,CAAAgN,GAAA,CACKzM,EAAAyP,cAAA,CAAAhD,EAAA2J,cAAA,CAAA/Z,GACL,GACA2D,CAAA,CAEA,CAGA,MAAAlP,WAAAb,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAuU,mBAAA,mBACA,KAAAC,KAAA,IACA,IACAA,MAAAA,CAAA,CACMlU,SAAAA,CAAA,CACN,MACAA,EAAAlL,OAAA,CAAAgN,GAAA,CACA,SAAAA,EAAA7L,IAAA,EACAie,EAAAjwB,IAAA,CAAA6d,EAEA,GAGAqS,kBAAA,CACA,YAAAriB,YAAA,kBAAA9C,SAAA,sBAGAyC,eAAAC,CAAA,CAAAH,CAAA,CAAAiiB,CAAA,EACA,IAAAY,EAAA,KAGA,KAAAxiB,gBAAA,GAAA1C,QAAA,KACAklB,EAAA,KAAAxiB,gBAAA,GAAAR,aAAA,GACA,KAAAijB,oBAAA,CAAAD,IAGA,IACMF,MAAAA,CAAA,CACN,CAAAE,EAAAE,EAAA,KAAAC,WAAA,CAAA7iB,EAAAH,GAGA,IAAA+iB,EACA,YAAAE,gBAAA,CAAAhB,EAAAU,CAAA,CAAAA,EAAAxpB,MAAA,IAAAmC,KAAA,EAOA,GAJAqnB,EAAApf,OAAA,CAAAL,GAAA,CACK6f,EAAAG,YAAA,CAAAhgB,EAAAmV,MAAA,MAAA4K,gBAAA,CAAAhB,EAAA/e,EAAA5H,KAAA,KAGL,KAAAiF,YAAA,sBAAA5C,QAAA,IAEA,IACQR,SAAAA,CAAA,CACR,MACA,CACA4H,mBAAAA,CAAA,CACQ1F,SAAAA,CAAA,CACR,CAAAlC,EAAAmC,MAAA,CACA,CAAA6jB,EAAA,CAAA9jB,EAAA4B,SAAA,CACAmiB,EAAA,IAAAltB,GAAAiH,EAAA,KACAimB,CAAAA,EAAAhV,UAAA,CAAA7M,CAAA,KAAA1L,EAAAsH,EAAA,KAAA4H,EAAA,GACAqe,EAAAhV,UAAA,CAAA5M,CAAA,KAAA3L,EAAAsH,EAAA,KAAA4H,EAAA,GACAqe,EAAAhV,UAAA,CAAA1U,KAAA,KAAA7D,EAAAsH,EAAA,QAAA4H,GACAqe,EAAAhV,UAAA,CAAAzU,MAAA,KAAA9D,EAAAsH,EAAA,SAAA4H,GACA,IAAAse,EAAA,IAAA3uB,GAAAyI,EAAA,KACAkmB,CAAAA,EAAAjV,UAAA,CAAA/L,SAAA,KAAAxM,EAAAsH,EAAA,iBAAAoD,YAAA,sBAAAlC,QAAA,IACAglB,EAAA5U,QAAA,EAAA2U,EAAA,CACA,IAAAlB,EAAA,IAAA7rB,GAAA8G,EAAA,KACA+kB,CAAAA,EAAA9T,UAAA,CAAA7M,CAAA,KAAA1L,EAAAsH,EAAA,OACA+kB,EAAA9T,UAAA,CAAA5M,CAAA,KAAA3L,EAAAsH,EAAA,OACA+kB,EAAA9T,UAAA,CAAA1U,KAAA,KAAA7D,EAAAsH,EAAA,QAAAgmB,EAAAzpB,KAAA,EACAwoB,EAAA9T,UAAA,CAAAzU,MAAA,KAAA9D,EAAAsH,EAAA,SAAAgmB,EAAAxpB,MAAA,EACAuoB,EAAAzT,QAAA,EAAA4U,EAAA,CACA,IAAAlB,EAAAhlB,EAAA1D,YAAA,CAAA0pB,EAAAzpB,KAAA,CAAAypB,EAAAxpB,MAAA,EACAyoB,EAAAD,EAAAE,UAAA,OAGA,OAFAD,EAAAhL,SAAA,CAAA2L,EACAb,EAAA9Y,MAAA,CAAAgZ,GACAA,EAAAhiB,aAAA,CAAA+hB,EAAA,oBAGAY,CAAA,CAGAD,qBAAAD,CAAA,EACA,KAAAH,mBAAA,CAAAnf,OAAA,CAAA+f,GAAA,CACA,MAAA/iB,YAAA,CAAA+iB,GAAA3lB,QAAA,IAAAklB,EAAAtiB,YAAA,CAAA+iB,GAAA3lB,QAAA,IACA,KAAA4C,YAAA,CAAA+iB,EAAA,IAAAllB,QAAA,CAAAykB,EAAAtiB,YAAA,CAAA+iB,GAAAjlB,QAAA,GAEA,GAGA4kB,iBAAAhB,CAAA,CAAA3mB,CAAA,SACA,EAAAqC,QAAA,GAEA4lB,IADA1tB,EAAA,KAAAsH,QAAA,SAAA7B,GACAoF,UAAA,CAAAuhB,GAAAxjB,QAAA,GAGAnD,CAHA,CAKA,CAGA,MAAAvG,WAAAH,GACAsI,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,kBACA,KAAAge,mBAAA,CAAAhwB,IAAA,sBAGAswB,YAAA7iB,CAAA,CAAAH,CAAA,EACA,IAAAwjB,EAAA,2BAAAZ,gBAAA,GAAA9e,EAAA0f,EAAAxjB,EAAAka,cAAA,CAAA/Z,GAAA,KAGA,GAAAqjB,GAAA,CAAA1f,EACA,YAGA,KAAAvD,YAAA,OAAA5C,QAAA,SAAA4C,YAAA,OAAA5C,QAAA,SAAA4C,YAAA,OAAA5C,QAAA,SAAA4C,YAAA,OAAA5C,QAAA,KACA,KAAA4C,YAAA,UAAAnC,QAAA,IACA,KAAAmC,YAAA,UAAAnC,QAAA,IACA,KAAAmC,YAAA,UAAAnC,QAAA,IACA,KAAAmC,YAAA,UAAAnC,QAAA,KAGA,IAAA0U,EAAA0Q,EAAA1f,EAAAvC,CAAA,CAAAuC,EAAApK,KAAA,MAAA6G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,MACAiU,EAAAuQ,EAAA1f,EAAAtC,CAAA,CAAAsC,EAAAnK,MAAA,MAAA4G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,MACAkU,EAAAsQ,EAAA1f,EAAAvC,CAAA,CAAAuC,EAAApK,KAAA,MAAA6G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,MAAAmU,EAAAqQ,EAAA1f,EAAAtC,CAAA,CAAAsC,EAAAnK,MAAA,MAAA4G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,aAGA,IAAAkU,GAAAD,IAAAE,EACA,KAGAhT,EAAAsjB,oBAAA,CAAA3Q,EAAAG,EAAAC,EAAAC,EAHA,CAKA,CAGA,MAAAld,WAAArB,GACAsI,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,kBACA,KAAAge,mBAAA,CAAAhwB,IAAA,+BAGAswB,YAAA7iB,CAAA,CAAAH,CAAA,EACA,IAAAwjB,EAAA,2BAAAZ,gBAAA,GAAA9e,EAAA9D,EAAAka,cAAA,CAAA/Z,GAGA,GAAAqjB,GAAA,CAAA1f,EACA,YAGA,KAAAvD,YAAA,OAAA5C,QAAA,IACA,KAAA4C,YAAA,UAAAnC,QAAA,QAGA,KAAAmC,YAAA,OAAA5C,QAAA,IACA,KAAA4C,YAAA,UAAAnC,QAAA,QAGA,KAAAmC,YAAA,MAAA5C,QAAA,IACA,KAAA4C,YAAA,SAAAnC,QAAA,QAGA,IAAAiO,EAAAmX,EAAA1f,EAAAvC,CAAA,CAAAuC,EAAApK,KAAA,MAAA6G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,MACAsN,EAAAkX,EAAA1f,EAAAtC,CAAA,CAAAsC,EAAAnK,MAAA,MAAA4G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,MACA0kB,EAAArX,EAAAsX,EAAArX,EAGA,KAAA/L,YAAA,OAAA5C,QAAA,IACA+lB,CAAAA,EAAAF,EAAA1f,EAAAvC,CAAA,CAAAuC,EAAApK,KAAA,MAAA6G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,OAGA,KAAAuB,YAAA,OAAA5C,QAAA,IACAgmB,CAAAA,EAAAH,EAAA1f,EAAAtC,CAAA,CAAAsC,EAAAnK,MAAA,MAAA4G,YAAA,OAAAhC,SAAA,QAAAgC,YAAA,OAAAvB,SAAA,OAGA,IAAAlM,EAAA0wB,EAAA,CAAA1f,EAAApK,KAAA,CAAAoK,EAAAnK,MAAA,SAAA4G,YAAA,MAAAhC,SAAA,QAAAgC,YAAA,MAAAvB,SAAA,GACA4kB,EAAA,KAAArjB,YAAA,OAAAvB,SAAA,GACA,OAAAmB,EAAA0jB,oBAAA,CAAAH,EAAAC,EAAAC,EAAAvX,EAAAC,EAAAxZ,EAAA,CAEA,CAGA,MAAA8D,WAAA7C,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,QACA,IAAA2T,EAAAzc,KAAA6D,GAAA,GAAA7D,KAAA2D,GAAA,QAAAgB,YAAA,WAAAhC,SAAA,KACAulB,EAAA,KAAA/Z,QAAA,iBAAAga,EAAA,KAAAha,QAAA,kBAGA,KAAAga,EAAAtmB,SAAA,IACAsmB,EAAA3lB,QAAA,SAGA0lB,EAAAnmB,QAAA,IACAomB,CAAAA,EAAAA,EAAArjB,UAAA,CAAAojB,EAAA,EAGA,KAAAzL,MAAA,CAAAA,EACA,KAAA/c,KAAA,CAAAyoB,EAAAtlB,QAAA,GAEA,CAGA,MAAAvL,WAAAa,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,WACA,KAAAsf,QAAA,GACA,KAAAC,YAAA,MACA,KAAAC,YAAA,IACA,KAAAC,OAAA,IACA,KAAAC,MAAA,IACAjnB,EAAAmC,MAAA,CAAA6F,UAAA,CAAAzS,IAAA,OACA,KAAA2xB,KAAA,MAAA9jB,YAAA,UAAAb,eAAA,GACA,KAAA4kB,WAAA,MAAAD,KAAA,MAAA9jB,YAAA,QAAAb,eAAA,GACA,KAAAkP,IAAA,MAAArO,YAAA,SACA,KAAAgkB,EAAA,MAAAhkB,YAAA,OACA,KAAAikB,MAAA,KAAA3uB,EAAAsH,EAAA,mBAAAsnB,EAAA,KAAAlkB,YAAA,WAGAkkB,EAAA9mB,QAAA,IACA,KAAA6mB,MAAA,CAAApmB,QAAA,CAAAqmB,EAAAhnB,SAAA,GAAAF,KAAA,MACA,CAGAmnB,aAAA,CACA,IAAAC,EAAA,KAAApkB,YAAA,kBAAA9C,SAAA,GAAAmnB,EAAA,KAAArkB,YAAA,kBAAA9C,SAAA,SAGA,QAAAknB,EACA,KAAAlhB,MAAA,CAAAsG,QAAA,CAAA6a,EAAA,IAGA,KAAAnhB,MAAA,CAAAlD,YAAA,CAAAqkB,EAAA,GAHA,CAMAC,WAAA,CACA,IACMX,aAAAA,CAAA,CACN,MACA,CACAY,SAAAA,CAAA,CACAlW,KAAAA,CAAA,CACM2V,GAAAA,CAAA,CAAsB,MAAAQ,WAAA,GAE5BC,EAAApW,EAAArQ,SAAA,IAAAgmB,EAAAhmB,SAAA,GAAAqQ,EAAArQ,SAAA,IAAAumB,EAOA,MAJyB,MAAzBZ,GACAc,CAAAA,GAAA,KAGA,GAAA/a,MAAA,CAAA+a,GAAA/a,MAAA,CAAAia,EAAA,CAGAra,OAAAnN,CAAA,EACA,IACM+G,OAAAA,CAAA,CACN,MAAmCwhB,EAAA,KAAAP,WAAA,GASnC,GANA,KAAAT,YAAA,GACA,KAAAA,YAAA,CAAAgB,EAAAxnB,SAAA,GACM,KAAAymB,YAAA,CAAAe,EAAAlmB,QAAA,IAIN,KAAAilB,QAAA,MAAAM,WAAA,EAAgE,IAAAjK,EAAA,KAAA9Z,YAAA,SAAA9C,SAAA,WAGhE,uBAAA8C,YAAA,gBAAA9C,SAAA,wBAAA8C,YAAA,cAAA9C,SAAA,GACQ,KAAAumB,QAAA,QACR,GAAA3J,WAAAA,GAAA,KAAA+J,MAAA,CAIA,IAAA/J,WAAAA,GAAA,MAAA8J,OAAA,CAGA,OAFA,KAAAA,OAAA,IACAc,EAAA7mB,QAAA,CAAAqF,EAAA8K,eAAA,CAAA9K,EAAA+K,oBAAA,MAAAyV,YAAA,EACA,QANA,KAAAG,MAAA,IACA3gB,EAAA8K,eAAA,IACQ9K,EAAA+K,oBAAA,CAAAyW,EAAAxnB,SAAA,EAIR,CAGA,aAE4B,CAAAumB,QAAA,EAAAtnB,EAE5B,IAAAwoB,EAAA,GAGA,QAAAb,KAAA,MAAAL,QAAA,EAAuC,IAAAgB,EAAA,KAAAH,SAAA,GAEvCM,EAAA,KAAA5kB,YAAA,SAGA,GAAA4kB,EAAAxnB,QAAA,IAEA,IAAA+G,EAAAygB,EAAA1nB,SAAA,GACAunB,EAAA,GAAA/a,MAAA,CAAAvF,EAAA,KAAAuF,MAAA,CAAA+a,EAAA,OAGA5mB,QAAA,CAAA4mB,GACAE,EAAA,UAGAA,CAAA,CAGAH,aAAA,CACA,IACA5nB,SAAAA,CAAA,CACMqnB,OAAAA,CAAA,CACN,MACAzmB,EAAA,CACA+mB,SAAA,MAAAd,QAAA,MAAAK,KAAA,QAAAC,WAAA,MAAAD,KAAA,GAGA,GAAAG,EAAA7mB,QAAA,IACA,IAAAynB,EAAArnB,EAAA+mB,QAAA,CAAAN,CAAAA,EAAAnmB,QAAA,GAAAlF,MAAA,IACAksB,EAAAzpB,KAAA0pB,KAAA,CAAAF,GACAG,EAAA3pB,KAAA4pB,IAAA,CAAAJ,EACArnB,CAAAA,EAAA6Q,IAAA,KAAA/Y,EAAAsH,EAAA,OAAApC,WAAAypB,EAAAnmB,QAAA,GAAAgnB,EAAA,GACAtnB,EAAAwmB,EAAA,KAAA1uB,EAAAsH,EAAA,KAAApC,WAAAypB,EAAAnmB,QAAA,GAAAknB,EAAA,GACMxnB,EAAA+mB,QAAA,EAAAM,EAAAC,CAAA,EAAAE,CAAAA,EAAAF,CAAA,CACN,MACAtnB,EAAA6Q,IAAA,MAAAA,IAAA,CACA7Q,EAAAwmB,EAAA,MAAAA,EAAA,CAGA,OAAAxmB,CAAA,CAEA,CAGA,MAAA9K,WAAAC,GACAgK,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,gBAGAmgB,WAAA,CACA,IACAC,SAAAA,CAAA,CACAlW,KAAAA,CAAA,CACM2V,GAAAA,CAAA,CACN,MAAAQ,WAAwB,GACxBU,EAAA,IAAsBjtB,EAAQoW,EAAAnQ,QAAA,IAAAinB,EAAA,IAAAltB,EAAA+rB,EAAA9lB,QAAA,IAG9B,GAAAgnB,EAAA3kB,EAAA,EAAA4kB,EAAA5kB,EAAA,EAEA,IAAAhO,EAAA2yB,EAAA3yB,CAAA,EAAA4yB,EAAA5yB,CAAA,CAAA2yB,EAAA3yB,CAAA,EAAAgyB,EACAxX,EAAAmY,EAAAnY,CAAA,EAAAoY,EAAApY,CAAA,CAAAmY,EAAAnY,CAAA,EAAAwX,EAAkE9X,EAAAyY,EAAAzY,CAAA,EAAA0Y,EAAA1Y,CAAA,CAAAyY,EAAAzY,CAAA,EAAA8X,EAGlE,aAAA7a,MAAA,CAAArO,KAAA0pB,KAAA,CAAAxyB,GAAA,MAAAmX,MAAA,CAAArO,KAAA0pB,KAAA,CAAAhY,GAAA,MAAArD,MAAA,CAAArO,KAAA0pB,KAAA,CAAAtY,GAAA,YAGA,KAAAzM,YAAA,SAAA9B,QAAA,GAEA,CAGA,MAAAtL,WAAAD,GACAgK,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,oBAGAmgB,WAAA,CACA,IACAC,SAAAA,CAAA,CACAlW,KAAAA,CAAA,CACM2V,GAAAA,CAAA,CAAsB,MAAAQ,WAAA,GAG5BY,EAAA5tB,EAAA6W,EAAAnR,SAAA,IACAmoB,EAAA7tB,EAAAwsB,EAAA9mB,SAAA,IAKA,OAJAkoB,EAAA7qB,GAAA,EAAA8T,EAAA/N,IAEK+N,EAAA,CAAA2V,CADL,CAAA1jB,EAAA,CACK+N,CAAA,EAAAkW,GACLnoB,IAAA,KACA,CAEA,CAGA,MAAAnI,WAAAT,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,QACA,KAAA0Z,MAAA,IACA,KAAAxB,SAAA,MAAArc,YAAA,gBAAAhC,SAAA,GACA,IACMuB,YAAAA,CAAA,CACN,CAAA3C,EACA,CACMsR,SAAAA,CAAA,OAGN,QAAA8B,KAAA9B,EACA,OAAA8B,EAAA7L,IAAA,EACA,gBAEA,KAAAqa,QAAA,CAAAxO,EAAA,IAAAsV,EAAAtV,EAAAxG,QAAA,gBAGA8b,EAAAloB,QAAA,IACAmC,CAAAA,CAAA,CAAA+lB,EAAApoB,SAAA,UAGA,UAGA,gBACA,KAAA6gB,YAAA,CAAA/N,EAAA,UAGA,QACA,IAAAyN,EAAAzN,CAGAyN,CAAAA,EAAAlB,UAAA,EACA,KAAAmC,KAAA,SAAAhB,QAAA,IAGA,cAAAG,MAAA,CAAAJ,EAAAnB,OAAA,GACA,MAAAuB,MAAA,CAAAJ,EAAAnB,OAAA,MAGc,KAAAuB,MAAA,CAAAJ,EAAAnB,OAAA,EAAAmB,EAAAlB,UAAA,EAAAkB,GAEd,KAAAI,MAAA,CAAAJ,EAAAnB,OAAA,EAAAmB,CAKA,CACA,CAGA5U,QAAA,EAEA,CAGA,MAAA3U,WAAAV,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,aACA,KAAAohB,MAAA,MAAAvlB,YAAA,WAAAhC,SAAA,GACA,KAAAwnB,OAAA,MAAAxlB,YAAA,YAAAhC,SAAA,GACA,KAAAugB,UAAA,MAAAve,YAAA,iBAAAhC,SAAA,GAEA,CAGA,MAAApJ,WAAAI,GACA2H,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,iBACA,KAAAkY,SAAA,GAEA,CAGA,MAAA7lB,WAAAE,GACAiG,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,QAGA4K,SAAA,KAAAtP,EAAA,KAAAK,gBAAA,GAAAR,aAAA,GAGA,GAAAG,EAAA,KAAAgmB,EAAAhmB,EAAAyO,QAAA,IAGA,GAAAuX,EACA,OAAAA,EAAA1W,OAAA,EACA,OAGA,GAEA,CAGA,MAAAtc,WAAAiE,GACAiG,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,KACA,IACMuK,WAAAA,CAAA,CACN,CAAA3U,EACA0rB,EAAA/W,CAAA,IACAgX,EAAAhX,EAAA9V,MAAA,IAAAwV,MAAAC,IAAA,CAAAK,GAAAjJ,KAAA,CAAA1L,GAAAA,IAAAA,EAAAoU,QAAA,CACA,MAAAuX,OAAA,CAAAA,EACA,KAAAra,IAAA,CAAAqa,EAAA,KAAA1H,eAAA,CAAAyH,GAAA,GAGA1W,SAAA,CACA,YAAA1D,IAAA,CAGAuE,eAAAhQ,CAAA,EACA,QAAA8lB,OAAA,EAEA,MAAA9V,cAAA,CAAAhQ,GACA,IACAhD,SAAAA,CAAA,CACAoE,EAAAA,CAAA,CACQC,EAAAA,CAAA,CACR,MACA,CACQ0D,MAAAA,CAAA,CACR,CAAA/H,EAAAmC,MAAA,CAAiG0S,EAAA,IAAAnc,EAAAsH,EAAA,WAAA5I,GAAAkN,KAAA,CAAAtE,EAAAgD,GAAA,CAAAgS,IAAA,EAAAH,QAAA,EAGjG9M,EAAApC,SAAA,IACAoC,EAAArB,gBAAA,UAAAzQ,GAAAmO,EAAAC,EAAAwQ,EAAAhT,SAAA,MAAAuC,EAAA,KAAAsc,WAAA,CAAA1d,GAAAqB,GAEA,cAAAiN,QAAA,CAAAtV,MAAA,IAEA,IAAAmU,EAAA,IAAA5Y,GAAA,KAAAyI,QAAA,MACAmQ,CAAAA,EAAAmB,QAAA,MAAAA,QAAA,CACAnB,EAAA7J,MAAA,MACA6J,EAAAlE,MAAA,CAAAjJ,EACA,EAGAwC,SAAA,CACA,IACMrJ,OAAAA,CAAA,OAAA6D,QAAA,CAGN7D,GACAA,EAAA4sB,IAAA,MAAA7lB,gBAAA,GAAA5C,SAAA,GACA,CAGAoF,aAAA,CAEA1C,IADA,CAAAhD,QAAA,CAAAgD,GAAA,CACA3F,MAAA,CAAA6I,KAAA,CAAAC,MAAA,WAEA,CAE6U,SAAA6iB,GAAAC,CAAA,CAAAC,CAAA,MAAAC,EAAA1tB,OAAA0tB,IAAA,CAAAF,GAAA,GAAAxtB,OAAA2tB,qBAAA,MAAAC,EAAA5tB,OAAA2tB,qBAAA,CAAAH,GAAAC,GAAAG,CAAAA,EAAAA,EAAAvW,MAAA,UAAAwW,CAAA,SAAA7tB,OAAA8tB,wBAAA,CAAAN,EAAAK,GAAAE,UAAA,IAAAL,EAAA5zB,IAAA,CAAAmZ,KAAA,CAAAya,EAAAE,EAAA,QAAAF,CAAA,CAG7U,SAAAM,GAAAC,CAAA,UAAAhmB,EAAA,EAAAA,EAAA3H,UAAAC,MAAA,CAAA0H,IAAA,KAAAimB,EAAA5tB,IAAA,EAAAA,SAAA,CAAA2H,EAAA,CAAA3H,SAAA,CAAA2H,EAAA,IAAAA,EAAA,EAAAslB,GAAAvtB,OAAAkuB,GAAA,IAAAvjB,OAAA,UAAAmM,CAAA,KAAApX,EAAAwB,CAAA,EAAA+sB,EAAAnX,EAAAoX,CAAA,CAAApX,EAAA,IAAA9W,OAAAmuB,yBAAA,CAAAnuB,OAAAouB,gBAAA,CAAAH,EAAAjuB,OAAAmuB,yBAAA,CAAAD,IAAAX,GAAAvtB,OAAAkuB,IAAAvjB,OAAA,UAAAmM,CAAA,EAAA9W,OAAAquB,cAAA,CAAAJ,EAAAnX,EAAA9W,OAAA8tB,wBAAA,CAAAI,EAAApX,GAAA,UAAAmX,CAAA,CACA,MAAA3vB,WAAAD,GACAiG,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,YACA,KAAAwiB,SAAA,GACA,KAAAC,UAAA,GACA,KAAAC,UAAA,IACA,KAAAC,SAAA,MACA,KAAAC,kBAAA,IACA,KAAAC,aAAA,KAAAC,IAAA,UACA,IAAAC,EAAA,KAAApnB,gBAAA,GAAAR,aAAA,EACA,MAAA+L,IAAA,MAAA2S,eAAA,GACA,KAAAmJ,SAAA,MAAAC,aAAA,CAAAF,EAAA,CAGAnY,SAAA,CACA,YAAA1D,IAAA,CAGA7J,KAAA5B,CAAA,EACA,IACMunB,UAAAA,CAAA,OAGNvnB,GACAA,EAAAiI,SAAA,GAGAsf,EAAAnkB,OAAA,CAAAhJ,GAAA,CACA,IACAmK,KAAAA,CAAA,CACQ1C,OAAAA,CAAA,EAAAzH,EAGR,OAAAmK,GACA,KAAAlP,GAAA4jB,OAAA,CACAjZ,GACAA,EAAAmI,MAAA,CAAAtG,CAAA,IAAAA,CAAA,KAEA,WAGAxM,GAAA0jB,OAAA,CACA/Y,GACAA,EAAAkI,MAAA,CAAArG,CAAA,IAAAA,CAAA,KAEA,WAGAxM,GAAAugB,QAAA,CACA5V,GACAA,EAAAmb,aAAA,CAAAtZ,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAEA,WAGAxM,GAAAygB,OAAA,CACA9V,GACAA,EAAAob,gBAAA,CAAAvZ,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAEA,WAGAxM,GAAAskB,GAAA,CAEA,IAAAzN,EAAAC,EAAAqV,EAAAC,EAAAgG,EAAAC,EAAAC,EAAAC,EAAA,CAAA/lB,EAEAwF,EAAAma,EAAAC,EAAA,EAAAD,EAAAC,CAAA,CAAAna,EAAAka,EAAAC,EAAAA,EAAAD,EAAA,EAGAxhB,IACAA,EAAA8H,SAAA,CAAAoE,EAAAC,GACAnM,EAAA6L,MAAA,CAAA8b,GACA3nB,EAAA0B,KAAA,CAAA2F,EAAAC,GACAtH,EAAAuc,GAAA,KARAiF,EAAAC,EAAAD,EAAAC,CAAA,CAQAgG,EAAAA,EAAAC,EAAAlL,QAAA,EAAAoL,IACA5nB,EAAA0B,KAAA,GAAA2F,EAAA,EAAAC,GACAtH,EAAA6L,MAAA,EAAA8b,GACA3nB,EAAA8H,SAAA,EAAAoE,EAAA,CAAAC,IAGA,WAGA9W,GAAAwkB,UAAA,CACA7Z,GACAA,EAAAoI,SAAA,EAIK,CACL,GAGA4H,eAAAhQ,CAAA,EACA,KAAA6nB,WAAA,CAAA7nB,GACAA,EAAA2P,IAAA,GACA,IAAAmY,EAAA,KAAAxkB,MAAA,CAAAsG,QAAA,oBAAAtM,SAAA,GACAuU,EAAA,KAAA2L,WAAA,GACA,CACM0J,UAAAA,CAAA,CACN,MAAAhN,EAAAla,EAAAiX,SAAA,CAGA,cAAA6Q,GACA9nB,EAAAiI,SAAA,GAGAif,EAAA9jB,OAAA,EAAAya,EAAAnd,IAAA,CACA,IACA4S,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACAwU,SAAAA,CAAA,CACQtc,KAAAuc,CAAA,CACR,CAAAnK,EACA7d,EAAA2P,IAAA,GACA3P,EAAA8H,SAAA,CAAAwL,EAAAlS,CAAA,CAAAkS,EAAAjS,CAAA,EAAArB,EAAA6L,MAAA,CAAAkc,GAGA/nB,EAAAiX,SAAA,EACAjX,EAAAkf,QAAA,CAAA8I,EAAA,KAGAhoB,EAAAiG,WAAA,EACAjG,EAAAmf,UAAA,CAAA6I,EAAA,KAEAhoB,EAAAkQ,OAAA,GAGA,cAAA4X,IACA,IAAApnB,GACAV,EAAAkI,MAAA,CAAAoL,EAAAlS,CAAA,CAAAkS,EAAAjS,CAAA,CAAAwQ,EAAA,GAGQ7R,EAAAmI,MAAA,CAAAoL,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,CAAAwQ,EAAA,GAYH,GAGL,cAAAiW,IACA9nB,EAAAwX,SAAA,CAAA3F,EAAA,GACA7R,EAAAiG,WAAA,CAAAiU,EACAla,EAAAoa,MAAA,GACApa,EAAAoI,SAAA,IAGApI,EAAAkQ,OAAA,GAGA+X,oBAAA,CACA,IAAAC,EAAAnvB,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,MACA,YAAAouB,kBAAA,CAAAe,EAAA,IAGAC,qBAAAnoB,CAAA,CAAAooB,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAA3b,CAAA,CAAA4b,CAAA,EACA,IAAAxQ,EAAAsQ,EAAAG,EAAA,KAAAjL,WAAA,CAAA1d,EAAA8M,GAGA,MAAAA,GAAAsb,YAAAA,GAAAC,EAAAC,GACAK,CAAAA,GAAA,CAAAL,EAAAD,CAAA,EAAAE,CAAA,EAGAG,EAAA,IACAxQ,CAAAA,GAAA,KAAA+P,kBAAA,CAAAS,EAAA,EAGA,IAAAE,EAAA,KAAA5B,UAAA,IACA1T,EAAA,KAAAuV,yBAAA,CAAA3Q,EAAA0Q,EAAA,GACArV,EAAA,KAAAsV,yBAAA,CAAA3Q,EAAAyQ,EAAAC,EAAA,GACAE,EAAA,CACAxV,GAAAA,EACAC,GAAAA,CACA,EAAAwU,EAAAzU,GAAAC,EAAA9X,KAAAuG,KAAA,CAAAuR,EAAAlS,CAAA,CAAAiS,EAAAjS,CAAA,CAAAkS,EAAAnS,CAAA,CAAAkS,EAAAlS,CAAA,IAGA,GAAAqnB,EAAA,CACA,IAAAM,EAAAttB,KAAA+Q,GAAA,CAAA/Q,KAAAgE,EAAA,GAAAsoB,GAAAU,EACAO,EAAAvtB,KAAA+Q,GAAA,EAAAub,GAAAU,CACAK,CAAAA,EAAAxV,EAAA,CAAAmT,GAAAA,GAAA,GAAAnT,GAAA,IACAlS,EAAAkS,EAAAlS,CAAA,CAAA2nB,EACO1nB,EAAAiS,EAAAjS,CAAA,CAAA2nB,CACP,GACAF,EAAAvV,EAAA,CAAAkT,GAAAA,GAAA,GAAAlT,GAAA,IACAnS,EAAAmS,EAAAnS,CAAA,CAAA2nB,EACO1nB,EAAAkS,EAAAlS,CAAA,CAAA2nB,CACP,UAGA9Q,GAAAyQ,EACA,CACAzQ,OAAAA,EACA4Q,QAAAA,EACAf,SAAAA,CACA,EAGArK,YAAA1d,CAAA,CAAAyL,CAAA,EACA,IACM2b,cAAAA,CAAA,CACN,MAAAlH,EAAAzU,GAAA,KAAA0D,OAAA,GAGA,GAAAiY,EAAA6B,GAAA,CAAA/I,GACA,OAAAkH,EAAA8B,GAAA,CAAAhJ,EAAA,CAGA,IAAAF,EAAA,KAAAC,iBAAA,CAAAjgB,EAAAkgB,GAEI,OADJkH,EAAAlV,GAAA,CAAAgO,EAAAF,GACIA,CACJ,CAKA6H,YAAA7nB,CAAA,EACA,SAAAknB,SAAA,EAIA,IAAAzI,EAAA,KAAAtP,OAAA,GACAga,EAAA1K,EAAArhB,KAAA,KACAmrB,EAAA9J,EAAArhB,KAAA,MAAApE,MAAA,GACAgmB,EAAA,KAAA1b,MAAA,CAAAlD,YAAA,OAAAhD,KAAA,GAAAzC,GAAA,CAAAmL,GAAAA,EAAAjH,SAAA,OACA4pB,EAAA,KAAAnlB,MAAA,CAAAlD,YAAA,OAAAvB,SAAA,MACAupB,EAAA,KAAA9kB,MAAA,CAAAsG,QAAA,gBAAAtM,SAAA,UACA8rB,EAAA,KAAAxf,QAAA,mBACAyf,EAAA,KAAA/lB,MAAA,CAAAsG,QAAA,mBAAA0f,EAAA,CAGA,CAAAF,EAAA5rB,QAAA,IAAA4rB,YAAAA,EAAAlrB,QAAA,GAEAkrB,EAAA5rB,QAAA,IACA4rB,YAAAA,EAAAlrB,QAAA,IAAAkrB,UAAAA,EAAAlrB,QAAA,IACAorB,CAAAA,EAAAF,EAAAvqB,SAAA,IAHMyqB,EAAAD,EAAAxqB,SAAA,GAQN,IAAAsoB,EAAA,GACAoC,EAAA9K,EAAAzlB,MAAA,MAAAmuB,kBAAA,CAAAA,EAGA,QAAAzmB,EAAA,EAAAA,EAAA6oB,EAAA7oB,IACAymB,EAAA50B,IAAA,UAAAysB,CAAA,CAAAte,EAAA,CAAAse,CAAA,CAAAte,EAAA,CAAA4oB,CAAA,EAGA,IAAAE,EAAArC,EAAA3d,MAAA,EAAAigB,EAAAC,EAAAhpB,IAAAA,IAAAA,EAAA,EAAA+oB,EAAAC,GAAA,KACA3C,EAAA,KAAArJ,WAAA,CAAA1d,GACAqoB,EAAA5sB,KAAA6D,GAAA,CAAAynB,EAAAyC,EAAA,EACA,MAAAzC,SAAA,CAAAA,EACA,KAAAC,UAAA,MAAAxJ,WAAA,GACA,KAAA0J,SAAA,IACA,IAAAoB,EAAA,KAAAqB,aAAA,GACAC,EAAA,KAAAhgB,QAAA,gBAAAxL,SAAA,IAAAkqB,EAAApQ,EAAA,EAGAkQ,CAAAA,WAAAA,GAAAA,WAAAA,CAAA,GACAlQ,CAAAA,EAAA,CAAAmQ,EAAA,GAGAD,CAAAA,QAAAA,GAAAA,UAAAA,CAAA,GACAlQ,CAAAA,EAAA,CAAAmQ,CAAA,EAGAnQ,GAAA0R,EACAT,EAAA/lB,OAAA,EAAAwa,EAAAld,IAAA,CAEA,IACAwX,OAAA2R,CAAA,CACAf,QAAAA,CAAA,CACQf,SAAAA,CAAA,CACR,MAAAI,oBAAA,CAAAnoB,EAAAooB,EAAAC,EAAAC,EAAAC,EAAArQ,EAAAuQ,EAAA7K,EAAAld,GAAAwX,EAAA2R,EAGAf,EAAAxV,EAAA,EAAAwV,EAAAvV,EAAA,EAmBA,KAAA2T,SAAA,CAAA30B,IAAA,EAGAkZ,KAAA0d,CAAA,CAAAzoB,EAAA,CACA4S,GAAAwV,EAAAxV,EAAA,CACAC,GAAAuV,EAAAvV,EAAA,CACOwU,SAAAA,CACF,EACL,GArFA,CAwFAP,cAAA5lB,CAAA,EAGA,GAH0B,KAAAqlB,UAAA,IAG1B,CAAArlB,EACA,SAGA,IAAAkoB,EAAA,GACA,CACMhR,WAAAA,CAAA,CACN,CAAAlX,EAGA,IAHwBkX,EAAA5D,KAAA,GAGxB,CAAA4D,EAAA3D,KAAA,KACA,IACQN,QAAAA,CAAA,CACR,CAAAiE,EACAiR,EAAAlV,EAAAA,EAAAzT,CAAA,GACA4oB,EAAAnV,EAAAA,EAAAxT,CAAA,GACAyT,EAAAgE,EAAA1D,IAAA,GACA6U,EAAAnV,EAAAvQ,IAAA,CAAA1C,EAAA,GAGA,OAAAiT,EAAAvQ,IAAA,EACA,KAAAlP,GAAA0jB,OAAA,CACA,KAAAC,KAAA,CAAAF,EAAAjX,GAAA,WAGAxM,GAAA4jB,OAAA,CACAgR,EAAA,KAAA/Q,KAAA,CAAAJ,EAAAjX,GAAA,WAGAxM,GAAA8jB,aAAA,CACA8Q,EAAA,KAAA7Q,KAAA,CAAAN,EAAAjX,GAAA,WAGAxM,GAAAgkB,YAAA,CACA4Q,EAAA,KAAA3Q,KAAA,CAAAR,EAAAjX,GAAA,WAGAxM,GAAAugB,QAAA,CACA,KAAA2D,KAAA,CAAAT,EAAAjX,GAAA,WAGAxM,GAAAwgB,eAAA,CACAoU,EAAA,KAAAzQ,KAAA,CAAAV,EAAAjX,GAAA,WAGAxM,GAAAygB,OAAA,CACA,KAAA2D,KAAA,CAAAX,EAAAjX,GAAA,WAGAxM,GAAA0gB,cAAA,CACAkU,EAAA,KAAAvQ,KAAA,CAAAZ,EAAAjX,GAAA,WAGAxM,GAAAskB,GAAA,CACA9X,EAAA,KAAA+X,KAAA,CAAAd,GAAA,WAGAzjB,GAAAwkB,UAAA,CACAzkB,GAAA0kB,KAAA,CAAAhB,EACA,CAGAhE,EAAAvQ,IAAA,GAAAlP,GAAAwkB,UAAA,CACAiQ,EAAAv3B,IAAA,EACAgS,KAAA0lB,EACApoB,OAAAA,EACAe,MAAA,CACAxB,EAAA2oB,EACW1oB,EAAA2oB,CACX,EACS/C,WAAA,KAAAiD,UAAA,CAAAH,EAAAC,EAAAC,EAAApoB,EACD,GAERioB,EAAAv3B,IAAA,EACAgS,KAAAlP,GAAAwkB,UAAA,CACAhY,OAAA,GACSolB,WAAA,CACT,EACA,CAGA,OAAA6C,CAAA,CAGA9Q,MAAAF,CAAA,CAAAjX,CAAA,EACA,IACAT,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAjM,GAAA4jB,KAAA,CAAAF,GAAAvX,KAAA,CACAM,EAAAtP,IAAA,CAAA6O,EAAAC,EAAA,CAGA6X,MAAAJ,CAAA,CAAAjX,CAAA,EACA,IACAT,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAjM,GAAA8jB,KAAA,CAAAJ,GAAAvX,KAAA,CAEA,OADAM,EAAAtP,IAAA,CAAA6O,EAAAC,GACAhM,GAAA4jB,OAAA,CAGAG,MAAAN,CAAA,CAAAjX,CAAA,EACA,IACAT,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAjM,GAAAgkB,KAAA,CAAAN,GAAAvX,KAAA,CAEA,OADAM,EAAAtP,IAAA,CAAA6O,EAAAC,GACAhM,GAAA4jB,OAAA,CAGAK,MAAAR,CAAA,CAAAjX,CAAA,EACA,IACAT,EAAAA,CAAA,CACMC,EAAAA,CAAA,CACN,CAAAjM,GAAAkkB,KAAA,CAAAR,GAAAvX,KAAA,CAEA,OADAM,EAAAtP,IAAA,CAAA6O,EAAAC,GACAhM,GAAA4jB,OAAA,CAGAM,MAAAT,CAAA,CAAAjX,CAAA,EACA,IACAN,MAAAA,CAAA,CACA0Z,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAmkB,KAAA,CAAAT,GACAjX,EAAAtP,IAAA,CAAAgP,EAAAH,CAAA,CAAAG,EAAAF,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAGAmY,MAAAV,CAAA,CAAAjX,CAAA,EACA,IACAN,MAAAA,CAAA,CACA0Z,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAokB,KAAA,CAAAV,GAEA,OADAjX,EAAAtP,IAAA,CAAAgP,EAAAH,CAAA,CAAAG,EAAAF,CAAA,CAAA4Z,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EACAhM,GAAAugB,QAAA,CAGA6D,MAAAX,CAAA,CAAAjX,CAAA,EACA,IACAoZ,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAqkB,KAAA,CAAAX,GACAjX,EAAAtP,IAAA,CAAA0oB,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EAGAqY,MAAAZ,CAAA,CAAAjX,CAAA,EACA,IACAoZ,aAAAA,CAAA,CACMC,aAAAA,CAAA,CACN,CAAA9lB,GAAAskB,KAAA,CAAAZ,GAEA,OADAjX,EAAAtP,IAAA,CAAA0oB,EAAA7Z,CAAA,CAAA6Z,EAAA5Z,CAAA,CAAA6Z,EAAA9Z,CAAA,CAAA8Z,EAAA7Z,CAAA,EACAhM,GAAAygB,OAAA,CAGA8D,MAAAd,CAAA,EACA,IACAuC,GAAAA,CAAA,CACAC,GAAAA,CAAA,CACAG,UAAAA,CAAA,CACAC,cAAAA,CAAA,CACAK,MAAAA,CAAA,CACAC,GAAAA,CAAA,CACMC,GAAAA,CAAA,EAAA7mB,GAAAwkB,KAAA,CAAAd,GAWN,OARA,IAAA2C,GAAAQ,EAAA,GACAA,CAAAA,GAAA,EAAAxgB,KAAAgE,EAAA,EAGA,IAAAgc,GAAAQ,EAAA,GACAA,CAAAA,GAAA,EAAAxgB,KAAAgE,EAAA,EAGA,CAAAsc,EAAA3a,CAAA,CAAA2a,EAAA1a,CAAA,CAAAga,EAAAC,EAAAU,EAAAC,EAAAP,EAAAD,EAAA,CAGAyO,WAAA9oB,CAAA,CAAAC,CAAA,CAAA8oB,CAAA,CAAAtoB,CAAA,EACA,IAAArB,EAAA,EACA+S,EAAA,KACAC,EAAA,KAAA1W,EAAA,EAGA,OAAAqtB,GACA,KAAA90B,GAAA4jB,OAAA,aAAAmR,aAAA,CAAAhpB,EAAAC,EAAAQ,CAAA,IAAAA,CAAA,IAGA,MAAAxM,GAAAugB,QAAA,CAKA,IAAA9Y,EAAA,IAHA0D,EAAA,EAAA+S,EAAA,KAAA8W,qBAAA,GAAAjpB,EAAAC,EAAAQ,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAGA/E,GAAA,EAAAA,GAAA,IACA0W,EAAA,KAAA6W,qBAAA,CAAAvtB,EAAAsE,EAAAC,EAAAQ,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACArB,GAAA,KAAA4pB,aAAA,CAAA7W,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,CAAAmS,EAAApS,CAAA,CAAAoS,EAAAnS,CAAA,EACAkS,EAAAC,EAEA,OAAAhT,CAGA,MAAAnL,GAAAygB,OAAA,CAKA,IAAAhZ,EAAA,IAHA0D,EAAA,EAAA+S,EAAA,KAAA+W,yBAAA,GAAAlpB,EAAAC,EAAAQ,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAGA/E,GAAA,EAAAA,GAAA,IACA0W,EAAA,KAAA8W,yBAAA,CAAAxtB,EAAAsE,EAAAC,EAAAQ,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACArB,GAAA,KAAA4pB,aAAA,CAAA7W,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,CAAAmS,EAAApS,CAAA,CAAAoS,EAAAnS,CAAA,EACAkS,EAAAC,EAEA,OAAAhT,CAGA,MAAAnL,GAAAskB,GAAA,CAGAnZ,EAAA,EAAiC,IAAAoC,EAAAf,CAAA,IAEC6lB,EAAA7lB,CAAA,IAGlC0oB,EAAA1oB,CAAA,IAAA6lB,EAAqC8C,EAAA/uB,KAAAgE,EAAA,KAUrC,GAPAhE,KAAAgvB,GAAA,CAAA7nB,EAAA2nB,GAAAC,GACYA,CAAAA,EAAA/uB,KAAAgvB,GAAA,CAAA7nB,EAAA2nB,EAAA,EAGZhX,EAAA,KAAAmX,uBAAA,CAAA7oB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAe,EAAA,GAGA8kB,EAAA,EAEA,IAAA5qB,EAAA8F,EAAA4nB,EAAA1tB,EAAAytB,EAAAztB,GAAA0tB,EACAhX,EAAA,KAAAkX,uBAAA,CAAA7oB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAA/E,EAAA,GACA0D,GAAA,KAAA4pB,aAAA,CAAA7W,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,CAAAmS,EAAApS,CAAA,CAAAoS,EAAAnS,CAAA,EACAkS,EAAAC,OAIA,IAAA1W,EAAA8F,EAAA4nB,EAAA1tB,EAAAytB,EAAAztB,GAAA0tB,EACAhX,EAAA,KAAAkX,uBAAA,CAAA7oB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAA/E,EAAA,GACA0D,GAAA,KAAA4pB,aAAA,CAAA7W,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,CAAAmS,EAAApS,CAAA,CAAAoS,EAAAnS,CAAA,EACAkS,EAAAC,CACA,CAKA,OAFAA,EAAA,KAAAkX,uBAAA,CAAA7oB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAA0oB,EAAA,GACA/pB,GAAA,KAAA4pB,aAAA,CAAA7W,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,CAAAmS,EAAApS,CAAA,CAAAoS,EAAAnS,CAAA,CAEA,CAGA,SAGAspB,eAAAC,CAAA,CAAA1W,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAwW,EAAA9xB,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAAmb,CAAA,CACA4W,EAAA/xB,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAAob,CAAA,CACA4W,EAAA,CAAA1W,EAAAF,CAAA,EAAAC,CAAAA,EAAAF,EAAAhf,CAAA,EAAAmO,EAAA5H,KAAAiB,IAAA,CAAAkuB,EAAAA,EAAA,GAAAG,EAAAA,CAAAA,GAGA3W,EAAAF,GACA7Q,CAAAA,GAAA,IAGA,IAAA2nB,EAAAD,EAAA1nB,EAAA4nB,EAAA,KAGA,GAAA7W,IAAAF,EAEA+W,EAAA,CACA7pB,EAAAypB,EACAxpB,EAAAypB,EAAAE,CACM,OACN,IAAAF,EAAA3W,CAAA,EAAA0W,CAAAA,EAAA3W,EAAAhf,CAAA,IAAA61B,EACAE,EAAA,CACA7pB,EAAAypB,EAAAxnB,EACAhC,EAAAypB,EAAAE,CACM,MACN,CACA,IAAAE,EAAA,EACAC,EAAA,EAAA3qB,EAAA,KAAA4pB,aAAA,CAAAlW,EAAAC,EAAAC,EAAAC,GAGA,GAAA7T,EAAAtL,EACA,YAGA,IAAA0H,EAAA,CAAAiuB,EAAA3W,CAAA,EAAAE,CAAAA,EAAAF,CAAA,GAAA4W,EAAA3W,CAAA,EAAAE,CAAAA,EAAAF,CAAA,EACAvX,GAAA4D,EAAAA,EACA0qB,EAAAhX,EAAAtX,EAAAwX,CAAAA,EAAAF,CAAA,EACAiX,EAAAhX,EAAAvX,EAAAyX,CAAAA,EAAAF,CAAA,EACA,IAAAiX,EAAA,KAAAhB,aAAA,CAAAS,EAAAC,EAAAI,EAAAC,GACAE,EAAA5vB,KAAAiB,IAAA,CAAAkuB,EAAAA,EAAAQ,EAAAA,GAAA/nB,EAAA5H,KAAAiB,IAAA,CAAA2uB,EAAAA,EAAA,GAAAN,EAAAA,CAAAA,GAGA3W,EAAAF,GACA7Q,CAAAA,GAAA,IAGA2nB,EAAAD,EAAA1nB,EACA4nB,EAAA,CACA7pB,EAAA8pB,EAAA7nB,EACAhC,EAAA8pB,EAAAH,CACA,SAGAC,CAAA,CAGAK,eAAAC,CAAA,EACA,IAAAC,EAAA,KAAA7B,aAAA,GACA8B,EAAA,EAAAxG,EAAA,KAGA,GAAAsG,EAAA,SAAAA,EAAA,KAAAC,EACA,YAGA,IACMjE,UAAAA,CAAA,OAGN,QAAAzS,KAAAyS,EAAA,CACA,GAAAzS,GAAAA,CAAAA,EAAAmS,UAAA,OAAAwE,EAAA3W,EAAAmS,UAAA,MAAAsE,CAAA,GACAE,GAAA3W,EAAAmS,UAAA,CACA,aAGA1qB,EAAAgvB,EAAAE,EAAAC,EAAA,EAGA,OAAA5W,EAAAvQ,IAAA,EACA,KAAAlP,GAAA4jB,OAAA,CACAgM,EAAA,KAAA0F,cAAA,CAAApuB,EAAAuY,EAAAlS,KAAA,CAAAxB,CAAA,CAAA0T,EAAAlS,KAAA,CAAAvB,CAAA,CAAAyT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAlS,KAAA,CAAAxB,CAAA,CAAA0T,EAAAlS,KAAA,CAAAvB,CAAA,aAGAhM,GAAAskB,GAAA,CAC2C,IAAA/W,EAAAkS,EAAAjT,MAAA,IAEC6lB,EAAA5S,EAAAjT,MAAA,IAG5C0oB,EAAAzV,EAAAjT,MAAA,IAAA6lB,EAGA,GAHAgE,EAAA9oB,EAAArG,EAAAuY,EAAAmS,UAAA,CAAAS,EAGAA,EAAA,GAAAgE,EAAAnB,GAAA7C,GAAA,GAAAgE,EAAAnB,EACA,MAGAtF,EAAA,KAAAyF,uBAAA,CAAA5V,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAA6pB,EAAA5W,EAAAjT,MAAA,KACA,WAGAxM,GAAAugB,QAAA,CAAA8V,CAAAA,EAAAnvB,EAAAuY,EAAAmS,UAAA,EAGA,GACAyE,CAAAA,EAAA,GAGAzG,EAAA,KAAAoF,qBAAA,CAAAqB,EAAA5W,EAAAlS,KAAA,CAAAxB,CAAA,CAAA0T,EAAAlS,KAAA,CAAAvB,CAAA,CAAAyT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,gBAGAxM,GAAAygB,OAAA,CAAA4V,CAAAA,EAAAnvB,EAAAuY,EAAAmS,UAAA,EAGA,GACAyE,CAAAA,EAAA,GAGAzG,EAAA,KAAAqF,yBAAA,CAAAoB,EAAA5W,EAAAlS,KAAA,CAAAxB,CAAA,CAAA0T,EAAAlS,KAAA,CAAAvB,CAAA,CAAAyT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IAAAiT,EAAAjT,MAAA,IACA,CAGA,GAAAojB,EACA,OAAAA,CAAA,CAGA,MAGA,YAGAmF,cAAAzX,CAAA,CAAAG,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OAAAvX,KAAAiB,IAAA,EAAAqW,EAAAJ,CAAA,EAAAI,CAAAA,EAAAJ,CAAA,GAAAK,EAAAF,CAAA,EAAAE,CAAAA,EAAAF,CAAA,GAGA6W,eAAA,CAKA,OAJA,UAAA1C,UAAA,EACA,MAAAA,UAAA,MAAAM,SAAA,CAAA/d,MAAA,EAAAxQ,EAAA8b,IAAAA,EAAAmS,UAAA,GAAAjuB,EAAA8b,EAAAmS,UAAA,CAAAjuB,CAAA,KAGA,KAAAiuB,UAAA,CAGAoD,sBAAAsB,CAAA,CAAAzX,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAqX,CAAA,CAAAC,CAAA,EACA,IAAAzqB,EAAAwqB,EAAA14B,EAAAy4B,GAAArX,EAAAnhB,EAAAw4B,GAAAvX,EAAAhhB,EAAAu4B,GAAAzX,EAAA7gB,EAAAs4B,GACAtqB,EAAAwqB,EAAA34B,EAAAy4B,GAAApX,EAAAphB,EAAAw4B,GAAAtX,EAAAjhB,EAAAu4B,GAAAxX,EAAA9gB,EAAAs4B,GACA,OACAvqB,EAAAA,EACAC,EAAAA,CACA,EAGAipB,0BAAAqB,CAAA,CAAAzX,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,IAAAnT,EAAAkT,EAliKAxX,CAAAA,EAkiKA6uB,CAliKA7uB,EAkiKAsX,EAAAxe,EAAA+1B,GAAAzX,EAAAre,EAAA81B,GACAtqB,EAAAkT,EAniKAzX,CAAAA,EAmiKA6uB,CAniKA7uB,EAmiKAuX,EAAAze,EAAA+1B,GAAAxX,EAAAte,EAAA81B,GACA,OACAvqB,EAAAA,EACAC,EAAAA,CACA,EAGAqpB,wBAAAxe,CAAA,CAAAC,CAAA,CAAAqV,CAAA,CAAAC,CAAA,CAAAgG,CAAA,CAAAE,CAAA,EACA,IAAAmE,EAAArwB,KAAA+Q,GAAA,CAAAmb,GACAoE,EAAAtwB,KAAAgR,GAAA,CAAAkb,GACAsD,EAAA,CACA7pB,EAAAogB,EAAA/lB,KAAA+Q,GAAA,CAAAib,GACApmB,EAAAogB,EAAAhmB,KAAAgR,GAAA,CAAAgb,EACA,EACA,OACArmB,EAAA8K,EAAA+e,CAAAA,EAAA7pB,CAAA,CAAA0qB,EAAAb,EAAA5pB,CAAA,CAAA0qB,CAAA,EACA1qB,EAAA8K,EAAA8e,CAAAA,EAAA7pB,CAAA,CAAA2qB,EAAAd,EAAA5pB,CAAA,CAAAyqB,CAAA,CACI,EAIJE,sBAAAC,CAAA,CAAAC,CAAA,EACA,IAAAV,EAAA,KAAA7B,aAAA,GAA4CwC,EAAAD,GAAA,IAE5CE,EAAAH,GAAAT,EAAA,IAGA,SAAAa,gBAAA,OAAAA,gBAAA,CAAAD,IAAA,GAAAA,GAAA,KAAAC,gBAAA,CAAAF,SAAA,GAAAA,EAAA,CAEA,KAAAE,gBAAA,EACAD,KAAAA,EACAD,UAAAA,EACAtqB,OAAS,IAKT,QAHAga,EAAA,EAGAD,EAAA,EAAAA,GAAA4P,EAAA5P,GAAAuQ,EAAA,CACA,IAAA7Y,EAAA,KAAAgY,cAAA,CAAA1P,GAAArI,EAAA,KAAA+X,cAAA,CAAA1P,EAAAuQ,GAGA7Y,GAAAC,GAMAsI,CAHAA,GAAA,KAAAuO,aAAA,CAAA9W,EAAAlS,CAAA,CAAAkS,EAAAjS,CAAA,CAAAkS,EAAAnS,CAAA,CAAAmS,EAAAlS,CAAA,IAGA+qB,IACA,KAAAC,gBAAA,CAAAxqB,MAAA,CAAAtP,IAAA,EACA6O,EAAAkS,EAAAlS,CAAA,CACAC,EAAAiS,EAAAjS,CAAA,CACWkqB,SAAA3P,CACX,GACAC,GAAAuQ,EAEA,CACA,EAGAvD,0BAAAyD,CAAA,CAAAF,CAAA,CAAAD,CAAA,EAGA,GAHA,KAAAH,qBAAA,CAAAI,EAAAD,GAGAG,EAAA,GAAAA,EAAA,KAAA3C,aAAA,QACA,YAGA,IAAAzB,EAAAzsB,KAAAC,KAAA,CAAA4wB,EAAA,KAAA3C,aAAA,SAAA0C,gBAAA,CAAAxqB,MAAA,CAAA7I,MAAA,KACA,YAAAqzB,gBAAA,CAAAxqB,MAAA,CAAAqmB,EAAA,OAEA,CAGA,IAAAqE,GAAA,4EACA,OAAA73B,WAAAsB,GACA+G,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,SACA,KAAAioB,MAAA,QAAAC,EAAA,KAAAvsB,gBAAA,GAAA5C,SAAA,GAGA,IAAAmvB,EACA,OAGA,IAAAC,EAAAD,EAAAzuB,QAAA,sCAAAjD,IAAA,CAAA0xB,GAAAzvB,EAAA2vB,MAAA,CAAAp6B,IAAA,OAGAm6B,EAGA,KAAAE,OAAA,CAAAH,GAFM,KAAAnyB,SAAA,CAAAmyB,GAKN,KAAAC,KAAA,CAAAA,CAAA,CAGApyB,UAAAmyB,CAAA,MAAA3hB,EAAA,KAGA,SAAA5S,EAAAyB,CAAA,cACA,IACA,IAAAkzB,EAAA,MAAA/hB,EAAA9N,QAAA,CAAAtD,WAAA,CAAA+yB,EACQ3hB,CAAAA,EAAA+hB,KAAA,CAAAA,CACR,OAAAzhB,EAAA,CACA0hB,QAAAC,KAAA,+BAAAjjB,MAAA,CAAA2iB,EAAA,MAAArhB,EAAA,CAGKN,EAAA0hB,MAAA,GACL,KAGAI,QAAAH,CAAA,MAAAjhB,EAAA,KAGA,SAAAtT,EAAAyB,CAAA,kBAAAe,EAAA6xB,GAAArxB,IAAA,CAAAuxB,GAGA,GAAA/xB,EAAA,KAAA6S,EAAA7S,CAAA,IAGA,WAAAA,CAAA,IACU8Q,EAAAqhB,KAAA,CAAAG,KAAAzf,GAEV/B,EAAAqhB,KAAA,CAAAI,mBAAA1f,EAEA,MACA,IAEA,IAAA2f,EAAA,KAAArzB,CADA,MAAA2R,EAAAxO,QAAA,CAAAlD,KAAA,CAAA2yB,EAAA,EACAhhB,IAAA,EACUD,CAAAA,EAAAqhB,KAAA,CAAAK,CACV,OAAA9hB,EAAA,CACA0hB,QAAAC,KAAA,+BAAAjjB,MAAA,CAAA2iB,EAAA,MAAArhB,EACA,GAGKohB,MAAA,GACL,KAGAxc,eAAAhQ,CAAA,EACA,IACAhD,SAAAA,CAAA,CACA6vB,MAAAA,CAAA,CACML,OAAAA,CAAA,CACN,MACAprB,EAAA,KAAAhB,YAAA,MAAAvB,SAAA,MACAwC,EAAA,KAAAjB,YAAA,MAAAvB,SAAA,MACAtF,EAAA,KAAAqQ,QAAA,UAAA/K,SAAA,MAAArF,EAAA,KAAAoQ,QAAA,WAAA/K,SAAA,MAGA,MAAAguB,GAAAtzB,GAAAC,GAOA,GAHAwG,EAAA2P,IAAA,GAAA3P,EAAA8H,SAAA,CAAA1G,EAAAC,GAGA,KAAAqrB,KAAA,EACA,IAAAS,EAAAnwB,EAAAowB,KAAA,CAAAC,UAAA,CAAArtB,EAAA,KAAA6sB,KAAA,EACAxzB,YAAA,GACAD,gBAAA,GACAsP,iBAAA,GACAC,YAAA,GACAI,QAAA,EACAC,QAAA,EACAH,WAAAtP,EACOuP,YAAAtP,CACP,EACA2zB,CAAAA,EAAAnwB,QAAA,CAAAswB,eAAA,CAAAhqB,MAAA,MACM6pB,EAAAlkB,MAAA,EACN,MACA,IAAAskB,EAAA,KAAAV,KAAA,CACA7vB,EAAAqJ,UAAA,EACArG,IAAAA,EACAsG,YAAA,KAAAlG,YAAA,wBAAA9C,SAAA,GACA/D,MAAAA,EACAgN,aAAAgnB,EAAAh0B,KAAA,CACAC,OAAAA,EACOgN,cAAA+mB,EAAA/zB,MAAA,GAGP,KAAAgzB,MAAA,EACA,UAAAe,EAAAC,QAAA,EAAAD,EAAAC,QAAA,GACAxtB,EAAAytB,SAAA,CAAAF,EAAA,IAEA,GAGArd,OAAA,GArCA,CAwCA6J,gBAAA,CACA,IAAA3Y,EAAA,KAAAhB,YAAA,MAAAvB,SAAA,MACAwC,EAAA,KAAAjB,YAAA,MAAAvB,SAAA,MACAtF,EAAA,KAAAqQ,QAAA,UAAA/K,SAAA,MACArF,EAAA,KAAAoQ,QAAA,WAAA/K,SAAA,MACA,WAAA5L,GAAAmO,EAAAC,EAAAD,EAAA7H,EAAA8H,EAAA7H,EAAA,CAEA,CAGA,MAAA7C,WAAAX,GACA+G,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,UAGA0E,OAAAnD,CAAA,GAEA,CAGA,MAAA3P,GACA4G,YAAAC,CAAA,EACA,KAAAA,QAAA,CAAAA,EACA,KAAAwvB,MAAA,IACAxvB,EAAA0wB,KAAA,CAAAn7B,IAAA,OAGAyY,KAAAwG,CAAA,CAAAzX,CAAA,MAAA+Q,EAAA,KAGA,SAAA5S,EAAAyB,CAAA,cACA,IACA,IACUqD,SAAAA,CAAA,CACV,CAAA8N,EAEA4iB,EAAAC,CADA,MAAA3wB,EAAAowB,KAAA,CAAAliB,MAAA,CAAAF,IAAA,CAAAjR,EAAA,EACAuR,oBAAA,SACAkD,MAAAC,IAAA,CAAAif,GAAAtqB,OAAA,CAAAwqB,GAAA,CACA,IAAA5b,EAAAhV,EAAAqT,aAAA,CAAAud,EACS5wB,CAAAA,EAAA2C,WAAA,CAAA6R,EAAA,CAAAQ,CACD,EACR,OAAA5G,EAAA,CACA0hB,QAAAC,KAAA,8BAAAjjB,MAAA,CAAA/P,EAAA,MAAAqR,EAAA,CAGKN,EAAA0hB,MAAA,GACL,KAEA,CAGA,MAAA91B,WAAA9C,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,SAMAspB,EALArf,MAAAC,IAAA,CAAAtU,EAAA2U,UAAA,EACAnU,GAAA,CAAAmL,GAAAA,EAAAyF,WAAwB,EAAA/O,IAAA,KAAAhC,OAAA,sEACxBA,OAAA,oBAEA4C,KAAA,MACAgG,OAAA,CAAA0C,GAAA,KAAA3H,EAAA2H,EAAAvI,IAAA,GAGA,GAAAY,GAIA,IAAA2vB,EAAA3vB,EAAAf,KAAA,MACA2wB,EAAAD,CAAA,IAAA1wB,KAAA,CAAyC,KACzC4wB,EAAAF,CAAA,IAAA1wB,KAAA,MACA2wB,EAAA3qB,OAAA,CAAA0C,GAAA,KAAAmoB,EAAAnoB,EAAAvI,IAAA,GAGA,GAAA0wB,GAIA,IAAAC,EAAAlxB,EAAAkR,MAAA,CAAA+f,EAAA,KAaA,GAZAD,EAAA5qB,OAAA,CAAA+qB,GAAA,CACA,IAAArJ,EAAAqJ,EAAA7c,OAAA,MACAxW,EAAAqzB,EAAAC,MAAA,GAAAtJ,GAAAvnB,IAAA,GAAAN,EAAAkxB,EAAAC,MAAA,CAAAtJ,EAAA,EAAAqJ,EAAAn1B,MAAA,CAAA8rB,GAAAvnB,IAAA,GAGAzC,GAAAmC,GACAixB,CAAAA,CAAA,CAAApzB,EAAA,KAAApF,EAAAsH,EAAAlC,EAAAmC,EAAA,CAEA,GACAD,EAAAkR,MAAA,CAAA+f,EAAA,CAAAC,EAAAlxB,EAAAmR,iBAAA,CAAA8f,EAAA,CAAA12B,EAAA02B,GAGAA,eAAAA,EAAA,CAEA,IAAAzc,EAAA0c,CAAA,gBAAA5wB,SAAA,GAAA9C,OAAA,YAEA6zB,EADAC,GAAA,CAAAhxB,SAAA,GAAAF,KAAA,MACAgG,OAAA,CAAAkrB,GAAA,CACA,GAAAA,EAAAhd,OAAA,yBAAAvX,EAAArC,EAAA42B,GAGAv0B,GACA,IAAA5D,GAAA6G,GAAAgO,IAAA,CAAAwG,EAAAzX,EAEW,GAEJ,EA7BP,GAVA,EAyCA,CAGA,CAAArD,GAAAgB,gBAAA,CAAAA,CAGA,OAAAN,WAAApB,GACA+G,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,OAGAwL,WAAA/P,CAAA,EACA,MAAA+P,UAAA,CAAA/P,GACA,IAAA2f,EAAA,KAAAvf,YAAA,MAAAwf,EAAA,KAAAxf,YAAA,MAGAuf,EAAAniB,QAAA,IACAwC,EAAA8H,SAAA,CAAA6X,EAAA9gB,SAAA,SAGA+gB,EAAApiB,QAAA,IACAwC,EAAA8H,SAAA,GAAA8X,EAAA/gB,SAAA,MACA,CAGA+C,KAAA5B,CAAA,EACA,IACMH,QAAAA,CAAA,OAGNA,GACAA,EAAA+B,IAAA,CAAA5B,EACA,CAGAgQ,eAAAhQ,CAAA,EACA,IACAhD,SAAAA,CAAA,CACM6C,QAAAA,CAAA,OAGN,GAAAA,EAAA,KAAA0uB,EAAA1uB,EAcA,GAXA,WAAAA,EAAA0E,IAAA,GAGAgqB,CADAA,EAAA,IAAAr4B,GAAA8G,EAAA,OACAiR,UAAA,CAAA9D,OAAA,KAAAzU,EAAAsH,EAAA,UAAA6C,EAAAO,YAAA,YAAA9C,SAAA,IACAixB,EAAAtgB,UAAA,CAAA8S,mBAAA,KAAArrB,EAAAsH,EAAA,sBAAA6C,EAAAO,YAAA,wBAAA9C,SAAA,IACAixB,EAAAtgB,UAAA,CAAAqU,QAAA,KAAA5sB,EAA6CsH,EAAA,WAAA6C,EAAAO,YAAA,aAAA9C,SAAA,IAAAixB,EAAAjgB,QAAA,CAAAzO,EAAAyO,QAAA,CAG7CzO,EAAAqO,MAAA,CAAApO,OAAA,KAAApK,EAAAsH,EAAA,eAAA0Z,gBAAA,KAGA6X,QAAAA,EAAAhqB,IAAA,EACA,IAAAoF,EAAA,KAAAC,QAAA,gBAAgEC,EAAA,KAAAD,QAAA,iBAGhED,EAAAnM,QAAA,IACA+wB,CAAAA,EAAAtgB,UAAA,CAAA1U,KAAA,KAAA7D,EAAAsH,EAAA,QAAA2M,EAAArM,SAAA,KAGAuM,EAAArM,QAAA,IACA+wB,CAAAA,EAAAtgB,UAAA,CAAAzU,MAAA,KAAA9D,EAAAsH,EAAA,SAAA6M,EAAAvM,SAAA,IACA,KAGAkxB,EAAAD,EAAAjrB,MAAA,CACAirB,EAAAjrB,MAAA,MACAirB,EAAAtlB,MAAA,CAAAjJ,GACAuuB,EAAAjrB,MAAA,CAAAkrB,CACA,EAGAzU,eAAA/Z,CAAA,EACA,IACMH,QAAAA,CAAA,cAGN,EACAA,EAAAka,cAAA,CAAA/Z,GAGA,KAGAyuB,kBAAA,CACA,IACAzxB,SAAAA,CAAA,CACM6C,QAAAA,CAAA,CACN,MACA,OAAA5I,GAAA0W,WAAA,CAAA3Q,EAAA6C,EAAA,CAGA,IAAAA,SAAA,CAKA,OAJA,KAAA6uB,aAAA,EACA,MAAAA,aAAA,MAAAxuB,gBAAA,GAAAR,aAAA,IAGA,KAAAgvB,aAAA,CAEA,CAgBA,SAAA5hB,GAAAF,CAAA,CAAA+hB,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OAAAF,EAAAlzB,KAAA+Q,GAAA,CAAAI,GAAAgiB,EAAAnzB,KAAAgR,GAAA,CAAAG,GAAAiiB,CAAA,CAGA,MAAA/6B,WAAAF,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,qBAAAoI,EAAA/U,EAAA,KAAAwI,YAAA,WAAA9C,SAAA,IAGA,YAAA8C,YAAA,SAAA9C,SAAA,YAEA,eAEA,IAAAue,EAAAlP,CAAA,IAGAA,EAAA,WAAAkP,EAAA,UAAAA,EAAA,UAAAA,EAAA,cAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,cAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,yBAGA,UAGA,YAEA,IAAAjP,EAAAD,CAAA,IAAAlR,KAAAgE,EAAA,KAGAkN,EAAA,CAAAG,GAAAF,EAAA,iBAAAE,GAAAF,EAAA,kBAAAE,GAAAF,EAAA,qBAAAE,GAAAF,EAAA,iBAAAE,GAAAF,EAAA,eAAAE,GAAAF,EAAA,sBAAAE,GAAAF,EAAA,kBAAAE,GAAAF,EAAA,iBAAAE,GAAAF,EAAA,yCAGA,UAGA,mBAEAD,EAAA,gEAMA,KAAAA,MAAA,CAAAA,EACA,KAAAmiB,cAAA,MAAA1uB,YAAA,mBAAA5C,QAAA,GAGAkO,MAAA1L,CAAA,CAAA+uB,CAAA,CAAAC,CAAA,CAAAz1B,CAAA,CAAAC,CAAA,EAQA,OANA,CACAs1B,eAAAA,CAAA,CACMniB,OAAAA,CAAA,CACN,MAAAsiB,EAAAjvB,EAAAkvB,YAAA,KAAA31B,EAAAC,GAGA6H,EAAA,EAAAA,EAAsB7H,EAAA6H,IACtB,QAAAD,EAAA,EAAAA,EAAA7H,EAAA6H,IAAA,CACA,IArEA+tB,EAAAA,EAAAA,EAAAA,EAIAA,EAAA/tB,EAAAC,EAAA+tB,EAAAD,EAAA/tB,EAAAC,EAAA+tB,EAAAD,EAAA/tB,EAAAC,EAAA+tB,EAAAD,EAAA/tB,EAAAC,EAAA+tB,EAiEAz8B,EApEAw8B,EAoEA5hB,IAAA,CApEAlM,EAoEA9H,EApEA,EAAA6H,EAoEAA,EAAA,EApEA,CAqEA+L,EArEAgiB,EAqEA5hB,IAAA,CArEAlM,EAqEA9H,EArEA,EAAA6H,EAqEAA,EAAA,EArEA,CAsEAyL,EAtEAsiB,EAsEA5hB,IAAA,CAtEAlM,EAsEA9H,EAtEA,EAAA6H,EAsEAA,EAAA,EAtEA,CAuEAwL,EAvEAuiB,EAuEA5hB,IAAA,CAvEAlM,EAuEA9H,EAvEA,EAAA6H,EAuEAA,EAAA,EAvEA,CAwEAiuB,EAAAtE,CAhEA,CAgEA,EAhEA,CAgEAp4B,EA/DA28B,CADA,CAgEA,EAhEA,CAgEAniB,EA/DAmiB,CADA,CAgEA,EAhEA,CAgEAziB,EA/DAyiB,CADA,CAgEA,EAhEA,CAgEA1iB,EA/DA0iB,EADA3iB,CAAA,CAgEA,EAhEA,CAiEA4iB,EAAAxE,CAjEA,CAiEA,EAjEA,CAiEAp4B,EAhEA28B,CADA,CAiEA,EAjEA,CAiEAniB,EAhEAmiB,CADA,CAiEA,EAjEA,CAiEAziB,EAhEAyiB,CADA,CAiEA,EAjEA,CAiEA1iB,EAhEA0iB,EADA3iB,CAAA,CAiEA,EAjEA,CAkEA6iB,EAAAzE,CAlEA,CAkEA,GAlEA,CAkEAp4B,EAjEA28B,CADA,CAkEA,GAlEA,CAkEAniB,EAjEAmiB,CADA,CAkEA,GAlEA,CAkEAziB,EAjEAyiB,CADA,CAkEA,GAlEA,CAkEA1iB,EAjEA0iB,EADA3iB,CAAA,CAkEA,GAlEA,CAkEA8iB,EAAA1E,CAlEA,CAkEA,GAlEA,CAkEAp4B,EAjEA28B,CADA,CAkEA,GAlEA,CAkEAniB,EAjEAmiB,CADA,CAkEA,GAlEA,CAkEAziB,EAjEAyiB,CADA,CAkEA,GAlEA,CAkEA1iB,EAjEA0iB,EADA3iB,CAAA,CAkEA,GAlEA,CAqEAmiB,IACAO,EAAA,EACAE,EAAA,EACAC,EAAA,EACAC,GAAA7iB,EAAA,KA9EAuiB,EAiFAF,EAAA1hB,IAAA,CAjFAnM,EAiFAA,EAjFAC,EAiFAA,EAjFA+tB,EAiFAC,EAhFAF,CAAA,CAAA9tB,EAgFA9H,EAhFA,EAAA6H,EAAAA,EAgFA,EAhFA,CAAAguB,EADAD,EAkFAF,EAAA1hB,IAAA,CAlFAnM,EAkFAA,EAlFAC,EAkFAA,EAlFA+tB,EAkFAG,EAjFAJ,CAAA,CAAA9tB,EAiFA9H,EAjFA,EAAA6H,EAAAA,EAiFA,EAjFA,CAAAguB,EADAD,EAmFAF,EAAA1hB,IAAA,CAnFAnM,EAmFAA,EAnFAC,EAmFAA,EAnFA+tB,EAmFAI,EAlFAL,CAAA,CAAA9tB,EAkFA9H,EAlFA,EAAA6H,EAAAA,EAkFA,EAlFA,CAAAguB,EADAD,EAoFAF,EAAA1hB,IAAA,CApFAnM,EAoFAA,EApFAC,EAoFAA,EApFA+tB,EAoFAK,EAnFAN,CAAA,CAAA9tB,EAmFA9H,EAnFA,EAAA6H,EAAAA,EAmFA,EAnFA,CAAAguB,CAoFA,CAGApvB,EAAA0K,SAAA,KAAAnR,EAAAC,GACAwG,EAAA0vB,YAAA,CAAAT,EAAA,KAEA,CAGA,MAAAn6B,WAAAlB,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,QAGAmH,MAAA1L,CAAA,CAAAH,CAAA,EACA,IACM7C,SAAAA,CAAQ,OAGdoE,EAAA,KAAAhB,YAAA,MAAAvB,SAAA,MACAwC,EAAA,KAAAjB,YAAA,MAAAvB,SAAA,MACAtF,EAAA,KAAAqQ,QAAA,UAAA/K,SAAA,MAAArF,EAAA,KAAAoQ,QAAA,WAAA/K,SAAA,MAGA,IAAAtF,GAAA,CAAAC,EAAA,CACA,IAAAmK,EAAA,IAAA1Q,GACA,KAAAqb,QAAA,CAAAlL,OAAA,CAAAgN,GAAA,CACOzM,EAAAyP,cAAA,CAAAhD,EAAA2J,cAAA,CAAA/Z,GACP,GACAoB,EAAA3F,KAAA0pB,KAAA,CAAAxhB,EAAAgP,EAAA,EACAtR,EAAA5F,KAAA0pB,KAAA,CAAAxhB,EAAAmP,EAAA,EACAvZ,EAAAkC,KAAA0pB,KAAA,CAAAxhB,EAAApK,KAAA,EACAC,EAAAiC,KAAA0pB,KAAA,CAAAxhB,EAAAnK,MAAA,MAGAm2B,EAAA,KAAA5e,YAAA,CAAAlR,EAAA/K,GAAAkc,YAAA,EACA4e,EAAA5yB,EAAA1D,YAAA,CAAA8H,EAAA7H,EAAA8H,EAAA7H,GACAq2B,EAAAD,EAAA1N,UAAA,OACAllB,EAAAmC,MAAA,CAAA6G,WAAA,CAAA6pB,GACA,KAAA7f,cAAA,CAAA6f,GAGA,IAAA/7B,GAAAkJ,EAAA,CACAuR,SAAA,EACAO,WAAA,GACAb,WAAA,EACAU,SAAA,OACO1R,MAAA,kBACP,GACA0R,SAAA,iBACO1R,MAAA,MACF,KACLyO,KAAA,CAAAmkB,EAAA,IAAAzuB,EAAA7H,EAAA8H,EAAA7H,GACA,IAAAs2B,EAAA9yB,EAAA1D,YAAA,CAAA8H,EAAA7H,EAAA8H,EAAA7H,GACAu2B,EAAAD,EAAA5N,UAAA,OACAllB,EAAAmC,MAAA,CAAA6G,WAAA,CAAA+pB,GACAlwB,EAAAoJ,MAAA,CAAA8mB,GACAA,EAAAC,wBAAA,kBACAD,EAAA9Y,SAAA,CAAA4Y,EAAA5vB,aAAA,CAAA2vB,EAAA,aACAG,EAAAE,QAAA,KAAA7uB,EAAA7H,EAAA8H,EAAA7H,GACAwG,EAAAiX,SAAA,CAAA8Y,EAAA9vB,aAAA,CAAA6vB,EAA+C,aAAA9vB,EAAAiwB,QAAA,KAAA7uB,EAAA7H,EAAA8H,EAAA7H,GAG/C,KAAA2X,aAAA,CAAAtR,EAAA8vB,EAAA,CAGA1mB,OAAAnD,CAAA,GAGA,CAAAhR,GAAAkc,YAAA,kCAGA,IAAAkf,GAAA,MAGA,OAAA18B,WAAAI,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,YAGAmH,MAAA1L,CAAA,EACA,IACMhD,SAAAA,CAAA,CACN,MACAmzB,EAAAl2B,QAAAm2B,cAAA,CAAApwB,GACA,CACAiI,UAAAA,CAAA,CACMG,UAAAA,CAAA,EAAApI,EAGNmwB,IACAA,EAAAloB,SAAA,CAAAioB,GACAC,EAAA/nB,SAAA,CAAA8nB,IAGAj2B,QAAAyR,KAAA,CAAAzD,EAAAjI,EAAA,IACA,KAAAsO,QAAA,CAAAlL,OAAA,CAAAgN,GAAA,CACA,YAAAA,EAAAxO,IAAA,EAGuG,IAAAM,EAAA,SAAAkO,EAAAqe,gBAAA,CAAAre,EAAAqe,gBAAA,QAGvGvsB,GACAA,CAAAA,EAAAjL,GAAA0W,WAAA,CAAA3Q,EAAAoT,EAAA,EAGAlO,GACAA,EAAAwJ,KAAA,CAAA1L,GAEAoQ,EAAAxO,IAAA,CAAA5B,GAGAmwB,GACAA,CAAAA,EAAA/nB,SAAA,CAAAA,CAAA,EAGAlG,GACAA,EAAAyJ,OAAA,CAAA3L,GApBA,GAuBA/F,QAAAyR,KAAA,CAAAtD,EAAApI,EAAA,IAAAA,EAAA6G,IAAA,GAGAspB,IACAA,EAAAloB,SAAA,CAAAA,EACAkoB,EAAA/nB,SAAA,CAAAA,EACA,CAGAa,OAAAnD,CAAA,GAEA,CAGA,MAAA3R,WAAAP,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,UAGAmH,MAAA1L,CAAA,CAAAH,CAAA,EAEA,IACA7C,SAAAA,CAAA,CACMsR,SAAAA,CAAA,CACN,MAAA3K,EAAA9D,EAAAka,cAAA,CAAA/Z,GAGA,GAAA2D,GAIA,IAAA0sB,EAAA,EACAC,EAAA,EACAhiB,EAAAlL,OAAA,CAAAgN,GAAA,CACA,IAAAmgB,EAAAngB,EAAAogB,mBAAA,IACAH,EAAA50B,KAAA6D,GAAA,CAAA+wB,EAAAE,GACKD,EAAA70B,KAAA6D,GAAA,CAAAgxB,EAAAC,EACL,GACA,IAAAh3B,EAAAkC,KAAA0pB,KAAA,CAAAxhB,EAAApK,KAAA,EACAC,EAAAiC,KAAA0pB,KAAA,CAAAxhB,EAAAnK,MAAA,EACAi3B,EAAAl3B,EAAA,EAAA82B,EAAAK,EAAAl3B,EAAA,EAAA82B,EAGA,GAAAG,CAAAA,CAAAA,EAAA,KAAAC,CAAAA,EAAA,IAIA,IAAAtvB,EAAA3F,KAAA0pB,KAAA,CAAAxhB,EAAAvC,CAAA,EACAC,EAAA5F,KAAA0pB,KAAA,CAAAxhB,EAAAtC,CAAA,EACAsuB,EAAA,KAAA5e,YAAA,CAAAlR,EAAA1L,GAAA6c,YAAA,EACA8e,EAAA9yB,EAAA1D,YAAA,CAAAm3B,EAAAC,GACAX,EAAAD,EAAA5N,UAAA,OACAllB,EAAAmC,MAAA,CAAA6G,WAAA,CAAA+pB,GACAA,EAAAjoB,SAAA,EAAA1G,EAAAivB,EAA4B,CAAAhvB,EAAAivB,GAAAzwB,EAAAoJ,MAAA,CAAA8mB,GAG5BzhB,EAAAlL,OAAA,CAAAgN,GAAA,CACA,mBAAAA,EAAA1E,KAAA,EACA0E,EAAA1E,KAAA,CAAAqkB,EAAA,IAAAU,EAAAC,EACQ,GAGR1wB,EAAAytB,SAAA,CAAAqC,EAAA,IAAAW,EAAAC,EAAAtvB,EAAAivB,EAAAhvB,EAAAivB,EAAAG,EAAAC,GACA,KAAAvf,aAAA,CAAAtR,EAAA8vB,GAnBA,CAhBA,CAsCA1mB,OAAAnD,CAAA,GAGA,CAAA3R,GAAA6c,YAAA,0CAGAhd,WAAAJ,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,gBACA,KAAAqK,4BAAA,GAGAlD,MAAA5F,CAAA,CAAAipB,CAAA,CAAAC,CAAA,CAAA2B,CAAA,CAAAC,CAAA,GAEA,CAGA,MAAA18B,WAAAN,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,gBAGAmH,MAAA5F,CAAA,CAAAipB,CAAA,CAAAC,CAAA,CAAA2B,CAAA,CAAAC,CAAA,GAEA,CAGA,MAAA78B,WAAAH,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,eAGAmH,MAAA5F,CAAA,CAAAipB,CAAA,CAAAC,CAAA,CAAA2B,CAAA,CAAAC,CAAA,GAEA,CAGA,MAAA38B,WAAAL,GACAmJ,YAAAC,CAAA,CAAA7C,CAAA,CAAA6T,CAAA,EACA,MAAAhR,EAAA7C,EAAA6T,GACA,KAAAzJ,IAAA,kBACA,KAAAssB,UAAA,CAAAp1B,KAAA0pB,KAAA,MAAA/kB,YAAA,iBAAAhC,SAAA,IACA,KAAAoyB,mBAAA,MAAAK,UAAA,CAGAnlB,MAAA1L,CAAA,CAAAoB,CAAA,CAAAC,CAAA,CAAA9H,CAAA,CAAAC,CAAA,EACA,IACAwD,SAAAA,CAAA,CACM6zB,WAAAA,CAAA,CACN,MACAC,EAAA9zB,EAAA7D,MAA6B,CAAA6D,EAAA7D,MAAA,CAAA6D,QAAA,CAAA8zB,IAAA,MAAAz2B,EAAA2F,EAAA3F,MAAA,CAE7BA,EAAAwU,EAAA,CAAA7R,EAAA+zB,WAAA,GAGAD,IACAz2B,EAAA6I,KAAA,CAAA8tB,OAAA,QACAF,EAAAG,WAAA,CAAA52B,IAEc,GAAA9B,EAAA24B,EAAA,EAAA72B,EAAA+G,EAAAC,EAAA9H,EAAAC,EAAAq3B,GAGdC,GACAA,EAAAK,WAAA,CAAA92B,EACA,CAEA,CAGA,MAAArD,WAAApD,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,SAEA,CAGA,MAAA7Q,WAAAE,GACAmJ,aAAA,CACA,SAAAhE,WACA,KAAAwL,IAAA,QAEA,CA8C6U,SAAA6sB,GAAAnL,CAAA,CAAAC,CAAA,MAAAC,EAAA1tB,OAAA0tB,IAAA,CAAAF,GAAA,GAAAxtB,OAAA2tB,qBAAA,MAAAC,EAAA5tB,OAAA2tB,qBAAA,CAAAH,GAAAC,GAAAG,CAAAA,EAAAA,EAAAvW,MAAA,UAAAwW,CAAA,SAAA7tB,OAAA8tB,wBAAA,CAAAN,EAAAK,GAAAE,UAAA,IAAAL,EAAA5zB,IAAA,CAAAmZ,KAAA,CAAAya,EAAAE,EAAA,QAAAF,CAAA,CAgB7U,SAAAkL,IAAiB,CAqBjB,MAAAA,CApBAA,GAAA,GAAAn5B,EAAAyB,CAAA,YAAA20B,CAAA,EACA,IAAAgD,EAAAv4B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IAAA8zB,EAAA7vB,SAAAqT,aAAA,QAOA,OAJAihB,GACAzE,CAAAA,EAAA0E,WAAA,cAGA,IAAA7rB,QAAA,CAAAC,EAAA6rB,IAAA,CACA3E,EAAA4E,MAAA,MACA9rB,EAAAknB,EAAA,EAGAA,EAAA6E,OAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/E,IAAA,CACAyE,EAAAzE,EAAA,EAGKF,EAAAyB,GAAA,CAAAA,CACF,EACH,IACA5iB,KAAA,MAAA3S,UAAA,CAGA,MAAApF,GACAoJ,YAAAqwB,CAAA,EACA,IACA3uB,WAAAA,EAAA,GACAE,OAAAA,EAAA,GACArF,aAAAA,EAAA3F,GAAA2F,YAAA,CACAI,YAAAA,EAAA/F,GAAA+F,WAAA,CACM43B,qBAAAA,CAAA,CACN,CAAAv4B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA,KAAAq0B,KAAA,CAAAA,EACA,KAAAztB,WAAA,IACA,KAAAuO,MAAA,IACA,KAAAC,iBAAA,IACA,KAAAwe,MAAA,IACA,KAAAe,KAAA,IACA,KAAAqE,WAAA,IACA,KAAAC,QAAA,GACA,KAAA7yB,MAAA,CAAAiuB,EAAAjuB,MAAA,CACA,KAAAV,UAAA,CAAAA,EACA,KAAAE,MAAA,CAAAA,EACA,KAAArF,YAAA,CAAAA,EACA,KAAAI,WAAA,MAAAu4B,eAAA,CAAAv4B,EAAA43B,GACA,KAAAnyB,MAAA,CAAAmG,IAAA,MAAA4sB,cAAA,CAAAzvB,IAAA,QACA,KAAAtD,MAAA,CAAAmG,IAAA,MAAA6sB,aAAA,CAAA1vB,IAAA,QAGAwvB,gBAAAv4B,CAAA,CAAA43B,CAAA,QACA,kBAAAA,EACA,CAAA3K,EAAAyL,IAAA14B,EAAAitB,EAAA,kBAAAyL,EAAAA,EAAAd,CAAA,EAGA53B,CAHA,CAMA,IAAAP,QAAA,CACA,YAAAgG,MAAA,CAAAhG,MAAA,CAGA,IAAAW,OAAA,CACA,YAAAqF,MAAA,CAAArF,KAAA,CAGA,IAAAkG,KAAA,CACA,YAAAb,MAAA,CAAAa,GAAA,CAGA,IAAArB,QAAA,CACA,IACMozB,YAAAA,CAAA,CACN,MACA,OAAAA,CAAA,CAAAA,EAAA/4B,MAAA,IAGA,IAAA2F,OAAA1B,CAAA,EACA,IACM80B,YAAAA,CAAA,CACN,MACAA,EAAAx/B,IAAA,CAAA0K,EAAA,CAGA4b,WAAA,CACA,IACMkZ,YAAAA,CAAA,CACN,MACAA,EAAA7wB,GAAA,GAGA6vB,aAAA,CACA,cAAAjnB,MAAA,QAAAkoB,QAAA,EAGAE,gBAAA,CACA,YAAAvF,MAAA,CAAA9mB,KAAA,CAAAC,GAAAA,EAAA0mB,MAAA,EAGA2F,eAAA,CACA,YAAAzE,KAAA,CAAA7nB,KAAA,CAAAC,GAAAA,EAAA0mB,MAAA,EAGA6F,sBAAAr1B,CAAA,EACA,IAAAswB,EAAA,KAAAjd,aAAA,CAAArT,EAAAswB,eAAA,EAIA,OAHAA,EAAAhN,IAAA,IACAgN,EAAA1e,4BAAA,GACA,KAAA0e,eAAA,CAAAA,EACAA,CAAA,CAGAjd,cAAAlW,CAAA,EACA,IAAAm4B,EAAAn4B,EAAAwU,QAAA,CAAAnU,OAAA,eAAA+3B,EAAA5+B,GAAA6+B,YAAA,CAAAF,EAAA,QAGA,SAAAC,EACA,IAAAA,EAAA,KAAAp4B,GAGA,IAAAhD,GAAA,KAAAgD,EAHA,CAMA+U,eAAA/U,CAAA,EACA,WAAAkmB,GAAA,KAAAlmB,EAAA,CAGAkM,WAAAosB,CAAA,EACA,KAAAtzB,MAAA,CAAAkH,UAAA,CAAAqsB,SA7I4gBhM,CAAA,UAAAhmB,EAAA,EAAAA,EAAA3H,UAAAC,MAAA,CAAA0H,IAAA,KAAAimB,EAAA5tB,IAAA,EAAAA,SAAA,CAAA2H,EAAA,CAAA3H,SAAA,CAAA2H,EAAA,IAAAA,EAAA,EAAA0wB,GAAA34B,OAAAkuB,GAAA,IAAAvjB,OAAA,UAAAmM,CAAA,KAAApX,EAAAwB,CAAA,EAAA+sB,EAAAnX,EAAAoX,CAAA,CAAApX,EAAA,IAAA9W,OAAAmuB,yBAAA,CAAAnuB,OAAAouB,gBAAA,CAAAH,EAAAjuB,OAAAmuB,yBAAA,CAAAD,IAAAyK,GAAA34B,OAAAkuB,IAAAvjB,OAAA,UAAAmM,CAAA,EAAA9W,OAAAquB,cAAA,CAAAJ,EAAAnX,EAAA9W,OAAA8tB,wBAAA,CAAAI,EAAApX,GAAA,UAAAmX,CAAA,EA6I5gB,CACK1pB,SAAA,MACLy1B,GAAA,CAGA,CAI2U,SAAAE,GAAA1M,CAAA,CAAAC,CAAA,MAAAC,EAAA1tB,OAAA0tB,IAAA,CAAAF,GAAA,GAAAxtB,OAAA2tB,qBAAA,MAAAC,EAAA5tB,OAAA2tB,qBAAA,CAAAH,GAAAC,GAAAG,CAAAA,EAAAA,EAAAvW,MAAA,UAAAwW,CAAA,SAAA7tB,OAAA8tB,wBAAA,CAAAN,EAAAK,GAAAE,UAAA,IAAAL,EAAA5zB,IAAA,CAAAmZ,KAAA,CAAAya,EAAAE,EAAA,QAAAF,CAAA,CAG3U,SAAAyM,GAAAlM,CAAA,UAAAhmB,EAAA,EAAAA,EAAA3H,UAAAC,MAAA,CAAA0H,IAAA,KAAAimB,EAAA5tB,IAAA,EAAAA,SAAA,CAAA2H,EAAA,CAAA3H,SAAA,CAAA2H,EAAA,IAAAA,EAAA,EAAAiyB,GAAAl6B,OAAAkuB,GAAA,IAAAvjB,OAAA,UAAAmM,CAAA,KAAApX,EAAAwB,CAAA,EAAA+sB,EAAAnX,EAAAoX,CAAA,CAAApX,EAAA,IAAA9W,OAAAmuB,yBAAA,CAAAnuB,OAAAouB,gBAAA,CAAAH,EAAAjuB,OAAAmuB,yBAAA,CAAAD,IAAAgM,GAAAl6B,OAAAkuB,IAAAvjB,OAAA,UAAAmM,CAAA,EAAA9W,OAAAquB,cAAA,CAAAJ,EAAAnX,EAAA9W,OAAA8tB,wBAAA,CAAAI,EAAApX,GAAA,UAAAmX,CAAA,CANA/yB,GAAA2F,YAAA,CAhJA,SAAAC,CAAA,CAAAC,CAAA,EACA,IAAAa,EAAA2C,SAAAqT,aAAA,WAGA,OAFAhW,EAAAd,KAAA,CAAAA,EACAc,EAAAb,MAAA,CAAAA,EACAa,CAAA,EA6IA1G,GAAA+F,WAAA,CA1IA,SAAAq1B,CAAA,EACA,OAAAsC,GAAA3lB,KAAA,MAAA3S,UAAA,EAyIApF,GAAA6+B,YAAA,CAjMA,CACA,IAAAt8B,GACA,KAAAH,GACA,OAAAxC,GACA,QAAAM,GACA,KAAAc,GACA,SAAAc,GACA,QAAAD,GACA,KAAAJ,GACA,QAAAE,GACA,OAAAT,GACA,KAAApB,GACA,eAAAmB,GACA,eAAAkB,GACA,KAAAW,GACA,QAAA1D,GACA,aAAAD,GACA,iBAAAE,GACA,KAAAqB,GACA,YAAAC,GACA,gBAAAU,GACA,MAAAR,GACA,KAAAsC,GACA,MAAAD,GACA,KAAAD,GACA,EAAA/D,GACA,SAAAkE,GACA,MAAArC,GACA,EAAAH,GACA,OAAAoC,GACA,MAAAD,GACA,IAAAU,GACA,KAAAtC,GACA,SAAAtB,GACA,OAAAW,GACA,aAAAH,GACA,aAAAE,GACA,YAAAH,GACA,cAAAD,GACA,eAAAG,GACA,MAAA+C,GACA,KAAAtD,EAAA,CAkKA,OAAAJ,GAOAyJ,YAAAiD,CAAA,CAAAktB,CAAA,EACA,IAAA2F,EAAA95B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA,KAAAmS,MAAA,KAAA/V,EAAA09B,GACA,KAAA1zB,MAAA,KAAA9I,EAAA2J,EAAA6yB,GACA,KAAAA,OAAA,CAAAA,EACA,IAAA71B,EAAA,IAAArJ,GAAA,KAAAk/B,GACAvF,EAAAtwB,EAAAq1B,qBAAA,CAAAnF,EACA,MAAAlwB,QAAA,CAAAA,EACA,KAAAswB,eAAA,CAAAA,CACA,CAUA,OAAA7e,KAAAzO,CAAA,CAAAktB,CAAA,EACA,IAAA4F,EAAW/5B,UACX,SAAAb,EAAAyB,CAAA,cACA,IAAAk5B,EAAAC,EAAA95B,MAAA,IAAA85B,KAAA75B,IAAA65B,CAAA,IAAAA,CAAA,OAEAnF,EAAA,MAAAziB,IADA/V,EAAA09B,GACAvxB,KAAA,CAAA4rB,GACK,WAAA55B,GAAA0M,EAAA2tB,EAAAkF,EACL,IACA,CAUA,OAAAE,WAAA/yB,CAAA,CAAAktB,CAAA,EACA,IAAA2F,EAAA95B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OAEA40B,EAAAziB,IADA/V,EAAA09B,GACA9nB,eAAA,CAAAmiB,GACA,WAAA55B,GAAA0M,EAAA2tB,EAAAkF,EACA,CAUAG,KAAAhzB,CAAA,CAAAktB,CAAA,EACA,IAAA2F,EAAA95B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAA8DA,SAAA,OAC9D,OAAAzF,GAAAmb,IAAA,CAAAzO,EAAAktB,EAAA0F,GAAAA,GAAA,QAAAC,OAAA,EAAAA,GACA,CAUAxF,WAAArtB,CAAA,CAAAktB,CAAA,EACA,IAAA2F,EAAA95B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAoEA,SAAA,OACpE,OAAAzF,GAAAy/B,UAAA,CAAA/yB,EAAAktB,EAAA0F,GAAAA,GAAA,QAAAC,OAAA,EAAAA,GACA,CAOArtB,OAAA,CACA,YAAArG,MAAA,CAAAqG,KAAA,EACA,CAOAI,SAAA,CACA,YAAAzG,MAAA,CAAAyG,OAAA,EACA,CAOAqD,QAAA,CACA,IAAAgqB,EAAAl6B,UAAA+R,EAAA,KAGA,SAAA5S,EAAAyB,CAAA,kBAAAk5B,EAAAI,EAAAj6B,MAAA,IAAAi6B,KAAAh6B,IAAAg6B,CAAA,IAAAA,CAAA,OAGAnoB,EAAAlI,KAAA,CAAAgwB,GAAA,CACAnqB,aAAA,GACArP,gBAAA,GACOC,YAAA,IAAAw5B,IAEP,MAAA/nB,EAAAtF,KAAA,GAGKsF,EAAA/H,IAAA,EACL,IACA,CAOAH,OAAA,CACA,IAAAiwB,EAAA95B,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,OACA,CACAu0B,gBAAAA,CAAA,CACAnuB,OAAAA,CAAA,CACM0zB,QAAAK,CAAA,CACN,MACA/zB,EAAAyD,KAAA,CAAA0qB,EAAAsF,GAAAA,GAAA,CACKnqB,aAAA,EACL,EAAAyqB,GAAAL,GACA,CAMA9vB,MAAA,CACA,KAAA5D,MAAA,CAAA4D,IAAA,EACA,CASA+d,OAAAvnB,CAAA,EACA,IAAAC,EAAAT,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,IAAAA,SAAA,IAAAQ,CAAA,CACAwnB,EAAAhoB,UAAAC,MAAA,IAAAD,KAAAE,IAAAF,SAAA,KAAAA,SAAA,IACA,KAAAu0B,eAAA,CAAAxM,MAAA,CAAAvnB,EAAAC,EAAAunB,EAAA,CAEA,CAGyD","sources":["webpack://_N_E/./node_modules/canvg/lib/index.es.js","webpack://_N_E/<anon>"],"sourcesContent":["import 'core-js/modules/es.promise.js';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport 'core-js/modules/es.string.match.js';\nimport 'core-js/modules/es.string.replace.js';\nimport 'core-js/modules/es.string.starts-with.js';\nimport 'core-js/modules/es.array.iterator.js';\nimport 'core-js/modules/web.dom-collections.iterator.js';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport 'core-js/modules/es.array.reduce.js';\nimport 'core-js/modules/es.string.ends-with.js';\nimport 'core-js/modules/es.string.split.js';\nimport requestAnimationFrame from 'raf';\nimport 'core-js/modules/es.string.trim.js';\nimport RGBColor from 'rgbcolor';\nimport 'core-js/modules/es.array.index-of.js';\nimport 'core-js/modules/es.string.includes.js';\nimport 'core-js/modules/es.array.reverse.js';\nimport { SVGPathData } from 'svg-pathdata';\nimport 'core-js/modules/es.regexp.to-string.js';\nimport { canvasRGBA } from 'stackblur-canvas';\n\n/**\r\n * Options preset for `OffscreenCanvas`.\r\n * @param config - Preset requirements.\r\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\r\n * @returns Preset object.\r\n */\nfunction offscreen() {\n  var {\n    DOMParser: DOMParserFallback\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var preset = {\n    window: null,\n    ignoreAnimation: true,\n    ignoreMouse: true,\n    DOMParser: DOMParserFallback,\n\n    createCanvas(width, height) {\n      return new OffscreenCanvas(width, height);\n    },\n\n    createImage(url) {\n      return _asyncToGenerator(function* () {\n        var response = yield fetch(url);\n        var blob = yield response.blob();\n        var img = yield createImageBitmap(blob);\n        return img;\n      })();\n    }\n\n  };\n\n  if (typeof DOMParser !== 'undefined' || typeof DOMParserFallback === 'undefined') {\n    Reflect.deleteProperty(preset, 'DOMParser');\n  }\n\n  return preset;\n}\n\n/**\r\n * Options preset for `node-canvas`.\r\n * @param config - Preset requirements.\r\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\r\n * @param config.canvas - `node-canvas` exports.\r\n * @param config.fetch - WHATWG-compatible `fetch` function.\r\n * @returns Preset object.\r\n */\nfunction node(_ref) {\n  var {\n    DOMParser,\n    canvas,\n    fetch\n  } = _ref;\n  return {\n    window: null,\n    ignoreAnimation: true,\n    ignoreMouse: true,\n    DOMParser,\n    fetch,\n    createCanvas: canvas.createCanvas,\n    createImage: canvas.loadImage\n  };\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\toffscreen: offscreen,\n\tnode: node\n});\n\n/**\r\n * HTML-safe compress white-spaces.\r\n * @param str - String to compress.\r\n * @returns String.\r\n */\nfunction compressSpaces(str) {\n  return str.replace(/(?!\\u3000)\\s+/gm, ' ');\n}\n/**\r\n * HTML-safe left trim.\r\n * @param str - String to trim.\r\n * @returns String.\r\n */\n\nfunction trimLeft(str) {\n  return str.replace(/^[\\n \\t]+/, '');\n}\n/**\r\n * HTML-safe right trim.\r\n * @param str - String to trim.\r\n * @returns String.\r\n */\n\nfunction trimRight(str) {\n  return str.replace(/[\\n \\t]+$/, '');\n}\n/**\r\n * String to numbers array.\r\n * @param str - Numbers string.\r\n * @returns Numbers array.\r\n */\n\nfunction toNumbers(str) {\n  var matches = (str || '').match(/-?(\\d+(?:\\.\\d*(?:[eE][+-]?\\d+)?)?|\\.\\d+)(?=\\D|$)/gm) || [];\n  return matches.map(parseFloat);\n} // Microsoft Edge fix\n\nvar allUppercase = /^[A-Z-]+$/;\n/**\r\n * Normalize attribute name.\r\n * @param name - Attribute name.\r\n * @returns Normalized attribute name.\r\n */\n\nfunction normalizeAttributeName(name) {\n  if (allUppercase.test(name)) {\n    return name.toLowerCase();\n  }\n\n  return name;\n}\n/**\r\n * Parse external URL.\r\n * @param url - CSS url string.\r\n * @returns Parsed URL.\r\n */\n\nfunction parseExternalUrl(url) {\n  //                      single quotes [2]\n  //                      v         double quotes [3]\n  //                      v         v         no quotes [4]\n  //                      v         v         v\n  var urlMatch = /url\\(('([^']+)'|\"([^\"]+)\"|([^'\")]+))\\)/.exec(url) || [];\n  return urlMatch[2] || urlMatch[3] || urlMatch[4];\n}\n/**\r\n * Transform floats to integers in rgb colors.\r\n * @param color - Color to normalize.\r\n * @returns Normalized color.\r\n */\n\nfunction normalizeColor(color) {\n  if (!color.startsWith('rgb')) {\n    return color;\n  }\n\n  var rgbParts = 3;\n  var normalizedColor = color.replace(/\\d+(\\.\\d+)?/g, (num, isFloat) => rgbParts-- && isFloat ? String(Math.round(parseFloat(num))) : num);\n  return normalizedColor;\n}\n\n// slightly modified version of https://github.com/keeganstreet/specificity/blob/master/specificity.js\nvar attributeRegex = /(\\[[^\\]]+\\])/g;\nvar idRegex = /(#[^\\s+>~.[:]+)/g;\nvar classRegex = /(\\.[^\\s+>~.[:]+)/g;\nvar pseudoElementRegex = /(::[^\\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi;\nvar pseudoClassWithBracketsRegex = /(:[\\w-]+\\([^)]*\\))/gi;\nvar pseudoClassRegex = /(:[^\\s+>~.[:]+)/g;\nvar elementRegex = /([^\\s+>~.[:]+)/g;\n\nfunction findSelectorMatch(selector, regex) {\n  var matches = regex.exec(selector);\n\n  if (!matches) {\n    return [selector, 0];\n  }\n\n  return [selector.replace(regex, ' '), matches.length];\n}\n/**\r\n * Measure selector specificity.\r\n * @param selector - Selector to measure.\r\n * @returns Specificity.\r\n */\n\n\nfunction getSelectorSpecificity(selector) {\n  var specificity = [0, 0, 0];\n  var currentSelector = selector.replace(/:not\\(([^)]*)\\)/g, '     $1 ').replace(/{[\\s\\S]*/gm, ' ');\n  var delta = 0;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, attributeRegex);\n  specificity[1] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, idRegex);\n  specificity[0] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, classRegex);\n  specificity[1] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoElementRegex);\n  specificity[2] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoClassWithBracketsRegex);\n  specificity[1] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoClassRegex);\n  specificity[1] += delta;\n  currentSelector = currentSelector.replace(/[*\\s+>~]/g, ' ').replace(/[#.]/g, ' ');\n  [currentSelector, delta] = findSelectorMatch(currentSelector, elementRegex); // lgtm [js/useless-assignment-to-local]\n\n  specificity[2] += delta;\n  return specificity.join('');\n}\n\nvar PSEUDO_ZERO = .00000001;\n/**\r\n * Vector magnitude.\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorMagnitude(v) {\n  return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n}\n/**\r\n * Ratio between two vectors.\r\n * @param u\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorsRatio(u, v) {\n  return (u[0] * v[0] + u[1] * v[1]) / (vectorMagnitude(u) * vectorMagnitude(v));\n}\n/**\r\n * Angle between two vectors.\r\n * @param u\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorsAngle(u, v) {\n  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vectorsRatio(u, v));\n}\nfunction CB1(t) {\n  return t * t * t;\n}\nfunction CB2(t) {\n  return 3 * t * t * (1 - t);\n}\nfunction CB3(t) {\n  return 3 * t * (1 - t) * (1 - t);\n}\nfunction CB4(t) {\n  return (1 - t) * (1 - t) * (1 - t);\n}\nfunction QB1(t) {\n  return t * t;\n}\nfunction QB2(t) {\n  return 2 * t * (1 - t);\n}\nfunction QB3(t) {\n  return (1 - t) * (1 - t);\n}\n\nclass Property {\n  constructor(document, name, value) {\n    this.document = document;\n    this.name = name;\n    this.value = value;\n    this.isNormalizedColor = false;\n  }\n\n  static empty(document) {\n    return new Property(document, 'EMPTY', '');\n  }\n\n  split() {\n    var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ' ';\n    var {\n      document,\n      name\n    } = this;\n    return compressSpaces(this.getString()).trim().split(separator).map(value => new Property(document, name, value));\n  }\n\n  hasValue(zeroIsValue) {\n    var {\n      value\n    } = this;\n    return value !== null && value !== '' && (zeroIsValue || value !== 0) && typeof value !== 'undefined';\n  }\n\n  isString(regexp) {\n    var {\n      value\n    } = this;\n    var result = typeof value === 'string';\n\n    if (!result || !regexp) {\n      return result;\n    }\n\n    return regexp.test(value);\n  }\n\n  isUrlDefinition() {\n    return this.isString(/^url\\(/);\n  }\n\n  isPixels() {\n    if (!this.hasValue()) {\n      return false;\n    }\n\n    var asString = this.getString();\n\n    switch (true) {\n      case asString.endsWith('px'):\n      case /^[0-9]+$/.test(asString):\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  setValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  getValue(def) {\n    if (typeof def === 'undefined' || this.hasValue()) {\n      return this.value;\n    }\n\n    return def;\n  }\n\n  getNumber(def) {\n    if (!this.hasValue()) {\n      if (typeof def === 'undefined') {\n        return 0;\n      }\n\n      return parseFloat(def);\n    }\n\n    var {\n      value\n    } = this;\n    var n = parseFloat(value);\n\n    if (this.isString(/%$/)) {\n      n /= 100.0;\n    }\n\n    return n;\n  }\n\n  getString(def) {\n    if (typeof def === 'undefined' || this.hasValue()) {\n      return typeof this.value === 'undefined' ? '' : String(this.value);\n    }\n\n    return String(def);\n  }\n\n  getColor(def) {\n    var color = this.getString(def);\n\n    if (this.isNormalizedColor) {\n      return color;\n    }\n\n    this.isNormalizedColor = true;\n    color = normalizeColor(color);\n    this.value = color;\n    return color;\n  }\n\n  getDpi() {\n    return 96.0; // TODO: compute?\n  }\n\n  getRem() {\n    return this.document.rootEmSize;\n  }\n\n  getEm() {\n    return this.document.emSize;\n  }\n\n  getUnits() {\n    return this.getString().replace(/[0-9.-]/g, '');\n  }\n\n  getPixels(axisOrIsFontSize) {\n    var processPercent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!this.hasValue()) {\n      return 0;\n    }\n\n    var [axis, isFontSize] = typeof axisOrIsFontSize === 'boolean' ? [undefined, axisOrIsFontSize] : [axisOrIsFontSize];\n    var {\n      viewPort\n    } = this.document.screen;\n\n    switch (true) {\n      case this.isString(/vmin$/):\n        return this.getNumber() / 100.0 * Math.min(viewPort.computeSize('x'), viewPort.computeSize('y'));\n\n      case this.isString(/vmax$/):\n        return this.getNumber() / 100.0 * Math.max(viewPort.computeSize('x'), viewPort.computeSize('y'));\n\n      case this.isString(/vw$/):\n        return this.getNumber() / 100.0 * viewPort.computeSize('x');\n\n      case this.isString(/vh$/):\n        return this.getNumber() / 100.0 * viewPort.computeSize('y');\n\n      case this.isString(/rem$/):\n        return this.getNumber() * this.getRem();\n\n      case this.isString(/em$/):\n        return this.getNumber() * this.getEm();\n\n      case this.isString(/ex$/):\n        return this.getNumber() * this.getEm() / 2.0;\n\n      case this.isString(/px$/):\n        return this.getNumber();\n\n      case this.isString(/pt$/):\n        return this.getNumber() * this.getDpi() * (1.0 / 72.0);\n\n      case this.isString(/pc$/):\n        return this.getNumber() * 15;\n\n      case this.isString(/cm$/):\n        return this.getNumber() * this.getDpi() / 2.54;\n\n      case this.isString(/mm$/):\n        return this.getNumber() * this.getDpi() / 25.4;\n\n      case this.isString(/in$/):\n        return this.getNumber() * this.getDpi();\n\n      case this.isString(/%$/) && isFontSize:\n        return this.getNumber() * this.getEm();\n\n      case this.isString(/%$/):\n        return this.getNumber() * viewPort.computeSize(axis);\n\n      default:\n        {\n          var n = this.getNumber();\n\n          if (processPercent && n < 1.0) {\n            return n * viewPort.computeSize(axis);\n          }\n\n          return n;\n        }\n    }\n  }\n\n  getMilliseconds() {\n    if (!this.hasValue()) {\n      return 0;\n    }\n\n    if (this.isString(/ms$/)) {\n      return this.getNumber();\n    }\n\n    return this.getNumber() * 1000;\n  }\n\n  getRadians() {\n    if (!this.hasValue()) {\n      return 0;\n    }\n\n    switch (true) {\n      case this.isString(/deg$/):\n        return this.getNumber() * (Math.PI / 180.0);\n\n      case this.isString(/grad$/):\n        return this.getNumber() * (Math.PI / 200.0);\n\n      case this.isString(/rad$/):\n        return this.getNumber();\n\n      default:\n        return this.getNumber() * (Math.PI / 180.0);\n    }\n  }\n\n  getDefinition() {\n    var asString = this.getString();\n    var name = /#([^)'\"]+)/.exec(asString);\n\n    if (name) {\n      name = name[1];\n    }\n\n    if (!name) {\n      name = asString;\n    }\n\n    return this.document.definitions[name];\n  }\n\n  getFillStyleDefinition(element, opacity) {\n    var def = this.getDefinition();\n\n    if (!def) {\n      return null;\n    } // gradient\n\n\n    if (typeof def.createGradient === 'function') {\n      return def.createGradient(this.document.ctx, element, opacity);\n    } // pattern\n\n\n    if (typeof def.createPattern === 'function') {\n      if (def.getHrefAttribute().hasValue()) {\n        var patternTransform = def.getAttribute('patternTransform');\n        def = def.getHrefAttribute().getDefinition();\n\n        if (patternTransform.hasValue()) {\n          def.getAttribute('patternTransform', true).setValue(patternTransform.value);\n        }\n      }\n\n      return def.createPattern(this.document.ctx, element, opacity);\n    }\n\n    return null;\n  }\n\n  getTextBaseline() {\n    if (!this.hasValue()) {\n      return null;\n    }\n\n    return Property.textBaselineMapping[this.getString()];\n  }\n\n  addOpacity(opacity) {\n    var value = this.getColor();\n    var len = value.length;\n    var commas = 0; // Simulate old RGBColor version, which can't parse rgba.\n\n    for (var i = 0; i < len; i++) {\n      if (value[i] === ',') {\n        commas++;\n      }\n\n      if (commas === 3) {\n        break;\n      }\n    }\n\n    if (opacity.hasValue() && this.isString() && commas !== 3) {\n      var color = new RGBColor(value);\n\n      if (color.ok) {\n        color.alpha = opacity.getNumber();\n        value = color.toRGBA();\n      }\n    }\n\n    return new Property(this.document, this.name, value);\n  }\n\n}\nProperty.textBaselineMapping = {\n  'baseline': 'alphabetic',\n  'before-edge': 'top',\n  'text-before-edge': 'top',\n  'middle': 'middle',\n  'central': 'middle',\n  'after-edge': 'bottom',\n  'text-after-edge': 'bottom',\n  'ideographic': 'ideographic',\n  'alphabetic': 'alphabetic',\n  'hanging': 'hanging',\n  'mathematical': 'alphabetic'\n};\n\nclass ViewPort {\n  constructor() {\n    this.viewPorts = [];\n  }\n\n  clear() {\n    this.viewPorts = [];\n  }\n\n  setCurrent(width, height) {\n    this.viewPorts.push({\n      width,\n      height\n    });\n  }\n\n  removeCurrent() {\n    this.viewPorts.pop();\n  }\n\n  getCurrent() {\n    var {\n      viewPorts\n    } = this;\n    return viewPorts[viewPorts.length - 1];\n  }\n\n  get width() {\n    return this.getCurrent().width;\n  }\n\n  get height() {\n    return this.getCurrent().height;\n  }\n\n  computeSize(d) {\n    if (typeof d === 'number') {\n      return d;\n    }\n\n    if (d === 'x') {\n      return this.width;\n    }\n\n    if (d === 'y') {\n      return this.height;\n    }\n\n    return Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)) / Math.sqrt(2);\n  }\n\n}\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static parse(point) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var [x = defaultValue, y = defaultValue] = toNumbers(point);\n    return new Point(x, y);\n  }\n\n  static parseScale(scale) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var [x = defaultValue, y = x] = toNumbers(scale);\n    return new Point(x, y);\n  }\n\n  static parsePath(path) {\n    var points = toNumbers(path);\n    var len = points.length;\n    var pathPoints = [];\n\n    for (var i = 0; i < len; i += 2) {\n      pathPoints.push(new Point(points[i], points[i + 1]));\n    }\n\n    return pathPoints;\n  }\n\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  applyTransform(transform) {\n    var {\n      x,\n      y\n    } = this;\n    var xp = x * transform[0] + y * transform[2] + transform[4];\n    var yp = x * transform[1] + y * transform[3] + transform[5];\n    this.x = xp;\n    this.y = yp;\n  }\n\n}\n\nclass Mouse {\n  constructor(screen) {\n    this.screen = screen;\n    this.working = false;\n    this.events = [];\n    this.eventElements = []; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.onClick = this.onClick.bind(this); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.onMouseMove = this.onMouseMove.bind(this);\n  }\n\n  isWorking() {\n    return this.working;\n  }\n\n  start() {\n    if (this.working) {\n      return;\n    }\n\n    var {\n      screen,\n      onClick,\n      onMouseMove\n    } = this;\n    var canvas = screen.ctx.canvas;\n    canvas.onclick = onClick;\n    canvas.onmousemove = onMouseMove;\n    this.working = true;\n  }\n\n  stop() {\n    if (!this.working) {\n      return;\n    }\n\n    var canvas = this.screen.ctx.canvas;\n    this.working = false;\n    canvas.onclick = null;\n    canvas.onmousemove = null;\n  }\n\n  hasEvents() {\n    return this.working && this.events.length > 0;\n  }\n\n  runEvents() {\n    if (!this.working) {\n      return;\n    }\n\n    var {\n      screen: document,\n      events,\n      eventElements\n    } = this;\n    var {\n      style\n    } = document.ctx.canvas;\n\n    if (style) {\n      style.cursor = '';\n    }\n\n    events.forEach((_ref, i) => {\n      var {\n        run\n      } = _ref;\n      var element = eventElements[i];\n\n      while (element) {\n        run(element);\n        element = element.parent;\n      }\n    }); // done running, clear\n\n    this.events = [];\n    this.eventElements = [];\n  }\n\n  checkPath(element, ctx) {\n    if (!this.working || !ctx) {\n      return;\n    }\n\n    var {\n      events,\n      eventElements\n    } = this;\n    events.forEach((_ref2, i) => {\n      var {\n        x,\n        y\n      } = _ref2;\n\n      if (!eventElements[i] && ctx.isPointInPath && ctx.isPointInPath(x, y)) {\n        eventElements[i] = element;\n      }\n    });\n  }\n\n  checkBoundingBox(element, boundingBox) {\n    if (!this.working || !boundingBox) {\n      return;\n    }\n\n    var {\n      events,\n      eventElements\n    } = this;\n    events.forEach((_ref3, i) => {\n      var {\n        x,\n        y\n      } = _ref3;\n\n      if (!eventElements[i] && boundingBox.isPointInBox(x, y)) {\n        eventElements[i] = element;\n      }\n    });\n  }\n\n  mapXY(x, y) {\n    var {\n      window,\n      ctx\n    } = this.screen;\n    var point = new Point(x, y);\n    var element = ctx.canvas;\n\n    while (element) {\n      point.x -= element.offsetLeft;\n      point.y -= element.offsetTop;\n      element = element.offsetParent;\n    }\n\n    if (window.scrollX) {\n      point.x += window.scrollX;\n    }\n\n    if (window.scrollY) {\n      point.y += window.scrollY;\n    }\n\n    return point;\n  }\n\n  onClick(event) {\n    var {\n      x,\n      y\n    } = this.mapXY(event.clientX, event.clientY);\n    this.events.push({\n      type: 'onclick',\n      x,\n      y,\n\n      run(eventTarget) {\n        if (eventTarget.onClick) {\n          eventTarget.onClick();\n        }\n      }\n\n    });\n  }\n\n  onMouseMove(event) {\n    var {\n      x,\n      y\n    } = this.mapXY(event.clientX, event.clientY);\n    this.events.push({\n      type: 'onmousemove',\n      x,\n      y,\n\n      run(eventTarget) {\n        if (eventTarget.onMouseMove) {\n          eventTarget.onMouseMove();\n        }\n      }\n\n    });\n  }\n\n}\n\nvar defaultWindow = typeof window !== 'undefined' ? window : null;\nvar defaultFetch$1 = typeof fetch !== 'undefined' ? fetch.bind(undefined) // `fetch` depends on context: `someObject.fetch(...)` will throw error.\n: null;\nclass Screen {\n  constructor(ctx) {\n    var {\n      fetch = defaultFetch$1,\n      window = defaultWindow\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.ctx = ctx;\n    this.FRAMERATE = 30;\n    this.MAX_VIRTUAL_PIXELS = 30000;\n    this.CLIENT_WIDTH = 800;\n    this.CLIENT_HEIGHT = 600;\n    this.viewPort = new ViewPort();\n    this.mouse = new Mouse(this);\n    this.animations = [];\n    this.waits = [];\n    this.frameDuration = 0;\n    this.isReadyLock = false;\n    this.isFirstRender = true;\n    this.intervalId = null;\n    this.window = window;\n    this.fetch = fetch;\n  }\n\n  wait(checker) {\n    this.waits.push(checker);\n  }\n\n  ready() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (!this.readyPromise) {\n      return Promise.resolve();\n    }\n\n    return this.readyPromise;\n  }\n\n  isReady() {\n    if (this.isReadyLock) {\n      return true;\n    }\n\n    var isReadyLock = this.waits.every(_ => _());\n\n    if (isReadyLock) {\n      this.waits = [];\n\n      if (this.resolveReady) {\n        this.resolveReady();\n      }\n    }\n\n    this.isReadyLock = isReadyLock;\n    return isReadyLock;\n  }\n\n  setDefaults(ctx) {\n    // initial values and defaults\n    ctx.strokeStyle = 'rgba(0,0,0,0)';\n    ctx.lineCap = 'butt';\n    ctx.lineJoin = 'miter';\n    ctx.miterLimit = 4;\n  }\n\n  setViewBox(_ref) {\n    var {\n      document,\n      ctx,\n      aspectRatio,\n      width,\n      desiredWidth,\n      height,\n      desiredHeight,\n      minX = 0,\n      minY = 0,\n      refX,\n      refY,\n      clip = false,\n      clipX = 0,\n      clipY = 0\n    } = _ref;\n    // aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n    var cleanAspectRatio = compressSpaces(aspectRatio).replace(/^defer\\s/, ''); // ignore defer\n\n    var [aspectRatioAlign, aspectRatioMeetOrSlice] = cleanAspectRatio.split(' ');\n    var align = aspectRatioAlign || 'xMidYMid';\n    var meetOrSlice = aspectRatioMeetOrSlice || 'meet'; // calculate scale\n\n    var scaleX = width / desiredWidth;\n    var scaleY = height / desiredHeight;\n    var scaleMin = Math.min(scaleX, scaleY);\n    var scaleMax = Math.max(scaleX, scaleY);\n    var finalDesiredWidth = desiredWidth;\n    var finalDesiredHeight = desiredHeight;\n\n    if (meetOrSlice === 'meet') {\n      finalDesiredWidth *= scaleMin;\n      finalDesiredHeight *= scaleMin;\n    }\n\n    if (meetOrSlice === 'slice') {\n      finalDesiredWidth *= scaleMax;\n      finalDesiredHeight *= scaleMax;\n    }\n\n    var refXProp = new Property(document, 'refX', refX);\n    var refYProp = new Property(document, 'refY', refY);\n    var hasRefs = refXProp.hasValue() && refYProp.hasValue();\n\n    if (hasRefs) {\n      ctx.translate(-scaleMin * refXProp.getPixels('x'), -scaleMin * refYProp.getPixels('y'));\n    }\n\n    if (clip) {\n      var scaledClipX = scaleMin * clipX;\n      var scaledClipY = scaleMin * clipY;\n      ctx.beginPath();\n      ctx.moveTo(scaledClipX, scaledClipY);\n      ctx.lineTo(width, scaledClipY);\n      ctx.lineTo(width, height);\n      ctx.lineTo(scaledClipX, height);\n      ctx.closePath();\n      ctx.clip();\n    }\n\n    if (!hasRefs) {\n      var isMeetMinY = meetOrSlice === 'meet' && scaleMin === scaleY;\n      var isSliceMaxY = meetOrSlice === 'slice' && scaleMax === scaleY;\n      var isMeetMinX = meetOrSlice === 'meet' && scaleMin === scaleX;\n      var isSliceMaxX = meetOrSlice === 'slice' && scaleMax === scaleX;\n\n      if (align.startsWith('xMid') && (isMeetMinY || isSliceMaxY)) {\n        ctx.translate(width / 2.0 - finalDesiredWidth / 2.0, 0);\n      }\n\n      if (align.endsWith('YMid') && (isMeetMinX || isSliceMaxX)) {\n        ctx.translate(0, height / 2.0 - finalDesiredHeight / 2.0);\n      }\n\n      if (align.startsWith('xMax') && (isMeetMinY || isSliceMaxY)) {\n        ctx.translate(width - finalDesiredWidth, 0);\n      }\n\n      if (align.endsWith('YMax') && (isMeetMinX || isSliceMaxX)) {\n        ctx.translate(0, height - finalDesiredHeight);\n      }\n    } // scale\n\n\n    switch (true) {\n      case align === 'none':\n        ctx.scale(scaleX, scaleY);\n        break;\n\n      case meetOrSlice === 'meet':\n        ctx.scale(scaleMin, scaleMin);\n        break;\n\n      case meetOrSlice === 'slice':\n        ctx.scale(scaleMax, scaleMax);\n        break;\n    } // translate\n\n\n    ctx.translate(-minX, -minY);\n  }\n\n  start(element) {\n    var {\n      enableRedraw = false,\n      ignoreMouse = false,\n      ignoreAnimation = false,\n      ignoreDimensions = false,\n      ignoreClear = false,\n      forceRedraw,\n      scaleWidth,\n      scaleHeight,\n      offsetX,\n      offsetY\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      FRAMERATE,\n      mouse\n    } = this;\n    var frameDuration = 1000 / FRAMERATE;\n    this.frameDuration = frameDuration;\n    this.readyPromise = new Promise(resolve => {\n      this.resolveReady = resolve;\n    });\n\n    if (this.isReady()) {\n      this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n    }\n\n    if (!enableRedraw) {\n      return;\n    }\n\n    var now = Date.now();\n    var then = now;\n    var delta = 0;\n\n    var tick = () => {\n      now = Date.now();\n      delta = now - then;\n\n      if (delta >= frameDuration) {\n        then = now - delta % frameDuration;\n\n        if (this.shouldUpdate(ignoreAnimation, forceRedraw)) {\n          this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n          mouse.runEvents();\n        }\n      }\n\n      this.intervalId = requestAnimationFrame(tick);\n    };\n\n    if (!ignoreMouse) {\n      mouse.start();\n    }\n\n    this.intervalId = requestAnimationFrame(tick);\n  }\n\n  stop() {\n    if (this.intervalId) {\n      requestAnimationFrame.cancel(this.intervalId);\n      this.intervalId = null;\n    }\n\n    this.mouse.stop();\n  }\n\n  shouldUpdate(ignoreAnimation, forceRedraw) {\n    // need update from animations?\n    if (!ignoreAnimation) {\n      var {\n        frameDuration\n      } = this;\n      var shouldUpdate = this.animations.reduce((shouldUpdate, animation) => animation.update(frameDuration) || shouldUpdate, false);\n\n      if (shouldUpdate) {\n        return true;\n      }\n    } // need update from redraw?\n\n\n    if (typeof forceRedraw === 'function' && forceRedraw()) {\n      return true;\n    }\n\n    if (!this.isReadyLock && this.isReady()) {\n      return true;\n    } // need update from mouse events?\n\n\n    if (this.mouse.hasEvents()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY) {\n    var {\n      CLIENT_WIDTH,\n      CLIENT_HEIGHT,\n      viewPort,\n      ctx,\n      isFirstRender\n    } = this;\n    var canvas = ctx.canvas;\n    viewPort.clear();\n\n    if (canvas.width && canvas.height) {\n      viewPort.setCurrent(canvas.width, canvas.height);\n    } else {\n      viewPort.setCurrent(CLIENT_WIDTH, CLIENT_HEIGHT);\n    }\n\n    var widthStyle = element.getStyle('width');\n    var heightStyle = element.getStyle('height');\n\n    if (!ignoreDimensions && (isFirstRender || typeof scaleWidth !== 'number' && typeof scaleHeight !== 'number')) {\n      // set canvas size\n      if (widthStyle.hasValue()) {\n        canvas.width = widthStyle.getPixels('x');\n\n        if (canvas.style) {\n          canvas.style.width = \"\".concat(canvas.width, \"px\");\n        }\n      }\n\n      if (heightStyle.hasValue()) {\n        canvas.height = heightStyle.getPixels('y');\n\n        if (canvas.style) {\n          canvas.style.height = \"\".concat(canvas.height, \"px\");\n        }\n      }\n    }\n\n    var cWidth = canvas.clientWidth || canvas.width;\n    var cHeight = canvas.clientHeight || canvas.height;\n\n    if (ignoreDimensions && widthStyle.hasValue() && heightStyle.hasValue()) {\n      cWidth = widthStyle.getPixels('x');\n      cHeight = heightStyle.getPixels('y');\n    }\n\n    viewPort.setCurrent(cWidth, cHeight);\n\n    if (typeof offsetX === 'number') {\n      element.getAttribute('x', true).setValue(offsetX);\n    }\n\n    if (typeof offsetY === 'number') {\n      element.getAttribute('y', true).setValue(offsetY);\n    }\n\n    if (typeof scaleWidth === 'number' || typeof scaleHeight === 'number') {\n      var viewBox = toNumbers(element.getAttribute('viewBox').getString());\n      var xRatio = 0;\n      var yRatio = 0;\n\n      if (typeof scaleWidth === 'number') {\n        var _widthStyle = element.getStyle('width');\n\n        if (_widthStyle.hasValue()) {\n          xRatio = _widthStyle.getPixels('x') / scaleWidth;\n        } else if (!isNaN(viewBox[2])) {\n          xRatio = viewBox[2] / scaleWidth;\n        }\n      }\n\n      if (typeof scaleHeight === 'number') {\n        var _heightStyle = element.getStyle('height');\n\n        if (_heightStyle.hasValue()) {\n          yRatio = _heightStyle.getPixels('y') / scaleHeight;\n        } else if (!isNaN(viewBox[3])) {\n          yRatio = viewBox[3] / scaleHeight;\n        }\n      }\n\n      if (!xRatio) {\n        xRatio = yRatio;\n      }\n\n      if (!yRatio) {\n        yRatio = xRatio;\n      }\n\n      element.getAttribute('width', true).setValue(scaleWidth);\n      element.getAttribute('height', true).setValue(scaleHeight);\n      var transformStyle = element.getStyle('transform', true, true);\n      transformStyle.setValue(\"\".concat(transformStyle.getString(), \" scale(\").concat(1.0 / xRatio, \", \").concat(1.0 / yRatio, \")\"));\n    } // clear and render\n\n\n    if (!ignoreClear) {\n      ctx.clearRect(0, 0, cWidth, cHeight);\n    }\n\n    element.render(ctx);\n\n    if (isFirstRender) {\n      this.isFirstRender = false;\n    }\n  }\n\n}\nScreen.defaultWindow = defaultWindow;\nScreen.defaultFetch = defaultFetch$1;\n\nvar {\n  defaultFetch\n} = Screen;\nvar DefaultDOMParser = typeof DOMParser !== 'undefined' ? DOMParser : null;\nclass Parser {\n  constructor() {\n    var {\n      fetch = defaultFetch,\n      DOMParser = DefaultDOMParser\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.fetch = fetch;\n    this.DOMParser = DOMParser;\n  }\n\n  parse(resource) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (resource.startsWith('<')) {\n        return _this.parseFromString(resource);\n      }\n\n      return _this.load(resource);\n    })();\n  }\n\n  parseFromString(xml) {\n    var parser = new this.DOMParser();\n\n    try {\n      return this.checkDocument(parser.parseFromString(xml, 'image/svg+xml'));\n    } catch (err) {\n      return this.checkDocument(parser.parseFromString(xml, 'text/xml'));\n    }\n  }\n\n  checkDocument(document) {\n    var parserError = document.getElementsByTagName('parsererror')[0];\n\n    if (parserError) {\n      throw new Error(parserError.textContent);\n    }\n\n    return document;\n  }\n\n  load(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var response = yield _this2.fetch(url);\n      var xml = yield response.text();\n      return _this2.parseFromString(xml);\n    })();\n  }\n\n}\n\nclass Translate {\n  constructor(_, point) {\n    this.type = 'translate';\n    this.point = null;\n    this.point = Point.parse(point);\n  }\n\n  apply(ctx) {\n    var {\n      x,\n      y\n    } = this.point;\n    ctx.translate(x || 0.0, y || 0.0);\n  }\n\n  unapply(ctx) {\n    var {\n      x,\n      y\n    } = this.point;\n    ctx.translate(-1.0 * x || 0.0, -1.0 * y || 0.0);\n  }\n\n  applyToPoint(point) {\n    var {\n      x,\n      y\n    } = this.point;\n    point.applyTransform([1, 0, 0, 1, x || 0.0, y || 0.0]);\n  }\n\n}\n\nclass Rotate {\n  constructor(document, rotate, transformOrigin) {\n    this.type = 'rotate';\n    this.angle = null;\n    this.originX = null;\n    this.originY = null;\n    this.cx = 0;\n    this.cy = 0;\n    var numbers = toNumbers(rotate);\n    this.angle = new Property(document, 'angle', numbers[0]);\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n    this.cx = numbers[1] || 0;\n    this.cy = numbers[2] || 0;\n  }\n\n  apply(ctx) {\n    var {\n      cx,\n      cy,\n      originX,\n      originY,\n      angle\n    } = this;\n    var tx = cx + originX.getPixels('x');\n    var ty = cy + originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.rotate(angle.getRadians());\n    ctx.translate(-tx, -ty);\n  }\n\n  unapply(ctx) {\n    var {\n      cx,\n      cy,\n      originX,\n      originY,\n      angle\n    } = this;\n    var tx = cx + originX.getPixels('x');\n    var ty = cy + originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.rotate(-1.0 * angle.getRadians());\n    ctx.translate(-tx, -ty);\n  }\n\n  applyToPoint(point) {\n    var {\n      cx,\n      cy,\n      angle\n    } = this;\n    var rad = angle.getRadians();\n    point.applyTransform([1, 0, 0, 1, cx || 0.0, cy || 0.0 // this.p.y\n    ]);\n    point.applyTransform([Math.cos(rad), Math.sin(rad), -Math.sin(rad), Math.cos(rad), 0, 0]);\n    point.applyTransform([1, 0, 0, 1, -cx || 0.0, -cy || 0.0 // -this.p.y\n    ]);\n  }\n\n}\n\nclass Scale {\n  constructor(_, scale, transformOrigin) {\n    this.type = 'scale';\n    this.scale = null;\n    this.originX = null;\n    this.originY = null;\n    var scaleSize = Point.parseScale(scale); // Workaround for node-canvas\n\n    if (scaleSize.x === 0 || scaleSize.y === 0) {\n      scaleSize.x = PSEUDO_ZERO;\n      scaleSize.y = PSEUDO_ZERO;\n    }\n\n    this.scale = scaleSize;\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n  }\n\n  apply(ctx) {\n    var {\n      scale: {\n        x,\n        y\n      },\n      originX,\n      originY\n    } = this;\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.scale(x, y || x);\n    ctx.translate(-tx, -ty);\n  }\n\n  unapply(ctx) {\n    var {\n      scale: {\n        x,\n        y\n      },\n      originX,\n      originY\n    } = this;\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.scale(1.0 / x, 1.0 / y || x);\n    ctx.translate(-tx, -ty);\n  }\n\n  applyToPoint(point) {\n    var {\n      x,\n      y\n    } = this.scale;\n    point.applyTransform([x || 0.0, 0, 0, y || 0.0, 0, 0]);\n  }\n\n}\n\nclass Matrix {\n  constructor(_, matrix, transformOrigin) {\n    this.type = 'matrix';\n    this.matrix = [];\n    this.originX = null;\n    this.originY = null;\n    this.matrix = toNumbers(matrix);\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n  }\n\n  apply(ctx) {\n    var {\n      originX,\n      originY,\n      matrix\n    } = this;\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n    ctx.translate(-tx, -ty);\n  }\n\n  unapply(ctx) {\n    var {\n      originX,\n      originY,\n      matrix\n    } = this;\n    var a = matrix[0];\n    var b = matrix[2];\n    var c = matrix[4];\n    var d = matrix[1];\n    var e = matrix[3];\n    var f = matrix[5];\n    var g = 0.0;\n    var h = 0.0;\n    var i = 1.0;\n    var det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g));\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c * h - b * i), det * (a * i - c * g), det * (b * f - c * e), det * (c * d - a * f));\n    ctx.translate(-tx, -ty);\n  }\n\n  applyToPoint(point) {\n    point.applyTransform(this.matrix);\n  }\n\n}\n\nclass Skew extends Matrix {\n  constructor(document, skew, transformOrigin) {\n    super(document, skew, transformOrigin);\n    this.type = 'skew';\n    this.angle = null;\n    this.angle = new Property(document, 'angle', skew);\n  }\n\n}\n\nclass SkewX extends Skew {\n  constructor(document, skew, transformOrigin) {\n    super(document, skew, transformOrigin);\n    this.type = 'skewX';\n    this.matrix = [1, 0, Math.tan(this.angle.getRadians()), 1, 0, 0];\n  }\n\n}\n\nclass SkewY extends Skew {\n  constructor(document, skew, transformOrigin) {\n    super(document, skew, transformOrigin);\n    this.type = 'skewY';\n    this.matrix = [1, Math.tan(this.angle.getRadians()), 0, 1, 0, 0];\n  }\n\n}\n\nfunction parseTransforms(transform) {\n  return compressSpaces(transform).trim().replace(/\\)([a-zA-Z])/g, ') $1').replace(/\\)(\\s?,\\s?)/g, ') ').split(/\\s(?=[a-z])/);\n}\n\nfunction parseTransform(transform) {\n  var [type, value] = transform.split('(');\n  return [type.trim(), value.trim().replace(')', '')];\n}\n\nclass Transform {\n  constructor(document, transform, transformOrigin) {\n    this.document = document;\n    this.transforms = [];\n    var data = parseTransforms(transform);\n    data.forEach(transform => {\n      if (transform === 'none') {\n        return;\n      }\n\n      var [type, value] = parseTransform(transform);\n      var TransformType = Transform.transformTypes[type];\n\n      if (typeof TransformType !== 'undefined') {\n        this.transforms.push(new TransformType(this.document, value, transformOrigin));\n      }\n    });\n  }\n\n  static fromElement(document, element) {\n    var transformStyle = element.getStyle('transform', false, true);\n    var [transformOriginXProperty, transformOriginYProperty = transformOriginXProperty] = element.getStyle('transform-origin', false, true).split();\n    var transformOrigin = [transformOriginXProperty, transformOriginYProperty];\n\n    if (transformStyle.hasValue()) {\n      return new Transform(document, transformStyle.getString(), transformOrigin);\n    }\n\n    return null;\n  }\n\n  apply(ctx) {\n    var {\n      transforms\n    } = this;\n    var len = transforms.length;\n\n    for (var i = 0; i < len; i++) {\n      transforms[i].apply(ctx);\n    }\n  }\n\n  unapply(ctx) {\n    var {\n      transforms\n    } = this;\n    var len = transforms.length;\n\n    for (var i = len - 1; i >= 0; i--) {\n      transforms[i].unapply(ctx);\n    }\n  } // TODO: applyToPoint unused ... remove?\n\n\n  applyToPoint(point) {\n    var {\n      transforms\n    } = this;\n    var len = transforms.length;\n\n    for (var i = 0; i < len; i++) {\n      transforms[i].applyToPoint(point);\n    }\n  }\n\n}\nTransform.transformTypes = {\n  translate: Translate,\n  rotate: Rotate,\n  scale: Scale,\n  matrix: Matrix,\n  skewX: SkewX,\n  skewY: SkewY\n};\n\nclass Element {\n  constructor(document, node) {\n    var captureTextNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.document = document;\n    this.node = node;\n    this.captureTextNodes = captureTextNodes;\n    this.attributes = {};\n    this.styles = {};\n    this.stylesSpecificity = {};\n    this.animationFrozen = false;\n    this.animationFrozenValue = '';\n    this.parent = null;\n    this.children = [];\n\n    if (!node || node.nodeType !== 1) {\n      // ELEMENT_NODE\n      return;\n    } // add attributes\n\n\n    Array.from(node.attributes).forEach(attribute => {\n      var nodeName = normalizeAttributeName(attribute.nodeName);\n      this.attributes[nodeName] = new Property(document, nodeName, attribute.value);\n    });\n    this.addStylesFromStyleDefinition(); // add inline styles\n\n    if (this.getAttribute('style').hasValue()) {\n      var styles = this.getAttribute('style').getString().split(';').map(_ => _.trim());\n      styles.forEach(style => {\n        if (!style) {\n          return;\n        }\n\n        var [name, value] = style.split(':').map(_ => _.trim());\n        this.styles[name] = new Property(document, name, value);\n      });\n    }\n\n    var {\n      definitions\n    } = document;\n    var id = this.getAttribute('id'); // add id\n\n    if (id.hasValue()) {\n      if (!definitions[id.getString()]) {\n        definitions[id.getString()] = this;\n      }\n    }\n\n    Array.from(node.childNodes).forEach(childNode => {\n      if (childNode.nodeType === 1) {\n        this.addChild(childNode); // ELEMENT_NODE\n      } else if (captureTextNodes && (childNode.nodeType === 3 || childNode.nodeType === 4)) {\n        var textNode = document.createTextNode(childNode);\n\n        if (textNode.getText().length > 0) {\n          this.addChild(textNode); // TEXT_NODE\n        }\n      }\n    });\n  }\n\n  getAttribute(name) {\n    var createIfNotExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var attr = this.attributes[name];\n\n    if (!attr && createIfNotExists) {\n      var _attr = new Property(this.document, name, '');\n\n      this.attributes[name] = _attr;\n      return _attr;\n    }\n\n    return attr || Property.empty(this.document);\n  }\n\n  getHrefAttribute() {\n    for (var key in this.attributes) {\n      if (key === 'href' || key.endsWith(':href')) {\n        return this.attributes[key];\n      }\n    }\n\n    return Property.empty(this.document);\n  }\n\n  getStyle(name) {\n    var createIfNotExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var skipAncestors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var style = this.styles[name];\n\n    if (style) {\n      return style;\n    }\n\n    var attr = this.getAttribute(name);\n\n    if (attr !== null && attr !== void 0 && attr.hasValue()) {\n      this.styles[name] = attr; // move up to me to cache\n\n      return attr;\n    }\n\n    if (!skipAncestors) {\n      var {\n        parent\n      } = this;\n\n      if (parent) {\n        var parentStyle = parent.getStyle(name);\n\n        if (parentStyle !== null && parentStyle !== void 0 && parentStyle.hasValue()) {\n          return parentStyle;\n        }\n      }\n    }\n\n    if (createIfNotExists) {\n      var _style = new Property(this.document, name, '');\n\n      this.styles[name] = _style;\n      return _style;\n    }\n\n    return style || Property.empty(this.document);\n  }\n\n  render(ctx) {\n    // don't render display=none\n    // don't render visibility=hidden\n    if (this.getStyle('display').getString() === 'none' || this.getStyle('visibility').getString() === 'hidden') {\n      return;\n    }\n\n    ctx.save();\n\n    if (this.getStyle('mask').hasValue()) {\n      // mask\n      var mask = this.getStyle('mask').getDefinition();\n\n      if (mask) {\n        this.applyEffects(ctx);\n        mask.apply(ctx, this);\n      }\n    } else if (this.getStyle('filter').getValue('none') !== 'none') {\n      // filter\n      var filter = this.getStyle('filter').getDefinition();\n\n      if (filter) {\n        this.applyEffects(ctx);\n        filter.apply(ctx, this);\n      }\n    } else {\n      this.setContext(ctx);\n      this.renderChildren(ctx);\n      this.clearContext(ctx);\n    }\n\n    ctx.restore();\n  }\n\n  setContext(_) {// NO RENDER\n  }\n\n  applyEffects(ctx) {\n    // transform\n    var transform = Transform.fromElement(this.document, this);\n\n    if (transform) {\n      transform.apply(ctx);\n    } // clip\n\n\n    var clipPathStyleProp = this.getStyle('clip-path', false, true);\n\n    if (clipPathStyleProp.hasValue()) {\n      var clip = clipPathStyleProp.getDefinition();\n\n      if (clip) {\n        clip.apply(ctx);\n      }\n    }\n  }\n\n  clearContext(_) {// NO RENDER\n  }\n\n  renderChildren(ctx) {\n    this.children.forEach(child => {\n      child.render(ctx);\n    });\n  }\n\n  addChild(childNode) {\n    var child = childNode instanceof Element ? childNode : this.document.createElement(childNode);\n    child.parent = this;\n\n    if (!Element.ignoreChildTypes.includes(child.type)) {\n      this.children.push(child);\n    }\n  }\n\n  matchesSelector(selector) {\n    var _node$getAttribute;\n\n    var {\n      node\n    } = this;\n\n    if (typeof node.matches === 'function') {\n      return node.matches(selector);\n    }\n\n    var styleClasses = (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'class');\n\n    if (!styleClasses || styleClasses === '') {\n      return false;\n    }\n\n    return styleClasses.split(' ').some(styleClass => \".\".concat(styleClass) === selector);\n  }\n\n  addStylesFromStyleDefinition() {\n    var {\n      styles,\n      stylesSpecificity\n    } = this.document;\n\n    for (var selector in styles) {\n      if (!selector.startsWith('@') && this.matchesSelector(selector)) {\n        var style = styles[selector];\n        var specificity = stylesSpecificity[selector];\n\n        if (style) {\n          for (var name in style) {\n            var existingSpecificity = this.stylesSpecificity[name];\n\n            if (typeof existingSpecificity === 'undefined') {\n              existingSpecificity = '000';\n            }\n\n            if (specificity >= existingSpecificity) {\n              this.styles[name] = style[name];\n              this.stylesSpecificity[name] = specificity;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  removeStyles(element, ignoreStyles) {\n    var toRestore = ignoreStyles.reduce((toRestore, name) => {\n      var styleProp = element.getStyle(name);\n\n      if (!styleProp.hasValue()) {\n        return toRestore;\n      }\n\n      var value = styleProp.getString();\n      styleProp.setValue('');\n      return [...toRestore, [name, value]];\n    }, []);\n    return toRestore;\n  }\n\n  restoreStyles(element, styles) {\n    styles.forEach(_ref => {\n      var [name, value] = _ref;\n      element.getStyle(name, true).setValue(value);\n    });\n  }\n\n  isFirstChild() {\n    var _this$parent;\n\n    return ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.children.indexOf(this)) === 0;\n  }\n\n}\nElement.ignoreChildTypes = ['title'];\n\nclass UnknownElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n  }\n\n}\n\nfunction wrapFontFamily(fontFamily) {\n  var trimmed = fontFamily.trim();\n  return /^('|\")/.test(trimmed) ? trimmed : \"\\\"\".concat(trimmed, \"\\\"\");\n}\n\nfunction prepareFontFamily(fontFamily) {\n  return typeof process === 'undefined' ? fontFamily : fontFamily.trim().split(',').map(wrapFontFamily).join(',');\n}\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\r\n * @param fontStyle\r\n * @returns CSS font style.\r\n */\n\n\nfunction prepareFontStyle(fontStyle) {\n  if (!fontStyle) {\n    return '';\n  }\n\n  var targetFontStyle = fontStyle.trim().toLowerCase();\n\n  switch (targetFontStyle) {\n    case 'normal':\n    case 'italic':\n    case 'oblique':\n    case 'inherit':\n    case 'initial':\n    case 'unset':\n      return targetFontStyle;\n\n    default:\n      if (/^oblique\\s+(-|)\\d+deg$/.test(targetFontStyle)) {\n        return targetFontStyle;\n      }\n\n      return '';\n  }\n}\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\r\n * @param fontWeight\r\n * @returns CSS font weight.\r\n */\n\n\nfunction prepareFontWeight(fontWeight) {\n  if (!fontWeight) {\n    return '';\n  }\n\n  var targetFontWeight = fontWeight.trim().toLowerCase();\n\n  switch (targetFontWeight) {\n    case 'normal':\n    case 'bold':\n    case 'lighter':\n    case 'bolder':\n    case 'inherit':\n    case 'initial':\n    case 'unset':\n      return targetFontWeight;\n\n    default:\n      if (/^[\\d.]+$/.test(targetFontWeight)) {\n        return targetFontWeight;\n      }\n\n      return '';\n  }\n}\n\nclass Font {\n  constructor(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) {\n    var inheritFont = inherit ? typeof inherit === 'string' ? Font.parse(inherit) : inherit : {};\n    this.fontFamily = fontFamily || inheritFont.fontFamily;\n    this.fontSize = fontSize || inheritFont.fontSize;\n    this.fontStyle = fontStyle || inheritFont.fontStyle;\n    this.fontWeight = fontWeight || inheritFont.fontWeight;\n    this.fontVariant = fontVariant || inheritFont.fontVariant;\n  }\n\n  static parse() {\n    var font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var inherit = arguments.length > 1 ? arguments[1] : undefined;\n    var fontStyle = '';\n    var fontVariant = '';\n    var fontWeight = '';\n    var fontSize = '';\n    var fontFamily = '';\n    var parts = compressSpaces(font).trim().split(' ');\n    var set = {\n      fontSize: false,\n      fontStyle: false,\n      fontWeight: false,\n      fontVariant: false\n    };\n    parts.forEach(part => {\n      switch (true) {\n        case !set.fontStyle && Font.styles.includes(part):\n          if (part !== 'inherit') {\n            fontStyle = part;\n          }\n\n          set.fontStyle = true;\n          break;\n\n        case !set.fontVariant && Font.variants.includes(part):\n          if (part !== 'inherit') {\n            fontVariant = part;\n          }\n\n          set.fontStyle = true;\n          set.fontVariant = true;\n          break;\n\n        case !set.fontWeight && Font.weights.includes(part):\n          if (part !== 'inherit') {\n            fontWeight = part;\n          }\n\n          set.fontStyle = true;\n          set.fontVariant = true;\n          set.fontWeight = true;\n          break;\n\n        case !set.fontSize:\n          if (part !== 'inherit') {\n            [fontSize] = part.split('/');\n          }\n\n          set.fontStyle = true;\n          set.fontVariant = true;\n          set.fontWeight = true;\n          set.fontSize = true;\n          break;\n\n        default:\n          if (part !== 'inherit') {\n            fontFamily += part;\n          }\n\n      }\n    });\n    return new Font(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit);\n  }\n\n  toString() {\n    return [prepareFontStyle(this.fontStyle), this.fontVariant, prepareFontWeight(this.fontWeight), this.fontSize, // Wrap fontFamily only on nodejs and only for canvas.ctx\n    prepareFontFamily(this.fontFamily)].join(' ').trim();\n  }\n\n}\nFont.styles = 'normal|italic|oblique|inherit';\nFont.variants = 'normal|small-caps|inherit';\nFont.weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';\n\nclass BoundingBox {\n  constructor() {\n    var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.NaN;\n    var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.NaN;\n    var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.NaN;\n    var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Number.NaN;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  get x() {\n    return this.x1;\n  }\n\n  get y() {\n    return this.y1;\n  }\n\n  get width() {\n    return this.x2 - this.x1;\n  }\n\n  get height() {\n    return this.y2 - this.y1;\n  }\n\n  addPoint(x, y) {\n    if (typeof x !== 'undefined') {\n      if (isNaN(this.x1) || isNaN(this.x2)) {\n        this.x1 = x;\n        this.x2 = x;\n      }\n\n      if (x < this.x1) {\n        this.x1 = x;\n      }\n\n      if (x > this.x2) {\n        this.x2 = x;\n      }\n    }\n\n    if (typeof y !== 'undefined') {\n      if (isNaN(this.y1) || isNaN(this.y2)) {\n        this.y1 = y;\n        this.y2 = y;\n      }\n\n      if (y < this.y1) {\n        this.y1 = y;\n      }\n\n      if (y > this.y2) {\n        this.y2 = y;\n      }\n    }\n  }\n\n  addX(x) {\n    this.addPoint(x, null);\n  }\n\n  addY(y) {\n    this.addPoint(null, y);\n  }\n\n  addBoundingBox(boundingBox) {\n    if (!boundingBox) {\n      return;\n    }\n\n    var {\n      x1,\n      y1,\n      x2,\n      y2\n    } = boundingBox;\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  sumCubic(t, p0, p1, p2, p3) {\n    return Math.pow(1 - t, 3) * p0 + 3 * Math.pow(1 - t, 2) * t * p1 + 3 * (1 - t) * Math.pow(t, 2) * p2 + Math.pow(t, 3) * p3;\n  }\n\n  bezierCurveAdd(forX, p0, p1, p2, p3) {\n    var b = 6 * p0 - 12 * p1 + 6 * p2;\n    var a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;\n    var c = 3 * p1 - 3 * p0;\n\n    if (a === 0) {\n      if (b === 0) {\n        return;\n      }\n\n      var t = -c / b;\n\n      if (0 < t && t < 1) {\n        if (forX) {\n          this.addX(this.sumCubic(t, p0, p1, p2, p3));\n        } else {\n          this.addY(this.sumCubic(t, p0, p1, p2, p3));\n        }\n      }\n\n      return;\n    }\n\n    var b2ac = Math.pow(b, 2) - 4 * c * a;\n\n    if (b2ac < 0) {\n      return;\n    }\n\n    var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\n    if (0 < t1 && t1 < 1) {\n      if (forX) {\n        this.addX(this.sumCubic(t1, p0, p1, p2, p3));\n      } else {\n        this.addY(this.sumCubic(t1, p0, p1, p2, p3));\n      }\n    }\n\n    var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\n    if (0 < t2 && t2 < 1) {\n      if (forX) {\n        this.addX(this.sumCubic(t2, p0, p1, p2, p3));\n      } else {\n        this.addY(this.sumCubic(t2, p0, p1, p2, p3));\n      }\n    }\n  } // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\n\n  addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n    this.addPoint(p0x, p0y);\n    this.addPoint(p3x, p3y);\n    this.bezierCurveAdd(true, p0x, p1x, p2x, p3x);\n    this.bezierCurveAdd(false, p0y, p1y, p2y, p3y);\n  }\n\n  addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n    var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n    var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n    var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n    var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n    this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);\n  }\n\n  isPointInBox(x, y) {\n    var {\n      x1,\n      y1,\n      x2,\n      y2\n    } = this;\n    return x1 <= x && x <= x2 && y1 <= y && y <= y2;\n  }\n\n}\n\nclass PathParser extends SVGPathData {\n  constructor(path) {\n    super(path // Fix spaces after signs.\n    .replace(/([+\\-.])\\s+/gm, '$1') // Remove invalid part.\n    .replace(/[^MmZzLlHhVvCcSsQqTtAae\\d\\s.,+-].*/g, ''));\n    this.control = null;\n    this.start = null;\n    this.current = null;\n    this.command = null;\n    this.commands = this.commands;\n    this.i = -1;\n    this.previousCommand = null;\n    this.points = [];\n    this.angles = [];\n  }\n\n  reset() {\n    this.i = -1;\n    this.command = null;\n    this.previousCommand = null;\n    this.start = new Point(0, 0);\n    this.control = new Point(0, 0);\n    this.current = new Point(0, 0);\n    this.points = [];\n    this.angles = [];\n  }\n\n  isEnd() {\n    var {\n      i,\n      commands\n    } = this;\n    return i >= commands.length - 1;\n  }\n\n  next() {\n    var command = this.commands[++this.i];\n    this.previousCommand = this.command;\n    this.command = command;\n    return command;\n  }\n\n  getPoint() {\n    var xProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'x';\n    var yProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'y';\n    var point = new Point(this.command[xProp], this.command[yProp]);\n    return this.makeAbsolute(point);\n  }\n\n  getAsControlPoint(xProp, yProp) {\n    var point = this.getPoint(xProp, yProp);\n    this.control = point;\n    return point;\n  }\n\n  getAsCurrentPoint(xProp, yProp) {\n    var point = this.getPoint(xProp, yProp);\n    this.current = point;\n    return point;\n  }\n\n  getReflectedControlPoint() {\n    var previousCommand = this.previousCommand.type;\n\n    if (previousCommand !== SVGPathData.CURVE_TO && previousCommand !== SVGPathData.SMOOTH_CURVE_TO && previousCommand !== SVGPathData.QUAD_TO && previousCommand !== SVGPathData.SMOOTH_QUAD_TO) {\n      return this.current;\n    } // reflect point\n\n\n    var {\n      current: {\n        x: cx,\n        y: cy\n      },\n      control: {\n        x: ox,\n        y: oy\n      }\n    } = this;\n    var point = new Point(2 * cx - ox, 2 * cy - oy);\n    return point;\n  }\n\n  makeAbsolute(point) {\n    if (this.command.relative) {\n      var {\n        x,\n        y\n      } = this.current;\n      point.x += x;\n      point.y += y;\n    }\n\n    return point;\n  }\n\n  addMarker(point, from, priorTo) {\n    var {\n      points,\n      angles\n    } = this; // if the last angle isn't filled in because we didn't have this point yet ...\n\n    if (priorTo && angles.length > 0 && !angles[angles.length - 1]) {\n      angles[angles.length - 1] = points[points.length - 1].angleTo(priorTo);\n    }\n\n    this.addMarkerAngle(point, from ? from.angleTo(point) : null);\n  }\n\n  addMarkerAngle(point, angle) {\n    this.points.push(point);\n    this.angles.push(angle);\n  }\n\n  getMarkerPoints() {\n    return this.points;\n  }\n\n  getMarkerAngles() {\n    var {\n      angles\n    } = this;\n    var len = angles.length;\n\n    for (var i = 0; i < len; i++) {\n      if (!angles[i]) {\n        for (var j = i + 1; j < len; j++) {\n          if (angles[j]) {\n            angles[i] = angles[j];\n            break;\n          }\n        }\n      }\n    }\n\n    return angles;\n  }\n\n}\n\nclass RenderedElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.modifiedEmSizeStack = false;\n  }\n\n  calculateOpacity() {\n    var opacity = 1.0; // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n\n    var element = this;\n\n    while (element) {\n      var opacityStyle = element.getStyle('opacity', false, true); // no ancestors on style call\n\n      if (opacityStyle.hasValue(true)) {\n        opacity *= opacityStyle.getNumber();\n      }\n\n      element = element.parent;\n    }\n\n    return opacity;\n  }\n\n  setContext(ctx) {\n    var fromMeasure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!fromMeasure) {\n      // causes stack overflow when measuring text with gradients\n      // fill\n      var fillStyleProp = this.getStyle('fill');\n      var fillOpacityStyleProp = this.getStyle('fill-opacity');\n      var strokeStyleProp = this.getStyle('stroke');\n      var strokeOpacityProp = this.getStyle('stroke-opacity');\n\n      if (fillStyleProp.isUrlDefinition()) {\n        var fillStyle = fillStyleProp.getFillStyleDefinition(this, fillOpacityStyleProp);\n\n        if (fillStyle) {\n          ctx.fillStyle = fillStyle;\n        }\n      } else if (fillStyleProp.hasValue()) {\n        if (fillStyleProp.getString() === 'currentColor') {\n          fillStyleProp.setValue(this.getStyle('color').getColor());\n        }\n\n        var _fillStyle = fillStyleProp.getColor();\n\n        if (_fillStyle !== 'inherit') {\n          ctx.fillStyle = _fillStyle === 'none' ? 'rgba(0,0,0,0)' : _fillStyle;\n        }\n      }\n\n      if (fillOpacityStyleProp.hasValue()) {\n        var _fillStyle2 = new Property(this.document, 'fill', ctx.fillStyle).addOpacity(fillOpacityStyleProp).getColor();\n\n        ctx.fillStyle = _fillStyle2;\n      } // stroke\n\n\n      if (strokeStyleProp.isUrlDefinition()) {\n        var strokeStyle = strokeStyleProp.getFillStyleDefinition(this, strokeOpacityProp);\n\n        if (strokeStyle) {\n          ctx.strokeStyle = strokeStyle;\n        }\n      } else if (strokeStyleProp.hasValue()) {\n        if (strokeStyleProp.getString() === 'currentColor') {\n          strokeStyleProp.setValue(this.getStyle('color').getColor());\n        }\n\n        var _strokeStyle = strokeStyleProp.getString();\n\n        if (_strokeStyle !== 'inherit') {\n          ctx.strokeStyle = _strokeStyle === 'none' ? 'rgba(0,0,0,0)' : _strokeStyle;\n        }\n      }\n\n      if (strokeOpacityProp.hasValue()) {\n        var _strokeStyle2 = new Property(this.document, 'stroke', ctx.strokeStyle).addOpacity(strokeOpacityProp).getString();\n\n        ctx.strokeStyle = _strokeStyle2;\n      }\n\n      var strokeWidthStyleProp = this.getStyle('stroke-width');\n\n      if (strokeWidthStyleProp.hasValue()) {\n        var newLineWidth = strokeWidthStyleProp.getPixels();\n        ctx.lineWidth = !newLineWidth ? PSEUDO_ZERO // browsers don't respect 0 (or node-canvas? :-)\n        : newLineWidth;\n      }\n\n      var strokeLinecapStyleProp = this.getStyle('stroke-linecap');\n      var strokeLinejoinStyleProp = this.getStyle('stroke-linejoin');\n      var strokeMiterlimitProp = this.getStyle('stroke-miterlimit'); // NEED TEST\n      // const pointOrderStyleProp = this.getStyle('paint-order');\n\n      var strokeDasharrayStyleProp = this.getStyle('stroke-dasharray');\n      var strokeDashoffsetProp = this.getStyle('stroke-dashoffset');\n\n      if (strokeLinecapStyleProp.hasValue()) {\n        ctx.lineCap = strokeLinecapStyleProp.getString();\n      }\n\n      if (strokeLinejoinStyleProp.hasValue()) {\n        ctx.lineJoin = strokeLinejoinStyleProp.getString();\n      }\n\n      if (strokeMiterlimitProp.hasValue()) {\n        ctx.miterLimit = strokeMiterlimitProp.getNumber();\n      } // NEED TEST\n      // if (pointOrderStyleProp.hasValue()) {\n      // \t// ?\n      // \tctx.paintOrder = pointOrderStyleProp.getValue();\n      // }\n\n\n      if (strokeDasharrayStyleProp.hasValue() && strokeDasharrayStyleProp.getString() !== 'none') {\n        var gaps = toNumbers(strokeDasharrayStyleProp.getString());\n\n        if (typeof ctx.setLineDash !== 'undefined') {\n          ctx.setLineDash(gaps);\n        } else // @ts-expect-error Handle browser prefix.\n          if (typeof ctx.webkitLineDash !== 'undefined') {\n            // @ts-expect-error Handle browser prefix.\n            ctx.webkitLineDash = gaps;\n          } else // @ts-expect-error Handle browser prefix.\n            if (typeof ctx.mozDash !== 'undefined' && !(gaps.length === 1 && gaps[0] === 0)) {\n              // @ts-expect-error Handle browser prefix.\n              ctx.mozDash = gaps;\n            }\n\n        var offset = strokeDashoffsetProp.getPixels();\n\n        if (typeof ctx.lineDashOffset !== 'undefined') {\n          ctx.lineDashOffset = offset;\n        } else // @ts-expect-error Handle browser prefix.\n          if (typeof ctx.webkitLineDashOffset !== 'undefined') {\n            // @ts-expect-error Handle browser prefix.\n            ctx.webkitLineDashOffset = offset;\n          } else // @ts-expect-error Handle browser prefix.\n            if (typeof ctx.mozDashOffset !== 'undefined') {\n              // @ts-expect-error Handle browser prefix.\n              ctx.mozDashOffset = offset;\n            }\n      }\n    } // font\n\n\n    this.modifiedEmSizeStack = false;\n\n    if (typeof ctx.font !== 'undefined') {\n      var fontStyleProp = this.getStyle('font');\n      var fontStyleStyleProp = this.getStyle('font-style');\n      var fontVariantStyleProp = this.getStyle('font-variant');\n      var fontWeightStyleProp = this.getStyle('font-weight');\n      var fontSizeStyleProp = this.getStyle('font-size');\n      var fontFamilyStyleProp = this.getStyle('font-family');\n      var font = new Font(fontStyleStyleProp.getString(), fontVariantStyleProp.getString(), fontWeightStyleProp.getString(), fontSizeStyleProp.hasValue() ? \"\".concat(fontSizeStyleProp.getPixels(true), \"px\") : '', fontFamilyStyleProp.getString(), Font.parse(fontStyleProp.getString(), ctx.font));\n      fontStyleStyleProp.setValue(font.fontStyle);\n      fontVariantStyleProp.setValue(font.fontVariant);\n      fontWeightStyleProp.setValue(font.fontWeight);\n      fontSizeStyleProp.setValue(font.fontSize);\n      fontFamilyStyleProp.setValue(font.fontFamily);\n      ctx.font = font.toString();\n\n      if (fontSizeStyleProp.isPixels()) {\n        this.document.emSize = fontSizeStyleProp.getPixels();\n        this.modifiedEmSizeStack = true;\n      }\n    }\n\n    if (!fromMeasure) {\n      // effects\n      this.applyEffects(ctx); // opacity\n\n      ctx.globalAlpha = this.calculateOpacity();\n    }\n  }\n\n  clearContext(ctx) {\n    super.clearContext(ctx);\n\n    if (this.modifiedEmSizeStack) {\n      this.document.popEmSize();\n    }\n  }\n\n}\n\nclass PathElement extends RenderedElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'path';\n    this.pathParser = null;\n    this.pathParser = new PathParser(this.getAttribute('d').getString());\n  }\n\n  path(ctx) {\n    var {\n      pathParser\n    } = this;\n    var boundingBox = new BoundingBox();\n    pathParser.reset();\n\n    if (ctx) {\n      ctx.beginPath();\n    }\n\n    while (!pathParser.isEnd()) {\n      switch (pathParser.next().type) {\n        case PathParser.MOVE_TO:\n          this.pathM(ctx, boundingBox);\n          break;\n\n        case PathParser.LINE_TO:\n          this.pathL(ctx, boundingBox);\n          break;\n\n        case PathParser.HORIZ_LINE_TO:\n          this.pathH(ctx, boundingBox);\n          break;\n\n        case PathParser.VERT_LINE_TO:\n          this.pathV(ctx, boundingBox);\n          break;\n\n        case PathParser.CURVE_TO:\n          this.pathC(ctx, boundingBox);\n          break;\n\n        case PathParser.SMOOTH_CURVE_TO:\n          this.pathS(ctx, boundingBox);\n          break;\n\n        case PathParser.QUAD_TO:\n          this.pathQ(ctx, boundingBox);\n          break;\n\n        case PathParser.SMOOTH_QUAD_TO:\n          this.pathT(ctx, boundingBox);\n          break;\n\n        case PathParser.ARC:\n          this.pathA(ctx, boundingBox);\n          break;\n\n        case PathParser.CLOSE_PATH:\n          this.pathZ(ctx, boundingBox);\n          break;\n      }\n    }\n\n    return boundingBox;\n  }\n\n  getBoundingBox(_) {\n    return this.path();\n  }\n\n  getMarkers() {\n    var {\n      pathParser\n    } = this;\n    var points = pathParser.getMarkerPoints();\n    var angles = pathParser.getMarkerAngles();\n    var markers = points.map((point, i) => [point, angles[i]]);\n    return markers;\n  }\n\n  renderChildren(ctx) {\n    this.path(ctx);\n    this.document.screen.mouse.checkPath(this, ctx);\n    var fillRuleStyleProp = this.getStyle('fill-rule');\n\n    if (ctx.fillStyle !== '') {\n      if (fillRuleStyleProp.getString('inherit') !== 'inherit') {\n        ctx.fill(fillRuleStyleProp.getString());\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (ctx.strokeStyle !== '') {\n      if (this.getAttribute('vector-effect').getString() === 'non-scaling-stroke') {\n        ctx.save();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.stroke();\n        ctx.restore();\n      } else {\n        ctx.stroke();\n      }\n    }\n\n    var markers = this.getMarkers();\n\n    if (markers) {\n      var markersLastIndex = markers.length - 1;\n      var markerStartStyleProp = this.getStyle('marker-start');\n      var markerMidStyleProp = this.getStyle('marker-mid');\n      var markerEndStyleProp = this.getStyle('marker-end');\n\n      if (markerStartStyleProp.isUrlDefinition()) {\n        var marker = markerStartStyleProp.getDefinition();\n        var [point, angle] = markers[0];\n        marker.render(ctx, point, angle);\n      }\n\n      if (markerMidStyleProp.isUrlDefinition()) {\n        var _marker = markerMidStyleProp.getDefinition();\n\n        for (var i = 1; i < markersLastIndex; i++) {\n          var [_point, _angle] = markers[i];\n\n          _marker.render(ctx, _point, _angle);\n        }\n      }\n\n      if (markerEndStyleProp.isUrlDefinition()) {\n        var _marker2 = markerEndStyleProp.getDefinition();\n\n        var [_point2, _angle2] = markers[markersLastIndex];\n\n        _marker2.render(ctx, _point2, _angle2);\n      }\n    }\n  }\n\n  static pathM(pathParser) {\n    var point = pathParser.getAsCurrentPoint();\n    pathParser.start = pathParser.current;\n    return {\n      point\n    };\n  }\n\n  pathM(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      point\n    } = PathElement.pathM(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.moveTo(x, y);\n    }\n  }\n\n  static pathL(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var point = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      point\n    };\n  }\n\n  pathL(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point\n    } = PathElement.pathL(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point, current);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n    }\n  }\n\n  static pathH(pathParser) {\n    var {\n      current,\n      command\n    } = pathParser;\n    var point = new Point((command.relative ? current.x : 0) + command.x, current.y);\n    pathParser.current = point;\n    return {\n      current,\n      point\n    };\n  }\n\n  pathH(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point\n    } = PathElement.pathH(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point, current);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n    }\n  }\n\n  static pathV(pathParser) {\n    var {\n      current,\n      command\n    } = pathParser;\n    var point = new Point(current.x, (command.relative ? current.y : 0) + command.y);\n    pathParser.current = point;\n    return {\n      current,\n      point\n    };\n  }\n\n  pathV(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point\n    } = PathElement.pathV(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point, current);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n    }\n  }\n\n  static pathC(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var point = pathParser.getPoint('x1', 'y1');\n    var controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathC(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathC(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, point);\n    boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathS(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var point = pathParser.getReflectedControlPoint();\n    var controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathS(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathS(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, point);\n    boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathQ(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var controlPoint = pathParser.getAsControlPoint('x1', 'y1');\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathQ(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathQ(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n    boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathT(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var controlPoint = pathParser.getReflectedControlPoint();\n    pathParser.control = controlPoint;\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathT(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathT(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n    boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathA(pathParser) {\n    var {\n      current,\n      command\n    } = pathParser;\n    var {\n      rX,\n      rY,\n      xRot,\n      lArcFlag,\n      sweepFlag\n    } = command;\n    var xAxisRotation = xRot * (Math.PI / 180.0);\n    var currentPoint = pathParser.getAsCurrentPoint(); // Conversion from endpoint to center parameterization\n    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n    // x1', y1'\n\n    var currp = new Point(Math.cos(xAxisRotation) * (current.x - currentPoint.x) / 2.0 + Math.sin(xAxisRotation) * (current.y - currentPoint.y) / 2.0, -Math.sin(xAxisRotation) * (current.x - currentPoint.x) / 2.0 + Math.cos(xAxisRotation) * (current.y - currentPoint.y) / 2.0); // adjust radii\n\n    var l = Math.pow(currp.x, 2) / Math.pow(rX, 2) + Math.pow(currp.y, 2) / Math.pow(rY, 2);\n\n    if (l > 1) {\n      rX *= Math.sqrt(l);\n      rY *= Math.sqrt(l);\n    } // cx', cy'\n\n\n    var s = (lArcFlag === sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rX, 2) * Math.pow(rY, 2) - Math.pow(rX, 2) * Math.pow(currp.y, 2) - Math.pow(rY, 2) * Math.pow(currp.x, 2)) / (Math.pow(rX, 2) * Math.pow(currp.y, 2) + Math.pow(rY, 2) * Math.pow(currp.x, 2)));\n\n    if (isNaN(s)) {\n      s = 0;\n    }\n\n    var cpp = new Point(s * rX * currp.y / rY, s * -rY * currp.x / rX); // cx, cy\n\n    var centp = new Point((current.x + currentPoint.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (current.y + currentPoint.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y); // initial angle\n\n    var a1 = vectorsAngle([1, 0], [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY]); // θ1\n    // angle delta\n\n    var u = [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY];\n    var v = [(-currp.x - cpp.x) / rX, (-currp.y - cpp.y) / rY];\n    var ad = vectorsAngle(u, v); // Δθ\n\n    if (vectorsRatio(u, v) <= -1) {\n      ad = Math.PI;\n    }\n\n    if (vectorsRatio(u, v) >= 1) {\n      ad = 0;\n    }\n\n    return {\n      currentPoint,\n      rX,\n      rY,\n      sweepFlag,\n      xAxisRotation,\n      centp,\n      a1,\n      ad\n    };\n  }\n\n  pathA(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      currentPoint,\n      rX,\n      rY,\n      sweepFlag,\n      xAxisRotation,\n      centp,\n      a1,\n      ad\n    } = PathElement.pathA(pathParser); // for markers\n\n    var dir = 1 - sweepFlag ? 1.0 : -1.0;\n    var ah = a1 + dir * (ad / 2.0);\n    var halfWay = new Point(centp.x + rX * Math.cos(ah), centp.y + rY * Math.sin(ah));\n    pathParser.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);\n    pathParser.addMarkerAngle(currentPoint, ah - dir * Math.PI);\n    boundingBox.addPoint(currentPoint.x, currentPoint.y); // TODO: this is too naive, make it better\n\n    if (ctx && !isNaN(a1) && !isNaN(ad)) {\n      var r = rX > rY ? rX : rY;\n      var sx = rX > rY ? 1 : rX / rY;\n      var sy = rX > rY ? rY / rX : 1;\n      ctx.translate(centp.x, centp.y);\n      ctx.rotate(xAxisRotation);\n      ctx.scale(sx, sy);\n      ctx.arc(0, 0, r, a1, a1 + ad, Boolean(1 - sweepFlag));\n      ctx.scale(1 / sx, 1 / sy);\n      ctx.rotate(-xAxisRotation);\n      ctx.translate(-centp.x, -centp.y);\n    }\n  }\n\n  static pathZ(pathParser) {\n    pathParser.current = pathParser.start;\n  }\n\n  pathZ(ctx, boundingBox) {\n    PathElement.pathZ(this.pathParser);\n\n    if (ctx) {\n      // only close path if it is not a straight line\n      if (boundingBox.x1 !== boundingBox.x2 && boundingBox.y1 !== boundingBox.y2) {\n        ctx.closePath();\n      }\n    }\n  }\n\n}\n\nclass GlyphElement extends PathElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'glyph';\n    this.horizAdvX = this.getAttribute('horiz-adv-x').getNumber();\n    this.unicode = this.getAttribute('unicode').getString();\n    this.arabicForm = this.getAttribute('arabic-form').getString();\n  }\n\n}\n\nclass TextElement extends RenderedElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, new.target === TextElement ? true : captureTextNodes);\n    this.type = 'text';\n    this.x = 0;\n    this.y = 0;\n    this.measureCache = -1;\n  }\n\n  setContext(ctx) {\n    var fromMeasure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.setContext(ctx, fromMeasure);\n    var textBaseline = this.getStyle('dominant-baseline').getTextBaseline() || this.getStyle('alignment-baseline').getTextBaseline();\n\n    if (textBaseline) {\n      ctx.textBaseline = textBaseline;\n    }\n  }\n\n  initializeCoordinates() {\n    this.x = 0;\n    this.y = 0;\n    this.leafTexts = [];\n    this.textChunkStart = 0;\n    this.minX = Number.POSITIVE_INFINITY;\n    this.maxX = Number.NEGATIVE_INFINITY;\n  }\n\n  getBoundingBox(ctx) {\n    if (this.type !== 'text') {\n      return this.getTElementBoundingBox(ctx);\n    } // first, calculate child positions\n\n\n    this.initializeCoordinates();\n    this.adjustChildCoordinatesRecursive(ctx);\n    var boundingBox = null; // then calculate bounding box\n\n    this.children.forEach((_, i) => {\n      var childBoundingBox = this.getChildBoundingBox(ctx, this, this, i);\n\n      if (!boundingBox) {\n        boundingBox = childBoundingBox;\n      } else {\n        boundingBox.addBoundingBox(childBoundingBox);\n      }\n    });\n    return boundingBox;\n  }\n\n  getFontSize() {\n    var {\n      document,\n      parent\n    } = this;\n    var inheritFontSize = Font.parse(document.ctx.font).fontSize;\n    var fontSize = parent.getStyle('font-size').getNumber(inheritFontSize);\n    return fontSize;\n  }\n\n  getTElementBoundingBox(ctx) {\n    var fontSize = this.getFontSize();\n    return new BoundingBox(this.x, this.y - fontSize, this.x + this.measureText(ctx), this.y);\n  }\n\n  getGlyph(font, text, i) {\n    var char = text[i];\n    var glyph = null;\n\n    if (font.isArabic) {\n      var len = text.length;\n      var prevChar = text[i - 1];\n      var nextChar = text[i + 1];\n      var arabicForm = 'isolated';\n\n      if ((i === 0 || prevChar === ' ') && i < len - 1 && nextChar !== ' ') {\n        arabicForm = 'terminal';\n      }\n\n      if (i > 0 && prevChar !== ' ' && i < len - 1 && nextChar !== ' ') {\n        arabicForm = 'medial';\n      }\n\n      if (i > 0 && prevChar !== ' ' && (i === len - 1 || nextChar === ' ')) {\n        arabicForm = 'initial';\n      }\n\n      if (typeof font.glyphs[char] !== 'undefined') {\n        // NEED TEST\n        var maybeGlyph = font.glyphs[char];\n        glyph = maybeGlyph instanceof GlyphElement ? maybeGlyph : maybeGlyph[arabicForm];\n      }\n    } else {\n      glyph = font.glyphs[char];\n    }\n\n    if (!glyph) {\n      glyph = font.missingGlyph;\n    }\n\n    return glyph;\n  }\n\n  getText() {\n    return '';\n  }\n\n  getTextFromNode(node) {\n    var textNode = node || this.node;\n    var childNodes = Array.from(textNode.parentNode.childNodes);\n    var index = childNodes.indexOf(textNode);\n    var lastIndex = childNodes.length - 1;\n    var text = compressSpaces( // textNode.value\n    // || textNode.text\n    textNode.textContent || '');\n\n    if (index === 0) {\n      text = trimLeft(text);\n    }\n\n    if (index === lastIndex) {\n      text = trimRight(text);\n    }\n\n    return text;\n  }\n\n  renderChildren(ctx) {\n    if (this.type !== 'text') {\n      this.renderTElementChildren(ctx);\n      return;\n    } // first, calculate child positions\n\n\n    this.initializeCoordinates();\n    this.adjustChildCoordinatesRecursive(ctx); // then render\n\n    this.children.forEach((_, i) => {\n      this.renderChild(ctx, this, this, i);\n    });\n    var {\n      mouse\n    } = this.document.screen; // Do not calc bounding box if mouse is not working.\n\n    if (mouse.isWorking()) {\n      mouse.checkBoundingBox(this, this.getBoundingBox(ctx));\n    }\n  }\n\n  renderTElementChildren(ctx) {\n    var {\n      document,\n      parent\n    } = this;\n    var renderText = this.getText();\n    var customFont = parent.getStyle('font-family').getDefinition();\n\n    if (customFont) {\n      var {\n        unitsPerEm\n      } = customFont.fontFace;\n      var ctxFont = Font.parse(document.ctx.font);\n      var fontSize = parent.getStyle('font-size').getNumber(ctxFont.fontSize);\n      var fontStyle = parent.getStyle('font-style').getString(ctxFont.fontStyle);\n      var scale = fontSize / unitsPerEm;\n      var text = customFont.isRTL ? renderText.split('').reverse().join('') : renderText;\n      var dx = toNumbers(parent.getAttribute('dx').getString());\n      var len = text.length;\n\n      for (var i = 0; i < len; i++) {\n        var glyph = this.getGlyph(customFont, text, i);\n        ctx.translate(this.x, this.y);\n        ctx.scale(scale, -scale);\n        var lw = ctx.lineWidth;\n        ctx.lineWidth = ctx.lineWidth * unitsPerEm / fontSize;\n\n        if (fontStyle === 'italic') {\n          ctx.transform(1, 0, .4, 1, 0, 0);\n        }\n\n        glyph.render(ctx);\n\n        if (fontStyle === 'italic') {\n          ctx.transform(1, 0, -.4, 1, 0, 0);\n        }\n\n        ctx.lineWidth = lw;\n        ctx.scale(1 / scale, -1 / scale);\n        ctx.translate(-this.x, -this.y);\n        this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / unitsPerEm;\n\n        if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n          this.x += dx[i];\n        }\n      }\n\n      return;\n    }\n\n    var {\n      x,\n      y\n    } = this; // NEED TEST\n    // if (ctx.paintOrder === 'stroke') {\n    // \tif (ctx.strokeStyle) {\n    // \t\tctx.strokeText(renderText, x, y);\n    // \t}\n    // \tif (ctx.fillStyle) {\n    // \t\tctx.fillText(renderText, x, y);\n    // \t}\n    // } else {\n\n    if (ctx.fillStyle) {\n      ctx.fillText(renderText, x, y);\n    }\n\n    if (ctx.strokeStyle) {\n      ctx.strokeText(renderText, x, y);\n    } // }\n\n  }\n\n  applyAnchoring() {\n    if (this.textChunkStart >= this.leafTexts.length) {\n      return;\n    } // This is basically the \"Apply anchoring\" part of https://www.w3.org/TR/SVG2/text.html#TextLayoutAlgorithm.\n    // The difference is that we apply the anchoring as soon as a chunk is finished. This saves some extra looping.\n    // Vertical text is not supported.\n\n\n    var firstElement = this.leafTexts[this.textChunkStart];\n    var textAnchor = firstElement.getStyle('text-anchor').getString('start');\n    var isRTL = false; // we treat RTL like LTR\n\n    var shift = 0;\n\n    if (textAnchor === 'start' && !isRTL || textAnchor === 'end' && isRTL) {\n      shift = firstElement.x - this.minX;\n    } else if (textAnchor === 'end' && !isRTL || textAnchor === 'start' && isRTL) {\n      shift = firstElement.x - this.maxX;\n    } else {\n      shift = firstElement.x - (this.minX + this.maxX) / 2;\n    }\n\n    for (var i = this.textChunkStart; i < this.leafTexts.length; i++) {\n      this.leafTexts[i].x += shift;\n    } // start new chunk\n\n\n    this.minX = Number.POSITIVE_INFINITY;\n    this.maxX = Number.NEGATIVE_INFINITY;\n    this.textChunkStart = this.leafTexts.length;\n  }\n\n  adjustChildCoordinatesRecursive(ctx) {\n    this.children.forEach((_, i) => {\n      this.adjustChildCoordinatesRecursiveCore(ctx, this, this, i);\n    });\n    this.applyAnchoring();\n  }\n\n  adjustChildCoordinatesRecursiveCore(ctx, textParent, parent, i) {\n    var child = parent.children[i];\n\n    if (child.children.length > 0) {\n      child.children.forEach((_, i) => {\n        textParent.adjustChildCoordinatesRecursiveCore(ctx, textParent, child, i);\n      });\n    } else {\n      // only leafs are relevant\n      this.adjustChildCoordinates(ctx, textParent, parent, i);\n    }\n  }\n\n  adjustChildCoordinates(ctx, textParent, parent, i) {\n    var child = parent.children[i];\n\n    if (typeof child.measureText !== 'function') {\n      return child;\n    }\n\n    ctx.save();\n    child.setContext(ctx, true);\n    var xAttr = child.getAttribute('x');\n    var yAttr = child.getAttribute('y');\n    var dxAttr = child.getAttribute('dx');\n    var dyAttr = child.getAttribute('dy');\n    var customFont = child.getStyle('font-family').getDefinition();\n    var isRTL = Boolean(customFont) && customFont.isRTL;\n\n    if (i === 0) {\n      // First children inherit attributes from parent(s). Positional attributes\n      // are only inherited from a parent to it's first child.\n      if (!xAttr.hasValue()) {\n        xAttr.setValue(child.getInheritedAttribute('x'));\n      }\n\n      if (!yAttr.hasValue()) {\n        yAttr.setValue(child.getInheritedAttribute('y'));\n      }\n\n      if (!dxAttr.hasValue()) {\n        dxAttr.setValue(child.getInheritedAttribute('dx'));\n      }\n\n      if (!dyAttr.hasValue()) {\n        dyAttr.setValue(child.getInheritedAttribute('dy'));\n      }\n    }\n\n    var width = child.measureText(ctx);\n\n    if (isRTL) {\n      textParent.x -= width;\n    }\n\n    if (xAttr.hasValue()) {\n      // an \"x\" attribute marks the start of a new chunk\n      textParent.applyAnchoring();\n      child.x = xAttr.getPixels('x');\n\n      if (dxAttr.hasValue()) {\n        child.x += dxAttr.getPixels('x');\n      }\n    } else {\n      if (dxAttr.hasValue()) {\n        textParent.x += dxAttr.getPixels('x');\n      }\n\n      child.x = textParent.x;\n    }\n\n    textParent.x = child.x;\n\n    if (!isRTL) {\n      textParent.x += width;\n    }\n\n    if (yAttr.hasValue()) {\n      child.y = yAttr.getPixels('y');\n\n      if (dyAttr.hasValue()) {\n        child.y += dyAttr.getPixels('y');\n      }\n    } else {\n      if (dyAttr.hasValue()) {\n        textParent.y += dyAttr.getPixels('y');\n      }\n\n      child.y = textParent.y;\n    }\n\n    textParent.y = child.y; // update the current chunk and it's bounds\n\n    textParent.leafTexts.push(child);\n    textParent.minX = Math.min(textParent.minX, child.x, child.x + width);\n    textParent.maxX = Math.max(textParent.maxX, child.x, child.x + width);\n    child.clearContext(ctx);\n    ctx.restore();\n    return child;\n  }\n\n  getChildBoundingBox(ctx, textParent, parent, i) {\n    var child = parent.children[i]; // not a text node?\n\n    if (typeof child.getBoundingBox !== 'function') {\n      return null;\n    }\n\n    var boundingBox = child.getBoundingBox(ctx);\n\n    if (!boundingBox) {\n      return null;\n    }\n\n    child.children.forEach((_, i) => {\n      var childBoundingBox = textParent.getChildBoundingBox(ctx, textParent, child, i);\n      boundingBox.addBoundingBox(childBoundingBox);\n    });\n    return boundingBox;\n  }\n\n  renderChild(ctx, textParent, parent, i) {\n    var child = parent.children[i];\n    child.render(ctx);\n    child.children.forEach((_, i) => {\n      textParent.renderChild(ctx, textParent, child, i);\n    });\n  }\n\n  measureText(ctx) {\n    var {\n      measureCache\n    } = this;\n\n    if (~measureCache) {\n      return measureCache;\n    }\n\n    var renderText = this.getText();\n    var measure = this.measureTargetText(ctx, renderText);\n    this.measureCache = measure;\n    return measure;\n  }\n\n  measureTargetText(ctx, targetText) {\n    if (!targetText.length) {\n      return 0;\n    }\n\n    var {\n      parent\n    } = this;\n    var customFont = parent.getStyle('font-family').getDefinition();\n\n    if (customFont) {\n      var fontSize = this.getFontSize();\n      var text = customFont.isRTL ? targetText.split('').reverse().join('') : targetText;\n      var dx = toNumbers(parent.getAttribute('dx').getString());\n      var len = text.length;\n      var _measure = 0;\n\n      for (var i = 0; i < len; i++) {\n        var glyph = this.getGlyph(customFont, text, i);\n        _measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;\n\n        if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n          _measure += dx[i];\n        }\n      }\n\n      return _measure;\n    }\n\n    if (!ctx.measureText) {\n      return targetText.length * 10;\n    }\n\n    ctx.save();\n    this.setContext(ctx, true);\n    var {\n      width: measure\n    } = ctx.measureText(targetText);\n    this.clearContext(ctx);\n    ctx.restore();\n    return measure;\n  }\n  /**\r\n   * Inherits positional attributes from {@link TextElement} parent(s). Attributes\r\n   * are only inherited from a parent to its first child.\r\n   * @param name - The attribute name.\r\n   * @returns The attribute value or null.\r\n   */\n\n\n  getInheritedAttribute(name) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this\n    var current = this;\n\n    while (current instanceof TextElement && current.isFirstChild()) {\n      var parentAttr = current.parent.getAttribute(name);\n\n      if (parentAttr.hasValue(true)) {\n        return parentAttr.getValue('0');\n      }\n\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n}\n\nclass TSpanElement extends TextElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, new.target === TSpanElement ? true : captureTextNodes);\n    this.type = 'tspan'; // if this node has children, then they own the text\n\n    this.text = this.children.length > 0 ? '' : this.getTextFromNode();\n  }\n\n  getText() {\n    return this.text;\n  }\n\n}\n\nclass TextNode extends TSpanElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'textNode';\n  }\n\n}\n\nclass SVGElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'svg';\n    this.root = false;\n  }\n\n  setContext(ctx) {\n    var _this$node$parentNode;\n\n    var {\n      document\n    } = this;\n    var {\n      screen,\n      window\n    } = document;\n    var canvas = ctx.canvas;\n    screen.setDefaults(ctx);\n\n    if (canvas.style && typeof ctx.font !== 'undefined' && window && typeof window.getComputedStyle !== 'undefined') {\n      ctx.font = window.getComputedStyle(canvas).getPropertyValue('font');\n      var fontSizeProp = new Property(document, 'fontSize', Font.parse(ctx.font).fontSize);\n\n      if (fontSizeProp.hasValue()) {\n        document.rootEmSize = fontSizeProp.getPixels('y');\n        document.emSize = document.rootEmSize;\n      }\n    } // create new view port\n\n\n    if (!this.getAttribute('x').hasValue()) {\n      this.getAttribute('x', true).setValue(0);\n    }\n\n    if (!this.getAttribute('y').hasValue()) {\n      this.getAttribute('y', true).setValue(0);\n    }\n\n    var {\n      width,\n      height\n    } = screen.viewPort;\n\n    if (!this.getStyle('width').hasValue()) {\n      this.getStyle('width', true).setValue('100%');\n    }\n\n    if (!this.getStyle('height').hasValue()) {\n      this.getStyle('height', true).setValue('100%');\n    }\n\n    if (!this.getStyle('color').hasValue()) {\n      this.getStyle('color', true).setValue('black');\n    }\n\n    var refXAttr = this.getAttribute('refX');\n    var refYAttr = this.getAttribute('refY');\n    var viewBoxAttr = this.getAttribute('viewBox');\n    var viewBox = viewBoxAttr.hasValue() ? toNumbers(viewBoxAttr.getString()) : null;\n    var clip = !this.root && this.getStyle('overflow').getValue('hidden') !== 'visible';\n    var minX = 0;\n    var minY = 0;\n    var clipX = 0;\n    var clipY = 0;\n\n    if (viewBox) {\n      minX = viewBox[0];\n      minY = viewBox[1];\n    }\n\n    if (!this.root) {\n      width = this.getStyle('width').getPixels('x');\n      height = this.getStyle('height').getPixels('y');\n\n      if (this.type === 'marker') {\n        clipX = minX;\n        clipY = minY;\n        minX = 0;\n        minY = 0;\n      }\n    }\n\n    screen.viewPort.setCurrent(width, height); // Default value of transform-origin is center only for root SVG elements\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform-origin\n\n    if (this.node // is not temporary SVGElement\n    && (!this.parent || ((_this$node$parentNode = this.node.parentNode) === null || _this$node$parentNode === void 0 ? void 0 : _this$node$parentNode.nodeName) === 'foreignObject') && this.getStyle('transform', false, true).hasValue() && !this.getStyle('transform-origin', false, true).hasValue()) {\n      this.getStyle('transform-origin', true, true).setValue('50% 50%');\n    }\n\n    super.setContext(ctx);\n    ctx.translate(this.getAttribute('x').getPixels('x'), this.getAttribute('y').getPixels('y'));\n\n    if (viewBox) {\n      width = viewBox[2];\n      height = viewBox[3];\n    }\n\n    document.setViewBox({\n      ctx,\n      aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n      width: screen.viewPort.width,\n      desiredWidth: width,\n      height: screen.viewPort.height,\n      desiredHeight: height,\n      minX,\n      minY,\n      refX: refXAttr.getValue(),\n      refY: refYAttr.getValue(),\n      clip,\n      clipX,\n      clipY\n    });\n\n    if (viewBox) {\n      screen.viewPort.removeCurrent();\n      screen.viewPort.setCurrent(width, height);\n    }\n  }\n\n  clearContext(ctx) {\n    super.clearContext(ctx);\n    this.document.screen.viewPort.removeCurrent();\n  }\n  /**\r\n   * Resize SVG to fit in given size.\r\n   * @param width\r\n   * @param height\r\n   * @param preserveAspectRatio\r\n   */\n\n\n  resize(width) {\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n    var preserveAspectRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var widthAttr = this.getAttribute('width', true);\n    var heightAttr = this.getAttribute('height', true);\n    var viewBoxAttr = this.getAttribute('viewBox');\n    var styleAttr = this.getAttribute('style');\n    var originWidth = widthAttr.getNumber(0);\n    var originHeight = heightAttr.getNumber(0);\n\n    if (preserveAspectRatio) {\n      if (typeof preserveAspectRatio === 'string') {\n        this.getAttribute('preserveAspectRatio', true).setValue(preserveAspectRatio);\n      } else {\n        var preserveAspectRatioAttr = this.getAttribute('preserveAspectRatio');\n\n        if (preserveAspectRatioAttr.hasValue()) {\n          preserveAspectRatioAttr.setValue(preserveAspectRatioAttr.getString().replace(/^\\s*(\\S.*\\S)\\s*$/, '$1'));\n        }\n      }\n    }\n\n    widthAttr.setValue(width);\n    heightAttr.setValue(height);\n\n    if (!viewBoxAttr.hasValue()) {\n      viewBoxAttr.setValue(\"0 0 \".concat(originWidth || width, \" \").concat(originHeight || height));\n    }\n\n    if (styleAttr.hasValue()) {\n      var widthStyle = this.getStyle('width');\n      var heightStyle = this.getStyle('height');\n\n      if (widthStyle.hasValue()) {\n        widthStyle.setValue(\"\".concat(width, \"px\"));\n      }\n\n      if (heightStyle.hasValue()) {\n        heightStyle.setValue(\"\".concat(height, \"px\"));\n      }\n    }\n  }\n\n}\n\nclass RectElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'rect';\n  }\n\n  path(ctx) {\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width', false, true).getPixels('x');\n    var height = this.getStyle('height', false, true).getPixels('y');\n    var rxAttr = this.getAttribute('rx');\n    var ryAttr = this.getAttribute('ry');\n    var rx = rxAttr.getPixels('x');\n    var ry = ryAttr.getPixels('y');\n\n    if (rxAttr.hasValue() && !ryAttr.hasValue()) {\n      ry = rx;\n    }\n\n    if (ryAttr.hasValue() && !rxAttr.hasValue()) {\n      rx = ry;\n    }\n\n    rx = Math.min(rx, width / 2.0);\n    ry = Math.min(ry, height / 2.0);\n\n    if (ctx) {\n      var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n      ctx.beginPath(); // always start the path so we don't fill prior paths\n\n      if (height > 0 && width > 0) {\n        ctx.moveTo(x + rx, y);\n        ctx.lineTo(x + width - rx, y);\n        ctx.bezierCurveTo(x + width - rx + KAPPA * rx, y, x + width, y + ry - KAPPA * ry, x + width, y + ry);\n        ctx.lineTo(x + width, y + height - ry);\n        ctx.bezierCurveTo(x + width, y + height - ry + KAPPA * ry, x + width - rx + KAPPA * rx, y + height, x + width - rx, y + height);\n        ctx.lineTo(x + rx, y + height);\n        ctx.bezierCurveTo(x + rx - KAPPA * rx, y + height, x, y + height - ry + KAPPA * ry, x, y + height - ry);\n        ctx.lineTo(x, y + ry);\n        ctx.bezierCurveTo(x, y + ry - KAPPA * ry, x + rx - KAPPA * rx, y, x + rx, y);\n        ctx.closePath();\n      }\n    }\n\n    return new BoundingBox(x, y, x + width, y + height);\n  }\n\n  getMarkers() {\n    return null;\n  }\n\n}\n\nclass CircleElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'circle';\n  }\n\n  path(ctx) {\n    var cx = this.getAttribute('cx').getPixels('x');\n    var cy = this.getAttribute('cy').getPixels('y');\n    var r = this.getAttribute('r').getPixels();\n\n    if (ctx && r > 0) {\n      ctx.beginPath();\n      ctx.arc(cx, cy, r, 0, Math.PI * 2, false);\n      ctx.closePath();\n    }\n\n    return new BoundingBox(cx - r, cy - r, cx + r, cy + r);\n  }\n\n  getMarkers() {\n    return null;\n  }\n\n}\n\nclass EllipseElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'ellipse';\n  }\n\n  path(ctx) {\n    var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n    var rx = this.getAttribute('rx').getPixels('x');\n    var ry = this.getAttribute('ry').getPixels('y');\n    var cx = this.getAttribute('cx').getPixels('x');\n    var cy = this.getAttribute('cy').getPixels('y');\n\n    if (ctx && rx > 0 && ry > 0) {\n      ctx.beginPath();\n      ctx.moveTo(cx + rx, cy);\n      ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);\n      ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);\n      ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);\n      ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);\n      ctx.closePath();\n    }\n\n    return new BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);\n  }\n\n  getMarkers() {\n    return null;\n  }\n\n}\n\nclass LineElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'line';\n  }\n\n  getPoints() {\n    return [new Point(this.getAttribute('x1').getPixels('x'), this.getAttribute('y1').getPixels('y')), new Point(this.getAttribute('x2').getPixels('x'), this.getAttribute('y2').getPixels('y'))];\n  }\n\n  path(ctx) {\n    var [{\n      x: x0,\n      y: y0\n    }, {\n      x: x1,\n      y: y1\n    }] = this.getPoints();\n\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n    }\n\n    return new BoundingBox(x0, y0, x1, y1);\n  }\n\n  getMarkers() {\n    var [p0, p1] = this.getPoints();\n    var a = p0.angleTo(p1);\n    return [[p0, a], [p1, a]];\n  }\n\n}\n\nclass PolylineElement extends PathElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'polyline';\n    this.points = [];\n    this.points = Point.parsePath(this.getAttribute('points').getString());\n  }\n\n  path(ctx) {\n    var {\n      points\n    } = this;\n    var [{\n      x: x0,\n      y: y0\n    }] = points;\n    var boundingBox = new BoundingBox(x0, y0);\n\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n    }\n\n    points.forEach(_ref => {\n      var {\n        x,\n        y\n      } = _ref;\n      boundingBox.addPoint(x, y);\n\n      if (ctx) {\n        ctx.lineTo(x, y);\n      }\n    });\n    return boundingBox;\n  }\n\n  getMarkers() {\n    var {\n      points\n    } = this;\n    var lastIndex = points.length - 1;\n    var markers = [];\n    points.forEach((point, i) => {\n      if (i === lastIndex) {\n        return;\n      }\n\n      markers.push([point, point.angleTo(points[i + 1])]);\n    });\n\n    if (markers.length > 0) {\n      markers.push([points[points.length - 1], markers[markers.length - 1][1]]);\n    }\n\n    return markers;\n  }\n\n}\n\nclass PolygonElement extends PolylineElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'polygon';\n  }\n\n  path(ctx) {\n    var boundingBox = super.path(ctx);\n    var [{\n      x,\n      y\n    }] = this.points;\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n      ctx.closePath();\n    }\n\n    return boundingBox;\n  }\n\n}\n\nclass PatternElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'pattern';\n  }\n\n  createPattern(ctx, _, parentOpacityProp) {\n    var width = this.getStyle('width').getPixels('x', true);\n    var height = this.getStyle('height').getPixels('y', true); // render me using a temporary svg element\n\n    var patternSvg = new SVGElement(this.document, null);\n    patternSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n    patternSvg.attributes.width = new Property(this.document, 'width', \"\".concat(width, \"px\"));\n    patternSvg.attributes.height = new Property(this.document, 'height', \"\".concat(height, \"px\"));\n    patternSvg.attributes.transform = new Property(this.document, 'transform', this.getAttribute('patternTransform').getValue());\n    patternSvg.children = this.children;\n    var patternCanvas = this.document.createCanvas(width, height);\n    var patternCtx = patternCanvas.getContext('2d');\n    var xAttr = this.getAttribute('x');\n    var yAttr = this.getAttribute('y');\n\n    if (xAttr.hasValue() && yAttr.hasValue()) {\n      patternCtx.translate(xAttr.getPixels('x', true), yAttr.getPixels('y', true));\n    }\n\n    if (parentOpacityProp.hasValue()) {\n      this.styles['fill-opacity'] = parentOpacityProp;\n    } else {\n      Reflect.deleteProperty(this.styles, 'fill-opacity');\n    } // render 3x3 grid so when we transform there's no white space on edges\n\n\n    for (var x = -1; x <= 1; x++) {\n      for (var y = -1; y <= 1; y++) {\n        patternCtx.save();\n        patternSvg.attributes.x = new Property(this.document, 'x', x * patternCanvas.width);\n        patternSvg.attributes.y = new Property(this.document, 'y', y * patternCanvas.height);\n        patternSvg.render(patternCtx);\n        patternCtx.restore();\n      }\n    }\n\n    var pattern = ctx.createPattern(patternCanvas, 'repeat');\n    return pattern;\n  }\n\n}\n\nclass MarkerElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'marker';\n  }\n\n  render(ctx, point, angle) {\n    if (!point) {\n      return;\n    }\n\n    var {\n      x,\n      y\n    } = point;\n    var orient = this.getAttribute('orient').getString('auto');\n    var markerUnits = this.getAttribute('markerUnits').getString('strokeWidth');\n    ctx.translate(x, y);\n\n    if (orient === 'auto') {\n      ctx.rotate(angle);\n    }\n\n    if (markerUnits === 'strokeWidth') {\n      ctx.scale(ctx.lineWidth, ctx.lineWidth);\n    }\n\n    ctx.save(); // render me using a temporary svg element\n\n    var markerSvg = new SVGElement(this.document, null);\n    markerSvg.type = this.type;\n    markerSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n    markerSvg.attributes.refX = new Property(this.document, 'refX', this.getAttribute('refX').getValue());\n    markerSvg.attributes.refY = new Property(this.document, 'refY', this.getAttribute('refY').getValue());\n    markerSvg.attributes.width = new Property(this.document, 'width', this.getAttribute('markerWidth').getValue());\n    markerSvg.attributes.height = new Property(this.document, 'height', this.getAttribute('markerHeight').getValue());\n    markerSvg.attributes.overflow = new Property(this.document, 'overflow', this.getAttribute('overflow').getValue());\n    markerSvg.attributes.fill = new Property(this.document, 'fill', this.getAttribute('fill').getColor('black'));\n    markerSvg.attributes.stroke = new Property(this.document, 'stroke', this.getAttribute('stroke').getValue('none'));\n    markerSvg.children = this.children;\n    markerSvg.render(ctx);\n    ctx.restore();\n\n    if (markerUnits === 'strokeWidth') {\n      ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);\n    }\n\n    if (orient === 'auto') {\n      ctx.rotate(-angle);\n    }\n\n    ctx.translate(-x, -y);\n  }\n\n}\n\nclass DefsElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'defs';\n  }\n\n  render() {// NOOP\n  }\n\n}\n\nclass GElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'g';\n  }\n\n  getBoundingBox(ctx) {\n    var boundingBox = new BoundingBox();\n    this.children.forEach(child => {\n      boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n    });\n    return boundingBox;\n  }\n\n}\n\nclass GradientElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.attributesToInherit = ['gradientUnits'];\n    this.stops = [];\n    var {\n      stops,\n      children\n    } = this;\n    children.forEach(child => {\n      if (child.type === 'stop') {\n        stops.push(child);\n      }\n    });\n  }\n\n  getGradientUnits() {\n    return this.getAttribute('gradientUnits').getString('objectBoundingBox');\n  }\n\n  createGradient(ctx, element, parentOpacityProp) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    var stopsContainer = this;\n\n    if (this.getHrefAttribute().hasValue()) {\n      stopsContainer = this.getHrefAttribute().getDefinition();\n      this.inheritStopContainer(stopsContainer);\n    }\n\n    var {\n      stops\n    } = stopsContainer;\n    var gradient = this.getGradient(ctx, element);\n\n    if (!gradient) {\n      return this.addParentOpacity(parentOpacityProp, stops[stops.length - 1].color);\n    }\n\n    stops.forEach(stop => {\n      gradient.addColorStop(stop.offset, this.addParentOpacity(parentOpacityProp, stop.color));\n    });\n\n    if (this.getAttribute('gradientTransform').hasValue()) {\n      // render as transformed pattern on temporary canvas\n      var {\n        document\n      } = this;\n      var {\n        MAX_VIRTUAL_PIXELS,\n        viewPort\n      } = document.screen;\n      var [rootView] = viewPort.viewPorts;\n      var rect = new RectElement(document, null);\n      rect.attributes.x = new Property(document, 'x', -MAX_VIRTUAL_PIXELS / 3.0);\n      rect.attributes.y = new Property(document, 'y', -MAX_VIRTUAL_PIXELS / 3.0);\n      rect.attributes.width = new Property(document, 'width', MAX_VIRTUAL_PIXELS);\n      rect.attributes.height = new Property(document, 'height', MAX_VIRTUAL_PIXELS);\n      var group = new GElement(document, null);\n      group.attributes.transform = new Property(document, 'transform', this.getAttribute('gradientTransform').getValue());\n      group.children = [rect];\n      var patternSvg = new SVGElement(document, null);\n      patternSvg.attributes.x = new Property(document, 'x', 0);\n      patternSvg.attributes.y = new Property(document, 'y', 0);\n      patternSvg.attributes.width = new Property(document, 'width', rootView.width);\n      patternSvg.attributes.height = new Property(document, 'height', rootView.height);\n      patternSvg.children = [group];\n      var patternCanvas = document.createCanvas(rootView.width, rootView.height);\n      var patternCtx = patternCanvas.getContext('2d');\n      patternCtx.fillStyle = gradient;\n      patternSvg.render(patternCtx);\n      return patternCtx.createPattern(patternCanvas, 'no-repeat');\n    }\n\n    return gradient;\n  }\n\n  inheritStopContainer(stopsContainer) {\n    this.attributesToInherit.forEach(attributeToInherit => {\n      if (!this.getAttribute(attributeToInherit).hasValue() && stopsContainer.getAttribute(attributeToInherit).hasValue()) {\n        this.getAttribute(attributeToInherit, true).setValue(stopsContainer.getAttribute(attributeToInherit).getValue());\n      }\n    });\n  }\n\n  addParentOpacity(parentOpacityProp, color) {\n    if (parentOpacityProp.hasValue()) {\n      var colorProp = new Property(this.document, 'color', color);\n      return colorProp.addOpacity(parentOpacityProp).getColor();\n    }\n\n    return color;\n  }\n\n}\n\nclass LinearGradientElement extends GradientElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'linearGradient';\n    this.attributesToInherit.push('x1', 'y1', 'x2', 'y2');\n  }\n\n  getGradient(ctx, element) {\n    var isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n    var boundingBox = isBoundingBoxUnits ? element.getBoundingBox(ctx) : null;\n\n    if (isBoundingBoxUnits && !boundingBox) {\n      return null;\n    }\n\n    if (!this.getAttribute('x1').hasValue() && !this.getAttribute('y1').hasValue() && !this.getAttribute('x2').hasValue() && !this.getAttribute('y2').hasValue()) {\n      this.getAttribute('x1', true).setValue(0);\n      this.getAttribute('y1', true).setValue(0);\n      this.getAttribute('x2', true).setValue(1);\n      this.getAttribute('y2', true).setValue(0);\n    }\n\n    var x1 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x1').getNumber() : this.getAttribute('x1').getPixels('x');\n    var y1 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y1').getNumber() : this.getAttribute('y1').getPixels('y');\n    var x2 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x2').getNumber() : this.getAttribute('x2').getPixels('x');\n    var y2 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y2').getNumber() : this.getAttribute('y2').getPixels('y');\n\n    if (x1 === x2 && y1 === y2) {\n      return null;\n    }\n\n    return ctx.createLinearGradient(x1, y1, x2, y2);\n  }\n\n}\n\nclass RadialGradientElement extends GradientElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'radialGradient';\n    this.attributesToInherit.push('cx', 'cy', 'r', 'fx', 'fy', 'fr');\n  }\n\n  getGradient(ctx, element) {\n    var isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n    var boundingBox = element.getBoundingBox(ctx);\n\n    if (isBoundingBoxUnits && !boundingBox) {\n      return null;\n    }\n\n    if (!this.getAttribute('cx').hasValue()) {\n      this.getAttribute('cx', true).setValue('50%');\n    }\n\n    if (!this.getAttribute('cy').hasValue()) {\n      this.getAttribute('cy', true).setValue('50%');\n    }\n\n    if (!this.getAttribute('r').hasValue()) {\n      this.getAttribute('r', true).setValue('50%');\n    }\n\n    var cx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('cx').getNumber() : this.getAttribute('cx').getPixels('x');\n    var cy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('cy').getNumber() : this.getAttribute('cy').getPixels('y');\n    var fx = cx;\n    var fy = cy;\n\n    if (this.getAttribute('fx').hasValue()) {\n      fx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('fx').getNumber() : this.getAttribute('fx').getPixels('x');\n    }\n\n    if (this.getAttribute('fy').hasValue()) {\n      fy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('fy').getNumber() : this.getAttribute('fy').getPixels('y');\n    }\n\n    var r = isBoundingBoxUnits ? (boundingBox.width + boundingBox.height) / 2.0 * this.getAttribute('r').getNumber() : this.getAttribute('r').getPixels();\n    var fr = this.getAttribute('fr').getPixels();\n    return ctx.createRadialGradient(fx, fy, fr, cx, cy, r);\n  }\n\n}\n\nclass StopElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'stop';\n    var offset = Math.max(0, Math.min(1, this.getAttribute('offset').getNumber()));\n    var stopOpacity = this.getStyle('stop-opacity');\n    var stopColor = this.getStyle('stop-color', true);\n\n    if (stopColor.getString() === '') {\n      stopColor.setValue('#000');\n    }\n\n    if (stopOpacity.hasValue()) {\n      stopColor = stopColor.addOpacity(stopOpacity);\n    }\n\n    this.offset = offset;\n    this.color = stopColor.getColor();\n  }\n\n}\n\nclass AnimateElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'animate';\n    this.duration = 0;\n    this.initialValue = null;\n    this.initialUnits = '';\n    this.removed = false;\n    this.frozen = false;\n    document.screen.animations.push(this);\n    this.begin = this.getAttribute('begin').getMilliseconds();\n    this.maxDuration = this.begin + this.getAttribute('dur').getMilliseconds();\n    this.from = this.getAttribute('from');\n    this.to = this.getAttribute('to');\n    this.values = new Property(document, 'values', null);\n    var valuesAttr = this.getAttribute('values');\n\n    if (valuesAttr.hasValue()) {\n      this.values.setValue(valuesAttr.getString().split(';'));\n    }\n  }\n\n  getProperty() {\n    var attributeType = this.getAttribute('attributeType').getString();\n    var attributeName = this.getAttribute('attributeName').getString();\n\n    if (attributeType === 'CSS') {\n      return this.parent.getStyle(attributeName, true);\n    }\n\n    return this.parent.getAttribute(attributeName, true);\n  }\n\n  calcValue() {\n    var {\n      initialUnits\n    } = this;\n    var {\n      progress,\n      from,\n      to\n    } = this.getProgress(); // tween value linearly\n\n    var newValue = from.getNumber() + (to.getNumber() - from.getNumber()) * progress;\n\n    if (initialUnits === '%') {\n      newValue *= 100.0; // numValue() returns 0-1 whereas properties are 0-100\n    }\n\n    return \"\".concat(newValue).concat(initialUnits);\n  }\n\n  update(delta) {\n    var {\n      parent\n    } = this;\n    var prop = this.getProperty(); // set initial value\n\n    if (!this.initialValue) {\n      this.initialValue = prop.getString();\n      this.initialUnits = prop.getUnits();\n    } // if we're past the end time\n\n\n    if (this.duration > this.maxDuration) {\n      var fill = this.getAttribute('fill').getString('remove'); // loop for indefinitely repeating animations\n\n      if (this.getAttribute('repeatCount').getString() === 'indefinite' || this.getAttribute('repeatDur').getString() === 'indefinite') {\n        this.duration = 0;\n      } else if (fill === 'freeze' && !this.frozen) {\n        this.frozen = true;\n        parent.animationFrozen = true;\n        parent.animationFrozenValue = prop.getString();\n      } else if (fill === 'remove' && !this.removed) {\n        this.removed = true;\n        prop.setValue(parent.animationFrozen ? parent.animationFrozenValue : this.initialValue);\n        return true;\n      }\n\n      return false;\n    }\n\n    this.duration += delta; // if we're past the begin time\n\n    var updated = false;\n\n    if (this.begin < this.duration) {\n      var newValue = this.calcValue(); // tween\n\n      var typeAttr = this.getAttribute('type');\n\n      if (typeAttr.hasValue()) {\n        // for transform, etc.\n        var type = typeAttr.getString();\n        newValue = \"\".concat(type, \"(\").concat(newValue, \")\");\n      }\n\n      prop.setValue(newValue);\n      updated = true;\n    }\n\n    return updated;\n  }\n\n  getProgress() {\n    var {\n      document,\n      values\n    } = this;\n    var result = {\n      progress: (this.duration - this.begin) / (this.maxDuration - this.begin)\n    };\n\n    if (values.hasValue()) {\n      var p = result.progress * (values.getValue().length - 1);\n      var lb = Math.floor(p);\n      var ub = Math.ceil(p);\n      result.from = new Property(document, 'from', parseFloat(values.getValue()[lb]));\n      result.to = new Property(document, 'to', parseFloat(values.getValue()[ub]));\n      result.progress = (p - lb) / (ub - lb);\n    } else {\n      result.from = this.from;\n      result.to = this.to;\n    }\n\n    return result;\n  }\n\n}\n\nclass AnimateColorElement extends AnimateElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'animateColor';\n  }\n\n  calcValue() {\n    var {\n      progress,\n      from,\n      to\n    } = this.getProgress();\n    var colorFrom = new RGBColor(from.getColor());\n    var colorTo = new RGBColor(to.getColor());\n\n    if (colorFrom.ok && colorTo.ok) {\n      // tween color linearly\n      var r = colorFrom.r + (colorTo.r - colorFrom.r) * progress;\n      var g = colorFrom.g + (colorTo.g - colorFrom.g) * progress;\n      var b = colorFrom.b + (colorTo.b - colorFrom.b) * progress; // ? alpha\n\n      return \"rgb(\".concat(Math.floor(r), \", \").concat(Math.floor(g), \", \").concat(Math.floor(b), \")\");\n    }\n\n    return this.getAttribute('from').getColor();\n  }\n\n}\n\nclass AnimateTransformElement extends AnimateElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'animateTransform';\n  }\n\n  calcValue() {\n    var {\n      progress,\n      from,\n      to\n    } = this.getProgress(); // tween value linearly\n\n    var transformFrom = toNumbers(from.getString());\n    var transformTo = toNumbers(to.getString());\n    var newValue = transformFrom.map((from, i) => {\n      var to = transformTo[i];\n      return from + (to - from) * progress;\n    }).join(' ');\n    return newValue;\n  }\n\n}\n\nclass FontElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'font';\n    this.glyphs = {};\n    this.horizAdvX = this.getAttribute('horiz-adv-x').getNumber();\n    var {\n      definitions\n    } = document;\n    var {\n      children\n    } = this;\n\n    for (var child of children) {\n      switch (child.type) {\n        case 'font-face':\n          {\n            this.fontFace = child;\n            var fontFamilyStyle = child.getStyle('font-family');\n\n            if (fontFamilyStyle.hasValue()) {\n              definitions[fontFamilyStyle.getString()] = this;\n            }\n\n            break;\n          }\n\n        case 'missing-glyph':\n          this.missingGlyph = child;\n          break;\n\n        case 'glyph':\n          {\n            var glyph = child;\n\n            if (glyph.arabicForm) {\n              this.isRTL = true;\n              this.isArabic = true;\n\n              if (typeof this.glyphs[glyph.unicode] === 'undefined') {\n                this.glyphs[glyph.unicode] = {};\n              }\n\n              this.glyphs[glyph.unicode][glyph.arabicForm] = glyph;\n            } else {\n              this.glyphs[glyph.unicode] = glyph;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n\n  render() {// NO RENDER\n  }\n\n}\n\nclass FontFaceElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'font-face';\n    this.ascent = this.getAttribute('ascent').getNumber();\n    this.descent = this.getAttribute('descent').getNumber();\n    this.unitsPerEm = this.getAttribute('units-per-em').getNumber();\n  }\n\n}\n\nclass MissingGlyphElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'missing-glyph';\n    this.horizAdvX = 0;\n  }\n\n}\n\nclass TRefElement extends TextElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'tref';\n  }\n\n  getText() {\n    var element = this.getHrefAttribute().getDefinition();\n\n    if (element) {\n      var firstChild = element.children[0];\n\n      if (firstChild) {\n        return firstChild.getText();\n      }\n    }\n\n    return '';\n  }\n\n}\n\nclass AElement extends TextElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'a';\n    var {\n      childNodes\n    } = node;\n    var firstChild = childNodes[0];\n    var hasText = childNodes.length > 0 && Array.from(childNodes).every(node => node.nodeType === 3);\n    this.hasText = hasText;\n    this.text = hasText ? this.getTextFromNode(firstChild) : '';\n  }\n\n  getText() {\n    return this.text;\n  }\n\n  renderChildren(ctx) {\n    if (this.hasText) {\n      // render as text element\n      super.renderChildren(ctx);\n      var {\n        document,\n        x,\n        y\n      } = this;\n      var {\n        mouse\n      } = document.screen;\n      var fontSize = new Property(document, 'fontSize', Font.parse(document.ctx.font).fontSize); // Do not calc bounding box if mouse is not working.\n\n      if (mouse.isWorking()) {\n        mouse.checkBoundingBox(this, new BoundingBox(x, y - fontSize.getPixels('y'), x + this.measureText(ctx), y));\n      }\n    } else if (this.children.length > 0) {\n      // render as temporary group\n      var g = new GElement(this.document, null);\n      g.children = this.children;\n      g.parent = this;\n      g.render(ctx);\n    }\n  }\n\n  onClick() {\n    var {\n      window\n    } = this.document;\n\n    if (window) {\n      window.open(this.getHrefAttribute().getString());\n    }\n  }\n\n  onMouseMove() {\n    var ctx = this.document.ctx;\n    ctx.canvas.style.cursor = 'pointer';\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nclass TextPathElement extends TextElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'textPath';\n    this.textWidth = 0;\n    this.textHeight = 0;\n    this.pathLength = -1;\n    this.glyphInfo = null;\n    this.letterSpacingCache = [];\n    this.measuresCache = new Map([['', 0]]);\n    var pathElement = this.getHrefAttribute().getDefinition();\n    this.text = this.getTextFromNode();\n    this.dataArray = this.parsePathData(pathElement);\n  }\n\n  getText() {\n    return this.text;\n  }\n\n  path(ctx) {\n    var {\n      dataArray\n    } = this;\n\n    if (ctx) {\n      ctx.beginPath();\n    }\n\n    dataArray.forEach(_ref => {\n      var {\n        type,\n        points\n      } = _ref;\n\n      switch (type) {\n        case PathParser.LINE_TO:\n          if (ctx) {\n            ctx.lineTo(points[0], points[1]);\n          }\n\n          break;\n\n        case PathParser.MOVE_TO:\n          if (ctx) {\n            ctx.moveTo(points[0], points[1]);\n          }\n\n          break;\n\n        case PathParser.CURVE_TO:\n          if (ctx) {\n            ctx.bezierCurveTo(points[0], points[1], points[2], points[3], points[4], points[5]);\n          }\n\n          break;\n\n        case PathParser.QUAD_TO:\n          if (ctx) {\n            ctx.quadraticCurveTo(points[0], points[1], points[2], points[3]);\n          }\n\n          break;\n\n        case PathParser.ARC:\n          {\n            var [cx, cy, rx, ry, theta, dTheta, psi, fs] = points;\n            var r = rx > ry ? rx : ry;\n            var scaleX = rx > ry ? 1 : rx / ry;\n            var scaleY = rx > ry ? ry / rx : 1;\n\n            if (ctx) {\n              ctx.translate(cx, cy);\n              ctx.rotate(psi);\n              ctx.scale(scaleX, scaleY);\n              ctx.arc(0, 0, r, theta, theta + dTheta, Boolean(1 - fs));\n              ctx.scale(1 / scaleX, 1 / scaleY);\n              ctx.rotate(-psi);\n              ctx.translate(-cx, -cy);\n            }\n\n            break;\n          }\n\n        case PathParser.CLOSE_PATH:\n          if (ctx) {\n            ctx.closePath();\n          }\n\n          break;\n      }\n    });\n  }\n\n  renderChildren(ctx) {\n    this.setTextData(ctx);\n    ctx.save();\n    var textDecoration = this.parent.getStyle('text-decoration').getString();\n    var fontSize = this.getFontSize();\n    var {\n      glyphInfo\n    } = this;\n    var fill = ctx.fillStyle;\n\n    if (textDecoration === 'underline') {\n      ctx.beginPath();\n    }\n\n    glyphInfo.forEach((glyph, i) => {\n      var {\n        p0,\n        p1,\n        rotation,\n        text: partialText\n      } = glyph;\n      ctx.save();\n      ctx.translate(p0.x, p0.y);\n      ctx.rotate(rotation);\n\n      if (ctx.fillStyle) {\n        ctx.fillText(partialText, 0, 0);\n      }\n\n      if (ctx.strokeStyle) {\n        ctx.strokeText(partialText, 0, 0);\n      }\n\n      ctx.restore();\n\n      if (textDecoration === 'underline') {\n        if (i === 0) {\n          ctx.moveTo(p0.x, p0.y + fontSize / 8);\n        }\n\n        ctx.lineTo(p1.x, p1.y + fontSize / 5);\n      } // // To assist with debugging visually, uncomment following\n      //\n      // ctx.beginPath();\n      // if (i % 2)\n      // \tctx.strokeStyle = 'red';\n      // else\n      // \tctx.strokeStyle = 'green';\n      // ctx.moveTo(p0.x, p0.y);\n      // ctx.lineTo(p1.x, p1.y);\n      // ctx.stroke();\n      // ctx.closePath();\n\n    });\n\n    if (textDecoration === 'underline') {\n      ctx.lineWidth = fontSize / 20;\n      ctx.strokeStyle = fill;\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n\n  getLetterSpacingAt() {\n    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.letterSpacingCache[idx] || 0;\n  }\n\n  findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, inputOffset, dy, c, charI) {\n    var offset = inputOffset;\n    var glyphWidth = this.measureText(ctx, c);\n\n    if (c === ' ' && anchor === 'justify' && textFullWidth < fullPathWidth) {\n      glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\n    }\n\n    if (charI > -1) {\n      offset += this.getLetterSpacingAt(charI);\n    }\n\n    var splineStep = this.textHeight / 20;\n    var p0 = this.getEquidistantPointOnPath(offset, splineStep, 0);\n    var p1 = this.getEquidistantPointOnPath(offset + glyphWidth, splineStep, 0);\n    var segment = {\n      p0,\n      p1\n    };\n    var rotation = p0 && p1 ? Math.atan2(p1.y - p0.y, p1.x - p0.x) : 0;\n\n    if (dy) {\n      var dyX = Math.cos(Math.PI / 2 + rotation) * dy;\n      var dyY = Math.cos(-rotation) * dy;\n      segment.p0 = _objectSpread$2(_objectSpread$2({}, p0), {}, {\n        x: p0.x + dyX,\n        y: p0.y + dyY\n      });\n      segment.p1 = _objectSpread$2(_objectSpread$2({}, p1), {}, {\n        x: p1.x + dyX,\n        y: p1.y + dyY\n      });\n    }\n\n    offset += glyphWidth;\n    return {\n      offset,\n      segment,\n      rotation\n    };\n  }\n\n  measureText(ctx, text) {\n    var {\n      measuresCache\n    } = this;\n    var targetText = text || this.getText();\n\n    if (measuresCache.has(targetText)) {\n      return measuresCache.get(targetText);\n    }\n\n    var measure = this.measureTargetText(ctx, targetText);\n    measuresCache.set(targetText, measure);\n    return measure;\n  } // This method supposes what all custom fonts already loaded.\n  // If some font will be loaded after this method call, <textPath> will not be rendered correctly.\n  // You need to call this method manually to update glyphs cache.\n\n\n  setTextData(ctx) {\n    if (this.glyphInfo) {\n      return;\n    }\n\n    var renderText = this.getText();\n    var chars = renderText.split('');\n    var spacesNumber = renderText.split(' ').length - 1;\n    var dx = this.parent.getAttribute('dx').split().map(_ => _.getPixels('x'));\n    var dy = this.parent.getAttribute('dy').getPixels('y');\n    var anchor = this.parent.getStyle('text-anchor').getString('start');\n    var thisSpacing = this.getStyle('letter-spacing');\n    var parentSpacing = this.parent.getStyle('letter-spacing');\n    var letterSpacing = 0;\n\n    if (!thisSpacing.hasValue() || thisSpacing.getValue() === 'inherit') {\n      letterSpacing = parentSpacing.getPixels();\n    } else if (thisSpacing.hasValue()) {\n      if (thisSpacing.getValue() !== 'initial' && thisSpacing.getValue() !== 'unset') {\n        letterSpacing = thisSpacing.getPixels();\n      }\n    } // fill letter-spacing cache\n\n\n    var letterSpacingCache = [];\n    var textLen = renderText.length;\n    this.letterSpacingCache = letterSpacingCache;\n\n    for (var i = 0; i < textLen; i++) {\n      letterSpacingCache.push(typeof dx[i] !== 'undefined' ? dx[i] : letterSpacing);\n    }\n\n    var dxSum = letterSpacingCache.reduce((acc, cur, i) => i === 0 ? 0 : acc + cur || 0, 0);\n    var textWidth = this.measureText(ctx);\n    var textFullWidth = Math.max(textWidth + dxSum, 0);\n    this.textWidth = textWidth;\n    this.textHeight = this.getFontSize();\n    this.glyphInfo = [];\n    var fullPathWidth = this.getPathLength();\n    var startOffset = this.getStyle('startOffset').getNumber(0) * fullPathWidth;\n    var offset = 0;\n\n    if (anchor === 'middle' || anchor === 'center') {\n      offset = -textFullWidth / 2;\n    }\n\n    if (anchor === 'end' || anchor === 'right') {\n      offset = -textFullWidth;\n    }\n\n    offset += startOffset;\n    chars.forEach((char, i) => {\n      // Find such segment what distance between p0 and p1 is approx. width of glyph\n      var {\n        offset: nextOffset,\n        segment,\n        rotation\n      } = this.findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, offset, dy, char, i);\n      offset = nextOffset;\n\n      if (!segment.p0 || !segment.p1) {\n        return;\n      } // const width = this.getLineLength(\n      // \tsegment.p0.x,\n      // \tsegment.p0.y,\n      // \tsegment.p1.x,\n      // \tsegment.p1.y\n      // );\n      // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.\n      // Can foresee having a rough pair table built in that the developer can override as needed.\n      // Or use \"dx\" attribute of the <text> node as a naive replacement\n      // const kern = 0;\n      // placeholder for future implementation\n      // const midpoint = this.getPointOnLine(\n      // \tkern + width / 2.0,\n      // \tsegment.p0.x, segment.p0.y, segment.p1.x, segment.p1.y\n      // );\n\n\n      this.glyphInfo.push({\n        // transposeX: midpoint.x,\n        // transposeY: midpoint.y,\n        text: chars[i],\n        p0: segment.p0,\n        p1: segment.p1,\n        rotation\n      });\n    });\n  }\n\n  parsePathData(path) {\n    this.pathLength = -1; // reset path length\n\n    if (!path) {\n      return [];\n    }\n\n    var pathCommands = [];\n    var {\n      pathParser\n    } = path;\n    pathParser.reset(); // convert l, H, h, V, and v to L\n\n    while (!pathParser.isEnd()) {\n      var {\n        current\n      } = pathParser;\n      var startX = current ? current.x : 0;\n      var startY = current ? current.y : 0;\n      var command = pathParser.next();\n      var nextCommandType = command.type;\n      var points = [];\n\n      switch (command.type) {\n        case PathParser.MOVE_TO:\n          this.pathM(pathParser, points);\n          break;\n\n        case PathParser.LINE_TO:\n          nextCommandType = this.pathL(pathParser, points);\n          break;\n\n        case PathParser.HORIZ_LINE_TO:\n          nextCommandType = this.pathH(pathParser, points);\n          break;\n\n        case PathParser.VERT_LINE_TO:\n          nextCommandType = this.pathV(pathParser, points);\n          break;\n\n        case PathParser.CURVE_TO:\n          this.pathC(pathParser, points);\n          break;\n\n        case PathParser.SMOOTH_CURVE_TO:\n          nextCommandType = this.pathS(pathParser, points);\n          break;\n\n        case PathParser.QUAD_TO:\n          this.pathQ(pathParser, points);\n          break;\n\n        case PathParser.SMOOTH_QUAD_TO:\n          nextCommandType = this.pathT(pathParser, points);\n          break;\n\n        case PathParser.ARC:\n          points = this.pathA(pathParser);\n          break;\n\n        case PathParser.CLOSE_PATH:\n          PathElement.pathZ(pathParser);\n          break;\n      }\n\n      if (command.type !== PathParser.CLOSE_PATH) {\n        pathCommands.push({\n          type: nextCommandType,\n          points,\n          start: {\n            x: startX,\n            y: startY\n          },\n          pathLength: this.calcLength(startX, startY, nextCommandType, points)\n        });\n      } else {\n        pathCommands.push({\n          type: PathParser.CLOSE_PATH,\n          points: [],\n          pathLength: 0\n        });\n      }\n    }\n\n    return pathCommands;\n  }\n\n  pathM(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathM(pathParser).point;\n    points.push(x, y);\n  }\n\n  pathL(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathL(pathParser).point;\n    points.push(x, y);\n    return PathParser.LINE_TO;\n  }\n\n  pathH(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathH(pathParser).point;\n    points.push(x, y);\n    return PathParser.LINE_TO;\n  }\n\n  pathV(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathV(pathParser).point;\n    points.push(x, y);\n    return PathParser.LINE_TO;\n  }\n\n  pathC(pathParser, points) {\n    var {\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathC(pathParser);\n    points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n  }\n\n  pathS(pathParser, points) {\n    var {\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathS(pathParser);\n    points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    return PathParser.CURVE_TO;\n  }\n\n  pathQ(pathParser, points) {\n    var {\n      controlPoint,\n      currentPoint\n    } = PathElement.pathQ(pathParser);\n    points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n  }\n\n  pathT(pathParser, points) {\n    var {\n      controlPoint,\n      currentPoint\n    } = PathElement.pathT(pathParser);\n    points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    return PathParser.QUAD_TO;\n  }\n\n  pathA(pathParser) {\n    var {\n      rX,\n      rY,\n      sweepFlag,\n      xAxisRotation,\n      centp,\n      a1,\n      ad\n    } = PathElement.pathA(pathParser);\n\n    if (sweepFlag === 0 && ad > 0) {\n      ad -= 2 * Math.PI;\n    }\n\n    if (sweepFlag === 1 && ad < 0) {\n      ad += 2 * Math.PI;\n    }\n\n    return [centp.x, centp.y, rX, rY, a1, ad, xAxisRotation, sweepFlag];\n  }\n\n  calcLength(x, y, commandType, points) {\n    var len = 0;\n    var p1 = null;\n    var p2 = null;\n    var t = 0;\n\n    switch (commandType) {\n      case PathParser.LINE_TO:\n        return this.getLineLength(x, y, points[0], points[1]);\n\n      case PathParser.CURVE_TO:\n        // Approximates by breaking curve into 100 line segments\n        len = 0.0;\n        p1 = this.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n\n        for (t = 0.01; t <= 1; t += 0.01) {\n          p2 = this.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n          len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          p1 = p2;\n        }\n\n        return len;\n\n      case PathParser.QUAD_TO:\n        // Approximates by breaking curve into 100 line segments\n        len = 0.0;\n        p1 = this.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n\n        for (t = 0.01; t <= 1; t += 0.01) {\n          p2 = this.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n          len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          p1 = p2;\n        }\n\n        return len;\n\n      case PathParser.ARC:\n        {\n          // Approximates by breaking curve into line segments\n          len = 0.0;\n          var start = points[4]; // 4 = theta\n\n          var dTheta = points[5]; // 5 = dTheta\n\n          var end = points[4] + dTheta;\n          var inc = Math.PI / 180.0; // 1 degree resolution\n\n          if (Math.abs(start - end) < inc) {\n            inc = Math.abs(start - end);\n          } // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi\n\n\n          p1 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n\n          if (dTheta < 0) {\n            // clockwise\n            for (t = start - inc; t > end; t -= inc) {\n              p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n              len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n              p1 = p2;\n            }\n          } else {\n            // counter-clockwise\n            for (t = start + inc; t < end; t += inc) {\n              p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n              len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n              p1 = p2;\n            }\n          }\n\n          p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n          len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          return len;\n        }\n    }\n\n    return 0;\n  }\n\n  getPointOnLine(dist, p1x, p1y, p2x, p2y) {\n    var fromX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : p1x;\n    var fromY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : p1y;\n    var m = (p2y - p1y) / (p2x - p1x + PSEUDO_ZERO);\n    var run = Math.sqrt(dist * dist / (1 + m * m));\n\n    if (p2x < p1x) {\n      run *= -1;\n    }\n\n    var rise = m * run;\n    var pt = null;\n\n    if (p2x === p1x) {\n      // vertical line\n      pt = {\n        x: fromX,\n        y: fromY + rise\n      };\n    } else if ((fromY - p1y) / (fromX - p1x + PSEUDO_ZERO) === m) {\n      pt = {\n        x: fromX + run,\n        y: fromY + rise\n      };\n    } else {\n      var ix = 0;\n      var iy = 0;\n      var len = this.getLineLength(p1x, p1y, p2x, p2y);\n\n      if (len < PSEUDO_ZERO) {\n        return null;\n      }\n\n      var u = (fromX - p1x) * (p2x - p1x) + (fromY - p1y) * (p2y - p1y);\n      u /= len * len;\n      ix = p1x + u * (p2x - p1x);\n      iy = p1y + u * (p2y - p1y);\n      var pRise = this.getLineLength(fromX, fromY, ix, iy);\n      var pRun = Math.sqrt(dist * dist - pRise * pRise);\n      run = Math.sqrt(pRun * pRun / (1 + m * m));\n\n      if (p2x < p1x) {\n        run *= -1;\n      }\n\n      rise = m * run;\n      pt = {\n        x: ix + run,\n        y: iy + rise\n      };\n    }\n\n    return pt;\n  }\n\n  getPointOnPath(distance) {\n    var fullLen = this.getPathLength();\n    var cumulativePathLength = 0;\n    var p = null;\n\n    if (distance < -0.00005 || distance - 0.00005 > fullLen) {\n      return null;\n    }\n\n    var {\n      dataArray\n    } = this;\n\n    for (var command of dataArray) {\n      if (command && (command.pathLength < 0.00005 || cumulativePathLength + command.pathLength + 0.00005 < distance)) {\n        cumulativePathLength += command.pathLength;\n        continue;\n      }\n\n      var delta = distance - cumulativePathLength;\n      var currentT = 0;\n\n      switch (command.type) {\n        case PathParser.LINE_TO:\n          p = this.getPointOnLine(delta, command.start.x, command.start.y, command.points[0], command.points[1], command.start.x, command.start.y);\n          break;\n\n        case PathParser.ARC:\n          {\n            var start = command.points[4]; // 4 = theta\n\n            var dTheta = command.points[5]; // 5 = dTheta\n\n            var end = command.points[4] + dTheta;\n            currentT = start + delta / command.pathLength * dTheta;\n\n            if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {\n              break;\n            }\n\n            p = this.getPointOnEllipticalArc(command.points[0], command.points[1], command.points[2], command.points[3], currentT, command.points[6]);\n            break;\n          }\n\n        case PathParser.CURVE_TO:\n          currentT = delta / command.pathLength;\n\n          if (currentT > 1) {\n            currentT = 1;\n          }\n\n          p = this.getPointOnCubicBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3], command.points[4], command.points[5]);\n          break;\n\n        case PathParser.QUAD_TO:\n          currentT = delta / command.pathLength;\n\n          if (currentT > 1) {\n            currentT = 1;\n          }\n\n          p = this.getPointOnQuadraticBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3]);\n          break;\n      }\n\n      if (p) {\n        return p;\n      }\n\n      break;\n    }\n\n    return null;\n  }\n\n  getLineLength(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n\n  getPathLength() {\n    if (this.pathLength === -1) {\n      this.pathLength = this.dataArray.reduce((length, command) => command.pathLength > 0 ? length + command.pathLength : length, 0);\n    }\n\n    return this.pathLength;\n  }\n\n  getPointOnCubicBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n    var x = p4x * CB1(pct) + p3x * CB2(pct) + p2x * CB3(pct) + p1x * CB4(pct);\n    var y = p4y * CB1(pct) + p3y * CB2(pct) + p2y * CB3(pct) + p1y * CB4(pct);\n    return {\n      x,\n      y\n    };\n  }\n\n  getPointOnQuadraticBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y) {\n    var x = p3x * QB1(pct) + p2x * QB2(pct) + p1x * QB3(pct);\n    var y = p3y * QB1(pct) + p2y * QB2(pct) + p1y * QB3(pct);\n    return {\n      x,\n      y\n    };\n  }\n\n  getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {\n    var cosPsi = Math.cos(psi);\n    var sinPsi = Math.sin(psi);\n    var pt = {\n      x: rx * Math.cos(theta),\n      y: ry * Math.sin(theta)\n    };\n    return {\n      x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n      y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n    };\n  } // TODO need some optimisations. possibly build cache only for curved segments?\n\n\n  buildEquidistantCache(inputStep, inputPrecision) {\n    var fullLen = this.getPathLength();\n    var precision = inputPrecision || 0.25; // accuracy vs performance\n\n    var step = inputStep || fullLen / 100;\n\n    if (!this.equidistantCache || this.equidistantCache.step !== step || this.equidistantCache.precision !== precision) {\n      // Prepare cache\n      this.equidistantCache = {\n        step,\n        precision,\n        points: []\n      }; // Calculate points\n\n      var s = 0;\n\n      for (var l = 0; l <= fullLen; l += precision) {\n        var p0 = this.getPointOnPath(l);\n        var p1 = this.getPointOnPath(l + precision);\n\n        if (!p0 || !p1) {\n          continue;\n        }\n\n        s += this.getLineLength(p0.x, p0.y, p1.x, p1.y);\n\n        if (s >= step) {\n          this.equidistantCache.points.push({\n            x: p0.x,\n            y: p0.y,\n            distance: l\n          });\n          s -= step;\n        }\n      }\n    }\n  }\n\n  getEquidistantPointOnPath(targetDistance, step, precision) {\n    this.buildEquidistantCache(step, precision);\n\n    if (targetDistance < 0 || targetDistance - this.getPathLength() > 0.00005) {\n      return null;\n    }\n\n    var idx = Math.round(targetDistance / this.getPathLength() * (this.equidistantCache.points.length - 1));\n    return this.equidistantCache.points[idx] || null;\n  }\n\n}\n\nvar dataUriRegex = /^\\s*data:(([^/,;]+\\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;\nclass ImageElement extends RenderedElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'image';\n    this.loaded = false;\n    var href = this.getHrefAttribute().getString();\n\n    if (!href) {\n      return;\n    }\n\n    var isSvg = href.endsWith('.svg') || /^\\s*data:image\\/svg\\+xml/i.test(href);\n    document.images.push(this);\n\n    if (!isSvg) {\n      void this.loadImage(href);\n    } else {\n      void this.loadSvg(href);\n    }\n\n    this.isSvg = isSvg;\n  }\n\n  loadImage(href) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        var image = yield _this.document.createImage(href);\n        _this.image = image;\n      } catch (err) {\n        console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), err);\n      }\n\n      _this.loaded = true;\n    })();\n  }\n\n  loadSvg(href) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var match = dataUriRegex.exec(href);\n\n      if (match) {\n        var data = match[5];\n\n        if (match[4] === 'base64') {\n          _this2.image = atob(data);\n        } else {\n          _this2.image = decodeURIComponent(data);\n        }\n      } else {\n        try {\n          var response = yield _this2.document.fetch(href);\n          var svg = yield response.text();\n          _this2.image = svg;\n        } catch (err) {\n          console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), err);\n        }\n      }\n\n      _this2.loaded = true;\n    })();\n  }\n\n  renderChildren(ctx) {\n    var {\n      document,\n      image,\n      loaded\n    } = this;\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width').getPixels('x');\n    var height = this.getStyle('height').getPixels('y');\n\n    if (!loaded || !image || !width || !height) {\n      return;\n    }\n\n    ctx.save();\n    ctx.translate(x, y);\n\n    if (this.isSvg) {\n      var subDocument = document.canvg.forkString(ctx, this.image, {\n        ignoreMouse: true,\n        ignoreAnimation: true,\n        ignoreDimensions: true,\n        ignoreClear: true,\n        offsetX: 0,\n        offsetY: 0,\n        scaleWidth: width,\n        scaleHeight: height\n      });\n      subDocument.document.documentElement.parent = this;\n      void subDocument.render();\n    } else {\n      var _image = this.image;\n      document.setViewBox({\n        ctx,\n        aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n        width,\n        desiredWidth: _image.width,\n        height,\n        desiredHeight: _image.height\n      });\n\n      if (this.loaded) {\n        if (typeof _image.complete === 'undefined' || _image.complete) {\n          ctx.drawImage(_image, 0, 0);\n        }\n      }\n    }\n\n    ctx.restore();\n  }\n\n  getBoundingBox() {\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width').getPixels('x');\n    var height = this.getStyle('height').getPixels('y');\n    return new BoundingBox(x, y, x + width, y + height);\n  }\n\n}\n\nclass SymbolElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'symbol';\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\n\nclass SVGFontLoader {\n  constructor(document) {\n    this.document = document;\n    this.loaded = false;\n    document.fonts.push(this);\n  }\n\n  load(fontFamily, url) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        var {\n          document\n        } = _this;\n        var svgDocument = yield document.canvg.parser.load(url);\n        var fonts = svgDocument.getElementsByTagName('font');\n        Array.from(fonts).forEach(fontNode => {\n          var font = document.createElement(fontNode);\n          document.definitions[fontFamily] = font;\n        });\n      } catch (err) {\n        console.error(\"Error while loading font \\\"\".concat(url, \"\\\":\"), err);\n      }\n\n      _this.loaded = true;\n    })();\n  }\n\n}\n\nclass StyleElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'style';\n    var css = compressSpaces(Array.from(node.childNodes) // NEED TEST\n    .map(_ => _.textContent).join('').replace(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/)|(^[\\s]*\\/\\/.*)/gm, '') // remove comments\n    .replace(/@import.*;/g, '') // remove imports\n    );\n    var cssDefs = css.split('}');\n    cssDefs.forEach(_ => {\n      var def = _.trim();\n\n      if (!def) {\n        return;\n      }\n\n      var cssParts = def.split('{');\n      var cssClasses = cssParts[0].split(',');\n      var cssProps = cssParts[1].split(';');\n      cssClasses.forEach(_ => {\n        var cssClass = _.trim();\n\n        if (!cssClass) {\n          return;\n        }\n\n        var props = document.styles[cssClass] || {};\n        cssProps.forEach(cssProp => {\n          var prop = cssProp.indexOf(':');\n          var name = cssProp.substr(0, prop).trim();\n          var value = cssProp.substr(prop + 1, cssProp.length - prop).trim();\n\n          if (name && value) {\n            props[name] = new Property(document, name, value);\n          }\n        });\n        document.styles[cssClass] = props;\n        document.stylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);\n\n        if (cssClass === '@font-face') {\n          //  && !nodeEnv\n          var fontFamily = props['font-family'].getString().replace(/\"|'/g, '');\n          var srcs = props.src.getString().split(',');\n          srcs.forEach(src => {\n            if (src.indexOf('format(\"svg\")') > 0) {\n              var url = parseExternalUrl(src);\n\n              if (url) {\n                void new SVGFontLoader(document).load(fontFamily, url);\n              }\n            }\n          });\n        }\n      });\n    });\n  }\n\n}\nStyleElement.parseExternalUrl = parseExternalUrl;\n\nclass UseElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'use';\n  }\n\n  setContext(ctx) {\n    super.setContext(ctx);\n    var xAttr = this.getAttribute('x');\n    var yAttr = this.getAttribute('y');\n\n    if (xAttr.hasValue()) {\n      ctx.translate(xAttr.getPixels('x'), 0);\n    }\n\n    if (yAttr.hasValue()) {\n      ctx.translate(0, yAttr.getPixels('y'));\n    }\n  }\n\n  path(ctx) {\n    var {\n      element\n    } = this;\n\n    if (element) {\n      element.path(ctx);\n    }\n  }\n\n  renderChildren(ctx) {\n    var {\n      document,\n      element\n    } = this;\n\n    if (element) {\n      var tempSvg = element;\n\n      if (element.type === 'symbol') {\n        // render me using a temporary svg element in symbol cases (http://www.w3.org/TR/SVG/struct.html#UseElement)\n        tempSvg = new SVGElement(document, null);\n        tempSvg.attributes.viewBox = new Property(document, 'viewBox', element.getAttribute('viewBox').getString());\n        tempSvg.attributes.preserveAspectRatio = new Property(document, 'preserveAspectRatio', element.getAttribute('preserveAspectRatio').getString());\n        tempSvg.attributes.overflow = new Property(document, 'overflow', element.getAttribute('overflow').getString());\n        tempSvg.children = element.children; // element is still the parent of the children\n\n        element.styles.opacity = new Property(document, 'opacity', this.calculateOpacity());\n      }\n\n      if (tempSvg.type === 'svg') {\n        var widthStyle = this.getStyle('width', false, true);\n        var heightStyle = this.getStyle('height', false, true); // if symbol or svg, inherit width/height from me\n\n        if (widthStyle.hasValue()) {\n          tempSvg.attributes.width = new Property(document, 'width', widthStyle.getString());\n        }\n\n        if (heightStyle.hasValue()) {\n          tempSvg.attributes.height = new Property(document, 'height', heightStyle.getString());\n        }\n      }\n\n      var oldParent = tempSvg.parent;\n      tempSvg.parent = this;\n      tempSvg.render(ctx);\n      tempSvg.parent = oldParent;\n    }\n  }\n\n  getBoundingBox(ctx) {\n    var {\n      element\n    } = this;\n\n    if (element) {\n      return element.getBoundingBox(ctx);\n    }\n\n    return null;\n  }\n\n  elementTransform() {\n    var {\n      document,\n      element\n    } = this;\n    return Transform.fromElement(document, element);\n  }\n\n  get element() {\n    if (!this.cachedElement) {\n      this.cachedElement = this.getHrefAttribute().getDefinition();\n    }\n\n    return this.cachedElement;\n  }\n\n}\n\nfunction imGet(img, x, y, width, _height, rgba) {\n  return img[y * width * 4 + x * 4 + rgba];\n}\n\nfunction imSet(img, x, y, width, _height, rgba, val) {\n  img[y * width * 4 + x * 4 + rgba] = val;\n}\n\nfunction m(matrix, i, v) {\n  var mi = matrix[i];\n  return mi * v;\n}\n\nfunction c(a, m1, m2, m3) {\n  return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;\n}\n\nclass FeColorMatrixElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'feColorMatrix';\n    var matrix = toNumbers(this.getAttribute('values').getString());\n\n    switch (this.getAttribute('type').getString('matrix')) {\n      // http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement\n      case 'saturate':\n        {\n          var s = matrix[0];\n          /* eslint-disable array-element-newline */\n\n          matrix = [0.213 + 0.787 * s, 0.715 - 0.715 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 + 0.285 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 - 0.715 * s, 0.072 + 0.928 * s, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          /* eslint-enable array-element-newline */\n\n          break;\n        }\n\n      case 'hueRotate':\n        {\n          var a = matrix[0] * Math.PI / 180.0;\n          /* eslint-disable array-element-newline */\n\n          matrix = [c(a, 0.213, 0.787, -0.213), c(a, 0.715, -0.715, -0.715), c(a, 0.072, -0.072, 0.928), 0, 0, c(a, 0.213, -0.213, 0.143), c(a, 0.715, 0.285, 0.140), c(a, 0.072, -0.072, -0.283), 0, 0, c(a, 0.213, -0.213, -0.787), c(a, 0.715, -0.715, 0.715), c(a, 0.072, 0.928, 0.072), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          /* eslint-enable array-element-newline */\n\n          break;\n        }\n\n      case 'luminanceToAlpha':\n        /* eslint-disable array-element-newline */\n        matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2125, 0.7154, 0.0721, 0, 0, 0, 0, 0, 0, 1];\n        /* eslint-enable array-element-newline */\n\n        break;\n    }\n\n    this.matrix = matrix;\n    this.includeOpacity = this.getAttribute('includeOpacity').hasValue();\n  }\n\n  apply(ctx, _x, _y, width, height) {\n    // assuming x==0 && y==0 for now\n    var {\n      includeOpacity,\n      matrix\n    } = this;\n    var srcData = ctx.getImageData(0, 0, width, height);\n\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var r = imGet(srcData.data, x, y, width, height, 0);\n        var g = imGet(srcData.data, x, y, width, height, 1);\n        var b = imGet(srcData.data, x, y, width, height, 2);\n        var a = imGet(srcData.data, x, y, width, height, 3);\n        var nr = m(matrix, 0, r) + m(matrix, 1, g) + m(matrix, 2, b) + m(matrix, 3, a) + m(matrix, 4, 1);\n        var ng = m(matrix, 5, r) + m(matrix, 6, g) + m(matrix, 7, b) + m(matrix, 8, a) + m(matrix, 9, 1);\n        var nb = m(matrix, 10, r) + m(matrix, 11, g) + m(matrix, 12, b) + m(matrix, 13, a) + m(matrix, 14, 1);\n        var na = m(matrix, 15, r) + m(matrix, 16, g) + m(matrix, 17, b) + m(matrix, 18, a) + m(matrix, 19, 1);\n\n        if (includeOpacity) {\n          nr = 0;\n          ng = 0;\n          nb = 0;\n          na *= a / 255;\n        }\n\n        imSet(srcData.data, x, y, width, height, 0, nr);\n        imSet(srcData.data, x, y, width, height, 1, ng);\n        imSet(srcData.data, x, y, width, height, 2, nb);\n        imSet(srcData.data, x, y, width, height, 3, na);\n      }\n    }\n\n    ctx.clearRect(0, 0, width, height);\n    ctx.putImageData(srcData, 0, 0);\n  }\n\n}\n\nclass MaskElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'mask';\n  }\n\n  apply(ctx, element) {\n    var {\n      document\n    } = this; // render as temp svg\n\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width').getPixels('x');\n    var height = this.getStyle('height').getPixels('y');\n\n    if (!width && !height) {\n      var boundingBox = new BoundingBox();\n      this.children.forEach(child => {\n        boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n      });\n      x = Math.floor(boundingBox.x1);\n      y = Math.floor(boundingBox.y1);\n      width = Math.floor(boundingBox.width);\n      height = Math.floor(boundingBox.height);\n    }\n\n    var ignoredStyles = this.removeStyles(element, MaskElement.ignoreStyles);\n    var maskCanvas = document.createCanvas(x + width, y + height);\n    var maskCtx = maskCanvas.getContext('2d');\n    document.screen.setDefaults(maskCtx);\n    this.renderChildren(maskCtx); // convert mask to alpha with a fake node\n    // TODO: refactor out apply from feColorMatrix\n\n    new FeColorMatrixElement(document, {\n      nodeType: 1,\n      childNodes: [],\n      attributes: [{\n        nodeName: 'type',\n        value: 'luminanceToAlpha'\n      }, {\n        nodeName: 'includeOpacity',\n        value: 'true'\n      }]\n    }).apply(maskCtx, 0, 0, x + width, y + height);\n    var tmpCanvas = document.createCanvas(x + width, y + height);\n    var tmpCtx = tmpCanvas.getContext('2d');\n    document.screen.setDefaults(tmpCtx);\n    element.render(tmpCtx);\n    tmpCtx.globalCompositeOperation = 'destination-in';\n    tmpCtx.fillStyle = maskCtx.createPattern(maskCanvas, 'no-repeat');\n    tmpCtx.fillRect(0, 0, x + width, y + height);\n    ctx.fillStyle = tmpCtx.createPattern(tmpCanvas, 'no-repeat');\n    ctx.fillRect(0, 0, x + width, y + height); // reassign mask\n\n    this.restoreStyles(element, ignoredStyles);\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\nMaskElement.ignoreStyles = ['mask', 'transform', 'clip-path'];\n\nvar noop = () => {// NOOP\n};\n\nclass ClipPathElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'clipPath';\n  }\n\n  apply(ctx) {\n    var {\n      document\n    } = this;\n    var contextProto = Reflect.getPrototypeOf(ctx);\n    var {\n      beginPath,\n      closePath\n    } = ctx;\n\n    if (contextProto) {\n      contextProto.beginPath = noop;\n      contextProto.closePath = noop;\n    }\n\n    Reflect.apply(beginPath, ctx, []);\n    this.children.forEach(child => {\n      if (typeof child.path === 'undefined') {\n        return;\n      }\n\n      var transform = typeof child.elementTransform !== 'undefined' ? child.elementTransform() : null; // handle <use />\n\n      if (!transform) {\n        transform = Transform.fromElement(document, child);\n      }\n\n      if (transform) {\n        transform.apply(ctx);\n      }\n\n      child.path(ctx);\n\n      if (contextProto) {\n        contextProto.closePath = closePath;\n      }\n\n      if (transform) {\n        transform.unapply(ctx);\n      }\n    });\n    Reflect.apply(closePath, ctx, []);\n    ctx.clip();\n\n    if (contextProto) {\n      contextProto.beginPath = beginPath;\n      contextProto.closePath = closePath;\n    }\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\n\nclass FilterElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'filter';\n  }\n\n  apply(ctx, element) {\n    // render as temp svg\n    var {\n      document,\n      children\n    } = this;\n    var boundingBox = element.getBoundingBox(ctx);\n\n    if (!boundingBox) {\n      return;\n    }\n\n    var px = 0;\n    var py = 0;\n    children.forEach(child => {\n      var efd = child.extraFilterDistance || 0;\n      px = Math.max(px, efd);\n      py = Math.max(py, efd);\n    });\n    var width = Math.floor(boundingBox.width);\n    var height = Math.floor(boundingBox.height);\n    var tmpCanvasWidth = width + 2 * px;\n    var tmpCanvasHeight = height + 2 * py;\n\n    if (tmpCanvasWidth < 1 || tmpCanvasHeight < 1) {\n      return;\n    }\n\n    var x = Math.floor(boundingBox.x);\n    var y = Math.floor(boundingBox.y);\n    var ignoredStyles = this.removeStyles(element, FilterElement.ignoreStyles);\n    var tmpCanvas = document.createCanvas(tmpCanvasWidth, tmpCanvasHeight);\n    var tmpCtx = tmpCanvas.getContext('2d');\n    document.screen.setDefaults(tmpCtx);\n    tmpCtx.translate(-x + px, -y + py);\n    element.render(tmpCtx); // apply filters\n\n    children.forEach(child => {\n      if (typeof child.apply === 'function') {\n        child.apply(tmpCtx, 0, 0, tmpCanvasWidth, tmpCanvasHeight);\n      }\n    }); // render on me\n\n    ctx.drawImage(tmpCanvas, 0, 0, tmpCanvasWidth, tmpCanvasHeight, x - px, y - py, tmpCanvasWidth, tmpCanvasHeight);\n    this.restoreStyles(element, ignoredStyles);\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\nFilterElement.ignoreStyles = ['filter', 'transform', 'clip-path'];\n\nclass FeDropShadowElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'feDropShadow';\n    this.addStylesFromStyleDefinition();\n  }\n\n  apply(_, _x, _y, _width, _height) {// TODO: implement\n  }\n\n}\n\nclass FeMorphologyElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'feMorphology';\n  }\n\n  apply(_, _x, _y, _width, _height) {// TODO: implement\n  }\n\n}\n\nclass FeCompositeElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'feComposite';\n  }\n\n  apply(_, _x, _y, _width, _height) {// TODO: implement\n  }\n\n}\n\nclass FeGaussianBlurElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'feGaussianBlur';\n    this.blurRadius = Math.floor(this.getAttribute('stdDeviation').getNumber());\n    this.extraFilterDistance = this.blurRadius;\n  }\n\n  apply(ctx, x, y, width, height) {\n    var {\n      document,\n      blurRadius\n    } = this;\n    var body = document.window ? document.window.document.body : null;\n    var canvas = ctx.canvas; // StackBlur requires canvas be on document\n\n    canvas.id = document.getUniqueId();\n\n    if (body) {\n      canvas.style.display = 'none';\n      body.appendChild(canvas);\n    }\n\n    canvasRGBA(canvas, x, y, width, height, blurRadius);\n\n    if (body) {\n      body.removeChild(canvas);\n    }\n  }\n\n}\n\nclass TitleElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'title';\n  }\n\n}\n\nclass DescElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'desc';\n  }\n\n}\n\nvar elements = {\n  'svg': SVGElement,\n  'rect': RectElement,\n  'circle': CircleElement,\n  'ellipse': EllipseElement,\n  'line': LineElement,\n  'polyline': PolylineElement,\n  'polygon': PolygonElement,\n  'path': PathElement,\n  'pattern': PatternElement,\n  'marker': MarkerElement,\n  'defs': DefsElement,\n  'linearGradient': LinearGradientElement,\n  'radialGradient': RadialGradientElement,\n  'stop': StopElement,\n  'animate': AnimateElement,\n  'animateColor': AnimateColorElement,\n  'animateTransform': AnimateTransformElement,\n  'font': FontElement,\n  'font-face': FontFaceElement,\n  'missing-glyph': MissingGlyphElement,\n  'glyph': GlyphElement,\n  'text': TextElement,\n  'tspan': TSpanElement,\n  'tref': TRefElement,\n  'a': AElement,\n  'textPath': TextPathElement,\n  'image': ImageElement,\n  'g': GElement,\n  'symbol': SymbolElement,\n  'style': StyleElement,\n  'use': UseElement,\n  'mask': MaskElement,\n  'clipPath': ClipPathElement,\n  'filter': FilterElement,\n  'feDropShadow': FeDropShadowElement,\n  'feMorphology': FeMorphologyElement,\n  'feComposite': FeCompositeElement,\n  'feColorMatrix': FeColorMatrixElement,\n  'feGaussianBlur': FeGaussianBlurElement,\n  'title': TitleElement,\n  'desc': DescElement\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction createCanvas(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nfunction createImage(_x) {\n  return _createImage.apply(this, arguments);\n}\n\nfunction _createImage() {\n  _createImage = _asyncToGenerator(function* (src) {\n    var anonymousCrossOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var image = document.createElement('img');\n\n    if (anonymousCrossOrigin) {\n      image.crossOrigin = 'Anonymous';\n    }\n\n    return new Promise((resolve, reject) => {\n      image.onload = () => {\n        resolve(image);\n      };\n\n      image.onerror = (_event, _source, _lineno, _colno, error) => {\n        reject(error);\n      };\n\n      image.src = src;\n    });\n  });\n  return _createImage.apply(this, arguments);\n}\n\nclass Document {\n  constructor(canvg) {\n    var {\n      rootEmSize = 12,\n      emSize = 12,\n      createCanvas = Document.createCanvas,\n      createImage = Document.createImage,\n      anonymousCrossOrigin\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.canvg = canvg;\n    this.definitions = {};\n    this.styles = {};\n    this.stylesSpecificity = {};\n    this.images = [];\n    this.fonts = [];\n    this.emSizeStack = [];\n    this.uniqueId = 0;\n    this.screen = canvg.screen;\n    this.rootEmSize = rootEmSize;\n    this.emSize = emSize;\n    this.createCanvas = createCanvas;\n    this.createImage = this.bindCreateImage(createImage, anonymousCrossOrigin);\n    this.screen.wait(this.isImagesLoaded.bind(this));\n    this.screen.wait(this.isFontsLoaded.bind(this));\n  }\n\n  bindCreateImage(createImage, anonymousCrossOrigin) {\n    if (typeof anonymousCrossOrigin === 'boolean') {\n      return (source, forceAnonymousCrossOrigin) => createImage(source, typeof forceAnonymousCrossOrigin === 'boolean' ? forceAnonymousCrossOrigin : anonymousCrossOrigin);\n    }\n\n    return createImage;\n  }\n\n  get window() {\n    return this.screen.window;\n  }\n\n  get fetch() {\n    return this.screen.fetch;\n  }\n\n  get ctx() {\n    return this.screen.ctx;\n  }\n\n  get emSize() {\n    var {\n      emSizeStack\n    } = this;\n    return emSizeStack[emSizeStack.length - 1];\n  }\n\n  set emSize(value) {\n    var {\n      emSizeStack\n    } = this;\n    emSizeStack.push(value);\n  }\n\n  popEmSize() {\n    var {\n      emSizeStack\n    } = this;\n    emSizeStack.pop();\n  }\n\n  getUniqueId() {\n    return \"canvg\".concat(++this.uniqueId);\n  }\n\n  isImagesLoaded() {\n    return this.images.every(_ => _.loaded);\n  }\n\n  isFontsLoaded() {\n    return this.fonts.every(_ => _.loaded);\n  }\n\n  createDocumentElement(document) {\n    var documentElement = this.createElement(document.documentElement);\n    documentElement.root = true;\n    documentElement.addStylesFromStyleDefinition();\n    this.documentElement = documentElement;\n    return documentElement;\n  }\n\n  createElement(node) {\n    var elementType = node.nodeName.replace(/^[^:]+:/, '');\n    var ElementType = Document.elementTypes[elementType];\n\n    if (typeof ElementType !== 'undefined') {\n      return new ElementType(this, node);\n    }\n\n    return new UnknownElement(this, node);\n  }\n\n  createTextNode(node) {\n    return new TextNode(this, node);\n  }\n\n  setViewBox(config) {\n    this.screen.setViewBox(_objectSpread$1({\n      document: this\n    }, config));\n  }\n\n}\nDocument.createCanvas = createCanvas;\nDocument.createImage = createImage;\nDocument.elementTypes = elements;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\r\n * SVG renderer on canvas.\r\n */\n\nclass Canvg {\n  /**\r\n   * Main constructor.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG Document.\r\n   * @param options - Rendering options.\r\n   */\n  constructor(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.parser = new Parser(options);\n    this.screen = new Screen(ctx, options);\n    this.options = options;\n    var document = new Document(this, options);\n    var documentElement = document.createDocumentElement(svg);\n    this.document = document;\n    this.documentElement = documentElement;\n  }\n  /**\r\n   * Create Canvg instance from SVG source string or URL.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string or URL.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  static from(ctx, svg) {\n    var _arguments = arguments;\n    return _asyncToGenerator(function* () {\n      var options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n      var parser = new Parser(options);\n      var svgDocument = yield parser.parse(svg);\n      return new Canvg(ctx, svgDocument, options);\n    })();\n  }\n  /**\r\n   * Create Canvg instance from SVG source string.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  static fromString(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var parser = new Parser(options);\n    var svgDocument = parser.parseFromString(svg);\n    return new Canvg(ctx, svgDocument, options);\n  }\n  /**\r\n   * Create new Canvg instance with inherited options.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string or URL.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  fork(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return Canvg.from(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));\n  }\n  /**\r\n   * Create new Canvg instance with inherited options.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  forkString(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return Canvg.fromString(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));\n  }\n  /**\r\n   * Document is ready promise.\r\n   * @returns Ready promise.\r\n   */\n\n\n  ready() {\n    return this.screen.ready();\n  }\n  /**\r\n   * Document is ready value.\r\n   * @returns Is ready or not.\r\n   */\n\n\n  isReady() {\n    return this.screen.isReady();\n  }\n  /**\r\n   * Render only first frame, ignoring animations and mouse.\r\n   * @param options - Rendering options.\r\n   */\n\n\n  render() {\n    var _arguments2 = arguments,\n        _this = this;\n\n    return _asyncToGenerator(function* () {\n      var options = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {};\n\n      _this.start(_objectSpread({\n        enableRedraw: true,\n        ignoreAnimation: true,\n        ignoreMouse: true\n      }, options));\n\n      yield _this.ready();\n\n      _this.stop();\n    })();\n  }\n  /**\r\n   * Start rendering.\r\n   * @param options - Render options.\r\n   */\n\n\n  start() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var {\n      documentElement,\n      screen,\n      options: baseOptions\n    } = this;\n    screen.start(documentElement, _objectSpread(_objectSpread({\n      enableRedraw: true\n    }, baseOptions), options));\n  }\n  /**\r\n   * Stop rendering.\r\n   */\n\n\n  stop() {\n    this.screen.stop();\n  }\n  /**\r\n   * Resize SVG to fit in given size.\r\n   * @param width\r\n   * @param height\r\n   * @param preserveAspectRatio\r\n   */\n\n\n  resize(width) {\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n    var preserveAspectRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.documentElement.resize(width, height, preserveAspectRatio);\n  }\n\n}\n\nexport { AElement, AnimateColorElement, AnimateElement, AnimateTransformElement, BoundingBox, CB1, CB2, CB3, CB4, Canvg, CircleElement, ClipPathElement, DefsElement, DescElement, Document, Element, EllipseElement, FeColorMatrixElement, FeCompositeElement, FeDropShadowElement, FeGaussianBlurElement, FeMorphologyElement, FilterElement, Font, FontElement, FontFaceElement, GElement, GlyphElement, GradientElement, ImageElement, LineElement, LinearGradientElement, MarkerElement, MaskElement, Matrix, MissingGlyphElement, Mouse, PSEUDO_ZERO, Parser, PathElement, PathParser, PatternElement, Point, PolygonElement, PolylineElement, Property, QB1, QB2, QB3, RadialGradientElement, RectElement, RenderedElement, Rotate, SVGElement, SVGFontLoader, Scale, Screen, Skew, SkewX, SkewY, StopElement, StyleElement, SymbolElement, TRefElement, TSpanElement, TextElement, TextPathElement, TitleElement, Transform, Translate, UnknownElement, UseElement, ViewPort, compressSpaces, Canvg as default, getSelectorSpecificity, normalizeAttributeName, normalizeColor, parseExternalUrl, index as presets, toNumbers, trimLeft, trimRight, vectorMagnitude, vectorsAngle, vectorsRatio };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","\"use strict\";\n(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[6350],{\n\n/***/ 34668:\n/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AElement\": function() { return /* binding */ AElement; },\n/* harmony export */   \"AnimateColorElement\": function() { return /* binding */ AnimateColorElement; },\n/* harmony export */   \"AnimateElement\": function() { return /* binding */ AnimateElement; },\n/* harmony export */   \"AnimateTransformElement\": function() { return /* binding */ AnimateTransformElement; },\n/* harmony export */   \"BoundingBox\": function() { return /* binding */ BoundingBox; },\n/* harmony export */   \"CB1\": function() { return /* binding */ CB1; },\n/* harmony export */   \"CB2\": function() { return /* binding */ CB2; },\n/* harmony export */   \"CB3\": function() { return /* binding */ CB3; },\n/* harmony export */   \"CB4\": function() { return /* binding */ CB4; },\n/* harmony export */   \"Canvg\": function() { return /* binding */ Canvg; },\n/* harmony export */   \"CircleElement\": function() { return /* binding */ CircleElement; },\n/* harmony export */   \"ClipPathElement\": function() { return /* binding */ ClipPathElement; },\n/* harmony export */   \"DefsElement\": function() { return /* binding */ DefsElement; },\n/* harmony export */   \"DescElement\": function() { return /* binding */ DescElement; },\n/* harmony export */   \"Document\": function() { return /* binding */ Document; },\n/* harmony export */   \"Element\": function() { return /* binding */ Element; },\n/* harmony export */   \"EllipseElement\": function() { return /* binding */ EllipseElement; },\n/* harmony export */   \"FeColorMatrixElement\": function() { return /* binding */ FeColorMatrixElement; },\n/* harmony export */   \"FeCompositeElement\": function() { return /* binding */ FeCompositeElement; },\n/* harmony export */   \"FeDropShadowElement\": function() { return /* binding */ FeDropShadowElement; },\n/* harmony export */   \"FeGaussianBlurElement\": function() { return /* binding */ FeGaussianBlurElement; },\n/* harmony export */   \"FeMorphologyElement\": function() { return /* binding */ FeMorphologyElement; },\n/* harmony export */   \"FilterElement\": function() { return /* binding */ FilterElement; },\n/* harmony export */   \"Font\": function() { return /* binding */ Font; },\n/* harmony export */   \"FontElement\": function() { return /* binding */ FontElement; },\n/* harmony export */   \"FontFaceElement\": function() { return /* binding */ FontFaceElement; },\n/* harmony export */   \"GElement\": function() { return /* binding */ GElement; },\n/* harmony export */   \"GlyphElement\": function() { return /* binding */ GlyphElement; },\n/* harmony export */   \"GradientElement\": function() { return /* binding */ GradientElement; },\n/* harmony export */   \"ImageElement\": function() { return /* binding */ ImageElement; },\n/* harmony export */   \"LineElement\": function() { return /* binding */ LineElement; },\n/* harmony export */   \"LinearGradientElement\": function() { return /* binding */ LinearGradientElement; },\n/* harmony export */   \"MarkerElement\": function() { return /* binding */ MarkerElement; },\n/* harmony export */   \"MaskElement\": function() { return /* binding */ MaskElement; },\n/* harmony export */   \"Matrix\": function() { return /* binding */ Matrix; },\n/* harmony export */   \"MissingGlyphElement\": function() { return /* binding */ MissingGlyphElement; },\n/* harmony export */   \"Mouse\": function() { return /* binding */ Mouse; },\n/* harmony export */   \"PSEUDO_ZERO\": function() { return /* binding */ PSEUDO_ZERO; },\n/* harmony export */   \"Parser\": function() { return /* binding */ Parser; },\n/* harmony export */   \"PathElement\": function() { return /* binding */ PathElement; },\n/* harmony export */   \"PathParser\": function() { return /* binding */ PathParser; },\n/* harmony export */   \"PatternElement\": function() { return /* binding */ PatternElement; },\n/* harmony export */   \"Point\": function() { return /* binding */ Point; },\n/* harmony export */   \"PolygonElement\": function() { return /* binding */ PolygonElement; },\n/* harmony export */   \"PolylineElement\": function() { return /* binding */ PolylineElement; },\n/* harmony export */   \"Property\": function() { return /* binding */ Property; },\n/* harmony export */   \"QB1\": function() { return /* binding */ QB1; },\n/* harmony export */   \"QB2\": function() { return /* binding */ QB2; },\n/* harmony export */   \"QB3\": function() { return /* binding */ QB3; },\n/* harmony export */   \"RadialGradientElement\": function() { return /* binding */ RadialGradientElement; },\n/* harmony export */   \"RectElement\": function() { return /* binding */ RectElement; },\n/* harmony export */   \"RenderedElement\": function() { return /* binding */ RenderedElement; },\n/* harmony export */   \"Rotate\": function() { return /* binding */ Rotate; },\n/* harmony export */   \"SVGElement\": function() { return /* binding */ SVGElement; },\n/* harmony export */   \"SVGFontLoader\": function() { return /* binding */ SVGFontLoader; },\n/* harmony export */   \"Scale\": function() { return /* binding */ Scale; },\n/* harmony export */   \"Screen\": function() { return /* binding */ Screen; },\n/* harmony export */   \"Skew\": function() { return /* binding */ Skew; },\n/* harmony export */   \"SkewX\": function() { return /* binding */ SkewX; },\n/* harmony export */   \"SkewY\": function() { return /* binding */ SkewY; },\n/* harmony export */   \"StopElement\": function() { return /* binding */ StopElement; },\n/* harmony export */   \"StyleElement\": function() { return /* binding */ StyleElement; },\n/* harmony export */   \"SymbolElement\": function() { return /* binding */ SymbolElement; },\n/* harmony export */   \"TRefElement\": function() { return /* binding */ TRefElement; },\n/* harmony export */   \"TSpanElement\": function() { return /* binding */ TSpanElement; },\n/* harmony export */   \"TextElement\": function() { return /* binding */ TextElement; },\n/* harmony export */   \"TextPathElement\": function() { return /* binding */ TextPathElement; },\n/* harmony export */   \"TitleElement\": function() { return /* binding */ TitleElement; },\n/* harmony export */   \"Transform\": function() { return /* binding */ Transform; },\n/* harmony export */   \"Translate\": function() { return /* binding */ Translate; },\n/* harmony export */   \"UnknownElement\": function() { return /* binding */ UnknownElement; },\n/* harmony export */   \"UseElement\": function() { return /* binding */ UseElement; },\n/* harmony export */   \"ViewPort\": function() { return /* binding */ ViewPort; },\n/* harmony export */   \"compressSpaces\": function() { return /* binding */ compressSpaces; },\n/* harmony export */   \"default\": function() { return /* binding */ Canvg; },\n/* harmony export */   \"getSelectorSpecificity\": function() { return /* binding */ getSelectorSpecificity; },\n/* harmony export */   \"normalizeAttributeName\": function() { return /* binding */ normalizeAttributeName; },\n/* harmony export */   \"normalizeColor\": function() { return /* binding */ normalizeColor; },\n/* harmony export */   \"parseExternalUrl\": function() { return /* binding */ parseExternalUrl; },\n/* harmony export */   \"presets\": function() { return /* binding */ index; },\n/* harmony export */   \"toNumbers\": function() { return /* binding */ toNumbers; },\n/* harmony export */   \"trimLeft\": function() { return /* binding */ trimLeft; },\n/* harmony export */   \"trimRight\": function() { return /* binding */ trimRight; },\n/* harmony export */   \"vectorMagnitude\": function() { return /* binding */ vectorMagnitude; },\n/* harmony export */   \"vectorsAngle\": function() { return /* binding */ vectorsAngle; },\n/* harmony export */   \"vectorsRatio\": function() { return /* binding */ vectorsRatio; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88674);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(15861);\n/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4723);\n/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15306);\n/* harmony import */ var core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23157);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(66992);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(33948);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(4942);\n/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3750);\n/* harmony import */ var core_js_modules_es_string_ends_with_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(27852);\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6735);\n/* harmony import */ var raf__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(54087);\n/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(73210);\n/* harmony import */ var rgbcolor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(26131);\n/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(82772);\n/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(32023);\n/* harmony import */ var core_js_modules_es_array_reverse_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(65069);\n/* harmony import */ var svg_pathdata__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(35851);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(39714);\n/* harmony import */ var stackblur_canvas__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(62449);\n/* provided dependency */ var process = __webpack_require__(83454);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * Options preset for `OffscreenCanvas`.\r\n * @param config - Preset requirements.\r\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\r\n * @returns Preset object.\r\n */\nfunction offscreen() {\n  var {\n    DOMParser: DOMParserFallback\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var preset = {\n    window: null,\n    ignoreAnimation: true,\n    ignoreMouse: true,\n    DOMParser: DOMParserFallback,\n\n    createCanvas(width, height) {\n      return new OffscreenCanvas(width, height);\n    },\n\n    createImage(url) {\n      return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n        var response = yield fetch(url);\n        var blob = yield response.blob();\n        var img = yield createImageBitmap(blob);\n        return img;\n      })();\n    }\n\n  };\n\n  if (typeof DOMParser !== 'undefined' || typeof DOMParserFallback === 'undefined') {\n    Reflect.deleteProperty(preset, 'DOMParser');\n  }\n\n  return preset;\n}\n\n/**\r\n * Options preset for `node-canvas`.\r\n * @param config - Preset requirements.\r\n * @param config.DOMParser - XML/HTML parser from string into DOM Document.\r\n * @param config.canvas - `node-canvas` exports.\r\n * @param config.fetch - WHATWG-compatible `fetch` function.\r\n * @returns Preset object.\r\n */\nfunction node(_ref) {\n  var {\n    DOMParser,\n    canvas,\n    fetch\n  } = _ref;\n  return {\n    window: null,\n    ignoreAnimation: true,\n    ignoreMouse: true,\n    DOMParser,\n    fetch,\n    createCanvas: canvas.createCanvas,\n    createImage: canvas.loadImage\n  };\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\toffscreen: offscreen,\n\tnode: node\n});\n\n/**\r\n * HTML-safe compress white-spaces.\r\n * @param str - String to compress.\r\n * @returns String.\r\n */\nfunction compressSpaces(str) {\n  return str.replace(/(?!\\u3000)\\s+/gm, ' ');\n}\n/**\r\n * HTML-safe left trim.\r\n * @param str - String to trim.\r\n * @returns String.\r\n */\n\nfunction trimLeft(str) {\n  return str.replace(/^[\\n \\t]+/, '');\n}\n/**\r\n * HTML-safe right trim.\r\n * @param str - String to trim.\r\n * @returns String.\r\n */\n\nfunction trimRight(str) {\n  return str.replace(/[\\n \\t]+$/, '');\n}\n/**\r\n * String to numbers array.\r\n * @param str - Numbers string.\r\n * @returns Numbers array.\r\n */\n\nfunction toNumbers(str) {\n  var matches = (str || '').match(/-?(\\d+(?:\\.\\d*(?:[eE][+-]?\\d+)?)?|\\.\\d+)(?=\\D|$)/gm) || [];\n  return matches.map(parseFloat);\n} // Microsoft Edge fix\n\nvar allUppercase = /^[A-Z-]+$/;\n/**\r\n * Normalize attribute name.\r\n * @param name - Attribute name.\r\n * @returns Normalized attribute name.\r\n */\n\nfunction normalizeAttributeName(name) {\n  if (allUppercase.test(name)) {\n    return name.toLowerCase();\n  }\n\n  return name;\n}\n/**\r\n * Parse external URL.\r\n * @param url - CSS url string.\r\n * @returns Parsed URL.\r\n */\n\nfunction parseExternalUrl(url) {\n  //                      single quotes [2]\n  //                      v         double quotes [3]\n  //                      v         v         no quotes [4]\n  //                      v         v         v\n  var urlMatch = /url\\(('([^']+)'|\"([^\"]+)\"|([^'\")]+))\\)/.exec(url) || [];\n  return urlMatch[2] || urlMatch[3] || urlMatch[4];\n}\n/**\r\n * Transform floats to integers in rgb colors.\r\n * @param color - Color to normalize.\r\n * @returns Normalized color.\r\n */\n\nfunction normalizeColor(color) {\n  if (!color.startsWith('rgb')) {\n    return color;\n  }\n\n  var rgbParts = 3;\n  var normalizedColor = color.replace(/\\d+(\\.\\d+)?/g, (num, isFloat) => rgbParts-- && isFloat ? String(Math.round(parseFloat(num))) : num);\n  return normalizedColor;\n}\n\n// slightly modified version of https://github.com/keeganstreet/specificity/blob/master/specificity.js\nvar attributeRegex = /(\\[[^\\]]+\\])/g;\nvar idRegex = /(#[^\\s+>~.[:]+)/g;\nvar classRegex = /(\\.[^\\s+>~.[:]+)/g;\nvar pseudoElementRegex = /(::[^\\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi;\nvar pseudoClassWithBracketsRegex = /(:[\\w-]+\\([^)]*\\))/gi;\nvar pseudoClassRegex = /(:[^\\s+>~.[:]+)/g;\nvar elementRegex = /([^\\s+>~.[:]+)/g;\n\nfunction findSelectorMatch(selector, regex) {\n  var matches = regex.exec(selector);\n\n  if (!matches) {\n    return [selector, 0];\n  }\n\n  return [selector.replace(regex, ' '), matches.length];\n}\n/**\r\n * Measure selector specificity.\r\n * @param selector - Selector to measure.\r\n * @returns Specificity.\r\n */\n\n\nfunction getSelectorSpecificity(selector) {\n  var specificity = [0, 0, 0];\n  var currentSelector = selector.replace(/:not\\(([^)]*)\\)/g, '     $1 ').replace(/{[\\s\\S]*/gm, ' ');\n  var delta = 0;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, attributeRegex);\n  specificity[1] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, idRegex);\n  specificity[0] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, classRegex);\n  specificity[1] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoElementRegex);\n  specificity[2] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoClassWithBracketsRegex);\n  specificity[1] += delta;\n  [currentSelector, delta] = findSelectorMatch(currentSelector, pseudoClassRegex);\n  specificity[1] += delta;\n  currentSelector = currentSelector.replace(/[*\\s+>~]/g, ' ').replace(/[#.]/g, ' ');\n  [currentSelector, delta] = findSelectorMatch(currentSelector, elementRegex); // lgtm [js/useless-assignment-to-local]\n\n  specificity[2] += delta;\n  return specificity.join('');\n}\n\nvar PSEUDO_ZERO = .00000001;\n/**\r\n * Vector magnitude.\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorMagnitude(v) {\n  return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n}\n/**\r\n * Ratio between two vectors.\r\n * @param u\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorsRatio(u, v) {\n  return (u[0] * v[0] + u[1] * v[1]) / (vectorMagnitude(u) * vectorMagnitude(v));\n}\n/**\r\n * Angle between two vectors.\r\n * @param u\r\n * @param v\r\n * @returns Number result.\r\n */\n\nfunction vectorsAngle(u, v) {\n  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vectorsRatio(u, v));\n}\nfunction CB1(t) {\n  return t * t * t;\n}\nfunction CB2(t) {\n  return 3 * t * t * (1 - t);\n}\nfunction CB3(t) {\n  return 3 * t * (1 - t) * (1 - t);\n}\nfunction CB4(t) {\n  return (1 - t) * (1 - t) * (1 - t);\n}\nfunction QB1(t) {\n  return t * t;\n}\nfunction QB2(t) {\n  return 2 * t * (1 - t);\n}\nfunction QB3(t) {\n  return (1 - t) * (1 - t);\n}\n\nclass Property {\n  constructor(document, name, value) {\n    this.document = document;\n    this.name = name;\n    this.value = value;\n    this.isNormalizedColor = false;\n  }\n\n  static empty(document) {\n    return new Property(document, 'EMPTY', '');\n  }\n\n  split() {\n    var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ' ';\n    var {\n      document,\n      name\n    } = this;\n    return compressSpaces(this.getString()).trim().split(separator).map(value => new Property(document, name, value));\n  }\n\n  hasValue(zeroIsValue) {\n    var {\n      value\n    } = this;\n    return value !== null && value !== '' && (zeroIsValue || value !== 0) && typeof value !== 'undefined';\n  }\n\n  isString(regexp) {\n    var {\n      value\n    } = this;\n    var result = typeof value === 'string';\n\n    if (!result || !regexp) {\n      return result;\n    }\n\n    return regexp.test(value);\n  }\n\n  isUrlDefinition() {\n    return this.isString(/^url\\(/);\n  }\n\n  isPixels() {\n    if (!this.hasValue()) {\n      return false;\n    }\n\n    var asString = this.getString();\n\n    switch (true) {\n      case asString.endsWith('px'):\n      case /^[0-9]+$/.test(asString):\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  setValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  getValue(def) {\n    if (typeof def === 'undefined' || this.hasValue()) {\n      return this.value;\n    }\n\n    return def;\n  }\n\n  getNumber(def) {\n    if (!this.hasValue()) {\n      if (typeof def === 'undefined') {\n        return 0;\n      }\n\n      return parseFloat(def);\n    }\n\n    var {\n      value\n    } = this;\n    var n = parseFloat(value);\n\n    if (this.isString(/%$/)) {\n      n /= 100.0;\n    }\n\n    return n;\n  }\n\n  getString(def) {\n    if (typeof def === 'undefined' || this.hasValue()) {\n      return typeof this.value === 'undefined' ? '' : String(this.value);\n    }\n\n    return String(def);\n  }\n\n  getColor(def) {\n    var color = this.getString(def);\n\n    if (this.isNormalizedColor) {\n      return color;\n    }\n\n    this.isNormalizedColor = true;\n    color = normalizeColor(color);\n    this.value = color;\n    return color;\n  }\n\n  getDpi() {\n    return 96.0; // TODO: compute?\n  }\n\n  getRem() {\n    return this.document.rootEmSize;\n  }\n\n  getEm() {\n    return this.document.emSize;\n  }\n\n  getUnits() {\n    return this.getString().replace(/[0-9.-]/g, '');\n  }\n\n  getPixels(axisOrIsFontSize) {\n    var processPercent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!this.hasValue()) {\n      return 0;\n    }\n\n    var [axis, isFontSize] = typeof axisOrIsFontSize === 'boolean' ? [undefined, axisOrIsFontSize] : [axisOrIsFontSize];\n    var {\n      viewPort\n    } = this.document.screen;\n\n    switch (true) {\n      case this.isString(/vmin$/):\n        return this.getNumber() / 100.0 * Math.min(viewPort.computeSize('x'), viewPort.computeSize('y'));\n\n      case this.isString(/vmax$/):\n        return this.getNumber() / 100.0 * Math.max(viewPort.computeSize('x'), viewPort.computeSize('y'));\n\n      case this.isString(/vw$/):\n        return this.getNumber() / 100.0 * viewPort.computeSize('x');\n\n      case this.isString(/vh$/):\n        return this.getNumber() / 100.0 * viewPort.computeSize('y');\n\n      case this.isString(/rem$/):\n        return this.getNumber() * this.getRem();\n\n      case this.isString(/em$/):\n        return this.getNumber() * this.getEm();\n\n      case this.isString(/ex$/):\n        return this.getNumber() * this.getEm() / 2.0;\n\n      case this.isString(/px$/):\n        return this.getNumber();\n\n      case this.isString(/pt$/):\n        return this.getNumber() * this.getDpi() * (1.0 / 72.0);\n\n      case this.isString(/pc$/):\n        return this.getNumber() * 15;\n\n      case this.isString(/cm$/):\n        return this.getNumber() * this.getDpi() / 2.54;\n\n      case this.isString(/mm$/):\n        return this.getNumber() * this.getDpi() / 25.4;\n\n      case this.isString(/in$/):\n        return this.getNumber() * this.getDpi();\n\n      case this.isString(/%$/) && isFontSize:\n        return this.getNumber() * this.getEm();\n\n      case this.isString(/%$/):\n        return this.getNumber() * viewPort.computeSize(axis);\n\n      default:\n        {\n          var n = this.getNumber();\n\n          if (processPercent && n < 1.0) {\n            return n * viewPort.computeSize(axis);\n          }\n\n          return n;\n        }\n    }\n  }\n\n  getMilliseconds() {\n    if (!this.hasValue()) {\n      return 0;\n    }\n\n    if (this.isString(/ms$/)) {\n      return this.getNumber();\n    }\n\n    return this.getNumber() * 1000;\n  }\n\n  getRadians() {\n    if (!this.hasValue()) {\n      return 0;\n    }\n\n    switch (true) {\n      case this.isString(/deg$/):\n        return this.getNumber() * (Math.PI / 180.0);\n\n      case this.isString(/grad$/):\n        return this.getNumber() * (Math.PI / 200.0);\n\n      case this.isString(/rad$/):\n        return this.getNumber();\n\n      default:\n        return this.getNumber() * (Math.PI / 180.0);\n    }\n  }\n\n  getDefinition() {\n    var asString = this.getString();\n    var name = /#([^)'\"]+)/.exec(asString);\n\n    if (name) {\n      name = name[1];\n    }\n\n    if (!name) {\n      name = asString;\n    }\n\n    return this.document.definitions[name];\n  }\n\n  getFillStyleDefinition(element, opacity) {\n    var def = this.getDefinition();\n\n    if (!def) {\n      return null;\n    } // gradient\n\n\n    if (typeof def.createGradient === 'function') {\n      return def.createGradient(this.document.ctx, element, opacity);\n    } // pattern\n\n\n    if (typeof def.createPattern === 'function') {\n      if (def.getHrefAttribute().hasValue()) {\n        var patternTransform = def.getAttribute('patternTransform');\n        def = def.getHrefAttribute().getDefinition();\n\n        if (patternTransform.hasValue()) {\n          def.getAttribute('patternTransform', true).setValue(patternTransform.value);\n        }\n      }\n\n      return def.createPattern(this.document.ctx, element, opacity);\n    }\n\n    return null;\n  }\n\n  getTextBaseline() {\n    if (!this.hasValue()) {\n      return null;\n    }\n\n    return Property.textBaselineMapping[this.getString()];\n  }\n\n  addOpacity(opacity) {\n    var value = this.getColor();\n    var len = value.length;\n    var commas = 0; // Simulate old RGBColor version, which can't parse rgba.\n\n    for (var i = 0; i < len; i++) {\n      if (value[i] === ',') {\n        commas++;\n      }\n\n      if (commas === 3) {\n        break;\n      }\n    }\n\n    if (opacity.hasValue() && this.isString() && commas !== 3) {\n      var color = new rgbcolor__WEBPACK_IMPORTED_MODULE_11__(value);\n\n      if (color.ok) {\n        color.alpha = opacity.getNumber();\n        value = color.toRGBA();\n      }\n    }\n\n    return new Property(this.document, this.name, value);\n  }\n\n}\nProperty.textBaselineMapping = {\n  'baseline': 'alphabetic',\n  'before-edge': 'top',\n  'text-before-edge': 'top',\n  'middle': 'middle',\n  'central': 'middle',\n  'after-edge': 'bottom',\n  'text-after-edge': 'bottom',\n  'ideographic': 'ideographic',\n  'alphabetic': 'alphabetic',\n  'hanging': 'hanging',\n  'mathematical': 'alphabetic'\n};\n\nclass ViewPort {\n  constructor() {\n    this.viewPorts = [];\n  }\n\n  clear() {\n    this.viewPorts = [];\n  }\n\n  setCurrent(width, height) {\n    this.viewPorts.push({\n      width,\n      height\n    });\n  }\n\n  removeCurrent() {\n    this.viewPorts.pop();\n  }\n\n  getCurrent() {\n    var {\n      viewPorts\n    } = this;\n    return viewPorts[viewPorts.length - 1];\n  }\n\n  get width() {\n    return this.getCurrent().width;\n  }\n\n  get height() {\n    return this.getCurrent().height;\n  }\n\n  computeSize(d) {\n    if (typeof d === 'number') {\n      return d;\n    }\n\n    if (d === 'x') {\n      return this.width;\n    }\n\n    if (d === 'y') {\n      return this.height;\n    }\n\n    return Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)) / Math.sqrt(2);\n  }\n\n}\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static parse(point) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var [x = defaultValue, y = defaultValue] = toNumbers(point);\n    return new Point(x, y);\n  }\n\n  static parseScale(scale) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var [x = defaultValue, y = x] = toNumbers(scale);\n    return new Point(x, y);\n  }\n\n  static parsePath(path) {\n    var points = toNumbers(path);\n    var len = points.length;\n    var pathPoints = [];\n\n    for (var i = 0; i < len; i += 2) {\n      pathPoints.push(new Point(points[i], points[i + 1]));\n    }\n\n    return pathPoints;\n  }\n\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  applyTransform(transform) {\n    var {\n      x,\n      y\n    } = this;\n    var xp = x * transform[0] + y * transform[2] + transform[4];\n    var yp = x * transform[1] + y * transform[3] + transform[5];\n    this.x = xp;\n    this.y = yp;\n  }\n\n}\n\nclass Mouse {\n  constructor(screen) {\n    this.screen = screen;\n    this.working = false;\n    this.events = [];\n    this.eventElements = []; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.onClick = this.onClick.bind(this); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.onMouseMove = this.onMouseMove.bind(this);\n  }\n\n  isWorking() {\n    return this.working;\n  }\n\n  start() {\n    if (this.working) {\n      return;\n    }\n\n    var {\n      screen,\n      onClick,\n      onMouseMove\n    } = this;\n    var canvas = screen.ctx.canvas;\n    canvas.onclick = onClick;\n    canvas.onmousemove = onMouseMove;\n    this.working = true;\n  }\n\n  stop() {\n    if (!this.working) {\n      return;\n    }\n\n    var canvas = this.screen.ctx.canvas;\n    this.working = false;\n    canvas.onclick = null;\n    canvas.onmousemove = null;\n  }\n\n  hasEvents() {\n    return this.working && this.events.length > 0;\n  }\n\n  runEvents() {\n    if (!this.working) {\n      return;\n    }\n\n    var {\n      screen: document,\n      events,\n      eventElements\n    } = this;\n    var {\n      style\n    } = document.ctx.canvas;\n\n    if (style) {\n      style.cursor = '';\n    }\n\n    events.forEach((_ref, i) => {\n      var {\n        run\n      } = _ref;\n      var element = eventElements[i];\n\n      while (element) {\n        run(element);\n        element = element.parent;\n      }\n    }); // done running, clear\n\n    this.events = [];\n    this.eventElements = [];\n  }\n\n  checkPath(element, ctx) {\n    if (!this.working || !ctx) {\n      return;\n    }\n\n    var {\n      events,\n      eventElements\n    } = this;\n    events.forEach((_ref2, i) => {\n      var {\n        x,\n        y\n      } = _ref2;\n\n      if (!eventElements[i] && ctx.isPointInPath && ctx.isPointInPath(x, y)) {\n        eventElements[i] = element;\n      }\n    });\n  }\n\n  checkBoundingBox(element, boundingBox) {\n    if (!this.working || !boundingBox) {\n      return;\n    }\n\n    var {\n      events,\n      eventElements\n    } = this;\n    events.forEach((_ref3, i) => {\n      var {\n        x,\n        y\n      } = _ref3;\n\n      if (!eventElements[i] && boundingBox.isPointInBox(x, y)) {\n        eventElements[i] = element;\n      }\n    });\n  }\n\n  mapXY(x, y) {\n    var {\n      window,\n      ctx\n    } = this.screen;\n    var point = new Point(x, y);\n    var element = ctx.canvas;\n\n    while (element) {\n      point.x -= element.offsetLeft;\n      point.y -= element.offsetTop;\n      element = element.offsetParent;\n    }\n\n    if (window.scrollX) {\n      point.x += window.scrollX;\n    }\n\n    if (window.scrollY) {\n      point.y += window.scrollY;\n    }\n\n    return point;\n  }\n\n  onClick(event) {\n    var {\n      x,\n      y\n    } = this.mapXY(event.clientX, event.clientY);\n    this.events.push({\n      type: 'onclick',\n      x,\n      y,\n\n      run(eventTarget) {\n        if (eventTarget.onClick) {\n          eventTarget.onClick();\n        }\n      }\n\n    });\n  }\n\n  onMouseMove(event) {\n    var {\n      x,\n      y\n    } = this.mapXY(event.clientX, event.clientY);\n    this.events.push({\n      type: 'onmousemove',\n      x,\n      y,\n\n      run(eventTarget) {\n        if (eventTarget.onMouseMove) {\n          eventTarget.onMouseMove();\n        }\n      }\n\n    });\n  }\n\n}\n\nvar defaultWindow = typeof window !== 'undefined' ? window : null;\nvar defaultFetch$1 = typeof fetch !== 'undefined' ? fetch.bind(undefined) // `fetch` depends on context: `someObject.fetch(...)` will throw error.\n: null;\nclass Screen {\n  constructor(ctx) {\n    var {\n      fetch = defaultFetch$1,\n      window = defaultWindow\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.ctx = ctx;\n    this.FRAMERATE = 30;\n    this.MAX_VIRTUAL_PIXELS = 30000;\n    this.CLIENT_WIDTH = 800;\n    this.CLIENT_HEIGHT = 600;\n    this.viewPort = new ViewPort();\n    this.mouse = new Mouse(this);\n    this.animations = [];\n    this.waits = [];\n    this.frameDuration = 0;\n    this.isReadyLock = false;\n    this.isFirstRender = true;\n    this.intervalId = null;\n    this.window = window;\n    this.fetch = fetch;\n  }\n\n  wait(checker) {\n    this.waits.push(checker);\n  }\n\n  ready() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    if (!this.readyPromise) {\n      return Promise.resolve();\n    }\n\n    return this.readyPromise;\n  }\n\n  isReady() {\n    if (this.isReadyLock) {\n      return true;\n    }\n\n    var isReadyLock = this.waits.every(_ => _());\n\n    if (isReadyLock) {\n      this.waits = [];\n\n      if (this.resolveReady) {\n        this.resolveReady();\n      }\n    }\n\n    this.isReadyLock = isReadyLock;\n    return isReadyLock;\n  }\n\n  setDefaults(ctx) {\n    // initial values and defaults\n    ctx.strokeStyle = 'rgba(0,0,0,0)';\n    ctx.lineCap = 'butt';\n    ctx.lineJoin = 'miter';\n    ctx.miterLimit = 4;\n  }\n\n  setViewBox(_ref) {\n    var {\n      document,\n      ctx,\n      aspectRatio,\n      width,\n      desiredWidth,\n      height,\n      desiredHeight,\n      minX = 0,\n      minY = 0,\n      refX,\n      refY,\n      clip = false,\n      clipX = 0,\n      clipY = 0\n    } = _ref;\n    // aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n    var cleanAspectRatio = compressSpaces(aspectRatio).replace(/^defer\\s/, ''); // ignore defer\n\n    var [aspectRatioAlign, aspectRatioMeetOrSlice] = cleanAspectRatio.split(' ');\n    var align = aspectRatioAlign || 'xMidYMid';\n    var meetOrSlice = aspectRatioMeetOrSlice || 'meet'; // calculate scale\n\n    var scaleX = width / desiredWidth;\n    var scaleY = height / desiredHeight;\n    var scaleMin = Math.min(scaleX, scaleY);\n    var scaleMax = Math.max(scaleX, scaleY);\n    var finalDesiredWidth = desiredWidth;\n    var finalDesiredHeight = desiredHeight;\n\n    if (meetOrSlice === 'meet') {\n      finalDesiredWidth *= scaleMin;\n      finalDesiredHeight *= scaleMin;\n    }\n\n    if (meetOrSlice === 'slice') {\n      finalDesiredWidth *= scaleMax;\n      finalDesiredHeight *= scaleMax;\n    }\n\n    var refXProp = new Property(document, 'refX', refX);\n    var refYProp = new Property(document, 'refY', refY);\n    var hasRefs = refXProp.hasValue() && refYProp.hasValue();\n\n    if (hasRefs) {\n      ctx.translate(-scaleMin * refXProp.getPixels('x'), -scaleMin * refYProp.getPixels('y'));\n    }\n\n    if (clip) {\n      var scaledClipX = scaleMin * clipX;\n      var scaledClipY = scaleMin * clipY;\n      ctx.beginPath();\n      ctx.moveTo(scaledClipX, scaledClipY);\n      ctx.lineTo(width, scaledClipY);\n      ctx.lineTo(width, height);\n      ctx.lineTo(scaledClipX, height);\n      ctx.closePath();\n      ctx.clip();\n    }\n\n    if (!hasRefs) {\n      var isMeetMinY = meetOrSlice === 'meet' && scaleMin === scaleY;\n      var isSliceMaxY = meetOrSlice === 'slice' && scaleMax === scaleY;\n      var isMeetMinX = meetOrSlice === 'meet' && scaleMin === scaleX;\n      var isSliceMaxX = meetOrSlice === 'slice' && scaleMax === scaleX;\n\n      if (align.startsWith('xMid') && (isMeetMinY || isSliceMaxY)) {\n        ctx.translate(width / 2.0 - finalDesiredWidth / 2.0, 0);\n      }\n\n      if (align.endsWith('YMid') && (isMeetMinX || isSliceMaxX)) {\n        ctx.translate(0, height / 2.0 - finalDesiredHeight / 2.0);\n      }\n\n      if (align.startsWith('xMax') && (isMeetMinY || isSliceMaxY)) {\n        ctx.translate(width - finalDesiredWidth, 0);\n      }\n\n      if (align.endsWith('YMax') && (isMeetMinX || isSliceMaxX)) {\n        ctx.translate(0, height - finalDesiredHeight);\n      }\n    } // scale\n\n\n    switch (true) {\n      case align === 'none':\n        ctx.scale(scaleX, scaleY);\n        break;\n\n      case meetOrSlice === 'meet':\n        ctx.scale(scaleMin, scaleMin);\n        break;\n\n      case meetOrSlice === 'slice':\n        ctx.scale(scaleMax, scaleMax);\n        break;\n    } // translate\n\n\n    ctx.translate(-minX, -minY);\n  }\n\n  start(element) {\n    var {\n      enableRedraw = false,\n      ignoreMouse = false,\n      ignoreAnimation = false,\n      ignoreDimensions = false,\n      ignoreClear = false,\n      forceRedraw,\n      scaleWidth,\n      scaleHeight,\n      offsetX,\n      offsetY\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      FRAMERATE,\n      mouse\n    } = this;\n    var frameDuration = 1000 / FRAMERATE;\n    this.frameDuration = frameDuration;\n    this.readyPromise = new Promise(resolve => {\n      this.resolveReady = resolve;\n    });\n\n    if (this.isReady()) {\n      this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n    }\n\n    if (!enableRedraw) {\n      return;\n    }\n\n    var now = Date.now();\n    var then = now;\n    var delta = 0;\n\n    var tick = () => {\n      now = Date.now();\n      delta = now - then;\n\n      if (delta >= frameDuration) {\n        then = now - delta % frameDuration;\n\n        if (this.shouldUpdate(ignoreAnimation, forceRedraw)) {\n          this.render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY);\n          mouse.runEvents();\n        }\n      }\n\n      this.intervalId = raf__WEBPACK_IMPORTED_MODULE_9__(tick);\n    };\n\n    if (!ignoreMouse) {\n      mouse.start();\n    }\n\n    this.intervalId = raf__WEBPACK_IMPORTED_MODULE_9__(tick);\n  }\n\n  stop() {\n    if (this.intervalId) {\n      raf__WEBPACK_IMPORTED_MODULE_9__.cancel(this.intervalId);\n      this.intervalId = null;\n    }\n\n    this.mouse.stop();\n  }\n\n  shouldUpdate(ignoreAnimation, forceRedraw) {\n    // need update from animations?\n    if (!ignoreAnimation) {\n      var {\n        frameDuration\n      } = this;\n      var shouldUpdate = this.animations.reduce((shouldUpdate, animation) => animation.update(frameDuration) || shouldUpdate, false);\n\n      if (shouldUpdate) {\n        return true;\n      }\n    } // need update from redraw?\n\n\n    if (typeof forceRedraw === 'function' && forceRedraw()) {\n      return true;\n    }\n\n    if (!this.isReadyLock && this.isReady()) {\n      return true;\n    } // need update from mouse events?\n\n\n    if (this.mouse.hasEvents()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render(element, ignoreDimensions, ignoreClear, scaleWidth, scaleHeight, offsetX, offsetY) {\n    var {\n      CLIENT_WIDTH,\n      CLIENT_HEIGHT,\n      viewPort,\n      ctx,\n      isFirstRender\n    } = this;\n    var canvas = ctx.canvas;\n    viewPort.clear();\n\n    if (canvas.width && canvas.height) {\n      viewPort.setCurrent(canvas.width, canvas.height);\n    } else {\n      viewPort.setCurrent(CLIENT_WIDTH, CLIENT_HEIGHT);\n    }\n\n    var widthStyle = element.getStyle('width');\n    var heightStyle = element.getStyle('height');\n\n    if (!ignoreDimensions && (isFirstRender || typeof scaleWidth !== 'number' && typeof scaleHeight !== 'number')) {\n      // set canvas size\n      if (widthStyle.hasValue()) {\n        canvas.width = widthStyle.getPixels('x');\n\n        if (canvas.style) {\n          canvas.style.width = \"\".concat(canvas.width, \"px\");\n        }\n      }\n\n      if (heightStyle.hasValue()) {\n        canvas.height = heightStyle.getPixels('y');\n\n        if (canvas.style) {\n          canvas.style.height = \"\".concat(canvas.height, \"px\");\n        }\n      }\n    }\n\n    var cWidth = canvas.clientWidth || canvas.width;\n    var cHeight = canvas.clientHeight || canvas.height;\n\n    if (ignoreDimensions && widthStyle.hasValue() && heightStyle.hasValue()) {\n      cWidth = widthStyle.getPixels('x');\n      cHeight = heightStyle.getPixels('y');\n    }\n\n    viewPort.setCurrent(cWidth, cHeight);\n\n    if (typeof offsetX === 'number') {\n      element.getAttribute('x', true).setValue(offsetX);\n    }\n\n    if (typeof offsetY === 'number') {\n      element.getAttribute('y', true).setValue(offsetY);\n    }\n\n    if (typeof scaleWidth === 'number' || typeof scaleHeight === 'number') {\n      var viewBox = toNumbers(element.getAttribute('viewBox').getString());\n      var xRatio = 0;\n      var yRatio = 0;\n\n      if (typeof scaleWidth === 'number') {\n        var _widthStyle = element.getStyle('width');\n\n        if (_widthStyle.hasValue()) {\n          xRatio = _widthStyle.getPixels('x') / scaleWidth;\n        } else if (!isNaN(viewBox[2])) {\n          xRatio = viewBox[2] / scaleWidth;\n        }\n      }\n\n      if (typeof scaleHeight === 'number') {\n        var _heightStyle = element.getStyle('height');\n\n        if (_heightStyle.hasValue()) {\n          yRatio = _heightStyle.getPixels('y') / scaleHeight;\n        } else if (!isNaN(viewBox[3])) {\n          yRatio = viewBox[3] / scaleHeight;\n        }\n      }\n\n      if (!xRatio) {\n        xRatio = yRatio;\n      }\n\n      if (!yRatio) {\n        yRatio = xRatio;\n      }\n\n      element.getAttribute('width', true).setValue(scaleWidth);\n      element.getAttribute('height', true).setValue(scaleHeight);\n      var transformStyle = element.getStyle('transform', true, true);\n      transformStyle.setValue(\"\".concat(transformStyle.getString(), \" scale(\").concat(1.0 / xRatio, \", \").concat(1.0 / yRatio, \")\"));\n    } // clear and render\n\n\n    if (!ignoreClear) {\n      ctx.clearRect(0, 0, cWidth, cHeight);\n    }\n\n    element.render(ctx);\n\n    if (isFirstRender) {\n      this.isFirstRender = false;\n    }\n  }\n\n}\nScreen.defaultWindow = defaultWindow;\nScreen.defaultFetch = defaultFetch$1;\n\nvar {\n  defaultFetch\n} = Screen;\nvar DefaultDOMParser = typeof DOMParser !== 'undefined' ? DOMParser : null;\nclass Parser {\n  constructor() {\n    var {\n      fetch = defaultFetch,\n      DOMParser = DefaultDOMParser\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.fetch = fetch;\n    this.DOMParser = DOMParser;\n  }\n\n  parse(resource) {\n    var _this = this;\n\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      if (resource.startsWith('<')) {\n        return _this.parseFromString(resource);\n      }\n\n      return _this.load(resource);\n    })();\n  }\n\n  parseFromString(xml) {\n    var parser = new this.DOMParser();\n\n    try {\n      return this.checkDocument(parser.parseFromString(xml, 'image/svg+xml'));\n    } catch (err) {\n      return this.checkDocument(parser.parseFromString(xml, 'text/xml'));\n    }\n  }\n\n  checkDocument(document) {\n    var parserError = document.getElementsByTagName('parsererror')[0];\n\n    if (parserError) {\n      throw new Error(parserError.textContent);\n    }\n\n    return document;\n  }\n\n  load(url) {\n    var _this2 = this;\n\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      var response = yield _this2.fetch(url);\n      var xml = yield response.text();\n      return _this2.parseFromString(xml);\n    })();\n  }\n\n}\n\nclass Translate {\n  constructor(_, point) {\n    this.type = 'translate';\n    this.point = null;\n    this.point = Point.parse(point);\n  }\n\n  apply(ctx) {\n    var {\n      x,\n      y\n    } = this.point;\n    ctx.translate(x || 0.0, y || 0.0);\n  }\n\n  unapply(ctx) {\n    var {\n      x,\n      y\n    } = this.point;\n    ctx.translate(-1.0 * x || 0.0, -1.0 * y || 0.0);\n  }\n\n  applyToPoint(point) {\n    var {\n      x,\n      y\n    } = this.point;\n    point.applyTransform([1, 0, 0, 1, x || 0.0, y || 0.0]);\n  }\n\n}\n\nclass Rotate {\n  constructor(document, rotate, transformOrigin) {\n    this.type = 'rotate';\n    this.angle = null;\n    this.originX = null;\n    this.originY = null;\n    this.cx = 0;\n    this.cy = 0;\n    var numbers = toNumbers(rotate);\n    this.angle = new Property(document, 'angle', numbers[0]);\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n    this.cx = numbers[1] || 0;\n    this.cy = numbers[2] || 0;\n  }\n\n  apply(ctx) {\n    var {\n      cx,\n      cy,\n      originX,\n      originY,\n      angle\n    } = this;\n    var tx = cx + originX.getPixels('x');\n    var ty = cy + originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.rotate(angle.getRadians());\n    ctx.translate(-tx, -ty);\n  }\n\n  unapply(ctx) {\n    var {\n      cx,\n      cy,\n      originX,\n      originY,\n      angle\n    } = this;\n    var tx = cx + originX.getPixels('x');\n    var ty = cy + originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.rotate(-1.0 * angle.getRadians());\n    ctx.translate(-tx, -ty);\n  }\n\n  applyToPoint(point) {\n    var {\n      cx,\n      cy,\n      angle\n    } = this;\n    var rad = angle.getRadians();\n    point.applyTransform([1, 0, 0, 1, cx || 0.0, cy || 0.0 // this.p.y\n    ]);\n    point.applyTransform([Math.cos(rad), Math.sin(rad), -Math.sin(rad), Math.cos(rad), 0, 0]);\n    point.applyTransform([1, 0, 0, 1, -cx || 0.0, -cy || 0.0 // -this.p.y\n    ]);\n  }\n\n}\n\nclass Scale {\n  constructor(_, scale, transformOrigin) {\n    this.type = 'scale';\n    this.scale = null;\n    this.originX = null;\n    this.originY = null;\n    var scaleSize = Point.parseScale(scale); // Workaround for node-canvas\n\n    if (scaleSize.x === 0 || scaleSize.y === 0) {\n      scaleSize.x = PSEUDO_ZERO;\n      scaleSize.y = PSEUDO_ZERO;\n    }\n\n    this.scale = scaleSize;\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n  }\n\n  apply(ctx) {\n    var {\n      scale: {\n        x,\n        y\n      },\n      originX,\n      originY\n    } = this;\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.scale(x, y || x);\n    ctx.translate(-tx, -ty);\n  }\n\n  unapply(ctx) {\n    var {\n      scale: {\n        x,\n        y\n      },\n      originX,\n      originY\n    } = this;\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.scale(1.0 / x, 1.0 / y || x);\n    ctx.translate(-tx, -ty);\n  }\n\n  applyToPoint(point) {\n    var {\n      x,\n      y\n    } = this.scale;\n    point.applyTransform([x || 0.0, 0, 0, y || 0.0, 0, 0]);\n  }\n\n}\n\nclass Matrix {\n  constructor(_, matrix, transformOrigin) {\n    this.type = 'matrix';\n    this.matrix = [];\n    this.originX = null;\n    this.originY = null;\n    this.matrix = toNumbers(matrix);\n    this.originX = transformOrigin[0];\n    this.originY = transformOrigin[1];\n  }\n\n  apply(ctx) {\n    var {\n      originX,\n      originY,\n      matrix\n    } = this;\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n    ctx.translate(-tx, -ty);\n  }\n\n  unapply(ctx) {\n    var {\n      originX,\n      originY,\n      matrix\n    } = this;\n    var a = matrix[0];\n    var b = matrix[2];\n    var c = matrix[4];\n    var d = matrix[1];\n    var e = matrix[3];\n    var f = matrix[5];\n    var g = 0.0;\n    var h = 0.0;\n    var i = 1.0;\n    var det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g));\n    var tx = originX.getPixels('x');\n    var ty = originY.getPixels('y');\n    ctx.translate(tx, ty);\n    ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c * h - b * i), det * (a * i - c * g), det * (b * f - c * e), det * (c * d - a * f));\n    ctx.translate(-tx, -ty);\n  }\n\n  applyToPoint(point) {\n    point.applyTransform(this.matrix);\n  }\n\n}\n\nclass Skew extends Matrix {\n  constructor(document, skew, transformOrigin) {\n    super(document, skew, transformOrigin);\n    this.type = 'skew';\n    this.angle = null;\n    this.angle = new Property(document, 'angle', skew);\n  }\n\n}\n\nclass SkewX extends Skew {\n  constructor(document, skew, transformOrigin) {\n    super(document, skew, transformOrigin);\n    this.type = 'skewX';\n    this.matrix = [1, 0, Math.tan(this.angle.getRadians()), 1, 0, 0];\n  }\n\n}\n\nclass SkewY extends Skew {\n  constructor(document, skew, transformOrigin) {\n    super(document, skew, transformOrigin);\n    this.type = 'skewY';\n    this.matrix = [1, Math.tan(this.angle.getRadians()), 0, 1, 0, 0];\n  }\n\n}\n\nfunction parseTransforms(transform) {\n  return compressSpaces(transform).trim().replace(/\\)([a-zA-Z])/g, ') $1').replace(/\\)(\\s?,\\s?)/g, ') ').split(/\\s(?=[a-z])/);\n}\n\nfunction parseTransform(transform) {\n  var [type, value] = transform.split('(');\n  return [type.trim(), value.trim().replace(')', '')];\n}\n\nclass Transform {\n  constructor(document, transform, transformOrigin) {\n    this.document = document;\n    this.transforms = [];\n    var data = parseTransforms(transform);\n    data.forEach(transform => {\n      if (transform === 'none') {\n        return;\n      }\n\n      var [type, value] = parseTransform(transform);\n      var TransformType = Transform.transformTypes[type];\n\n      if (typeof TransformType !== 'undefined') {\n        this.transforms.push(new TransformType(this.document, value, transformOrigin));\n      }\n    });\n  }\n\n  static fromElement(document, element) {\n    var transformStyle = element.getStyle('transform', false, true);\n    var [transformOriginXProperty, transformOriginYProperty = transformOriginXProperty] = element.getStyle('transform-origin', false, true).split();\n    var transformOrigin = [transformOriginXProperty, transformOriginYProperty];\n\n    if (transformStyle.hasValue()) {\n      return new Transform(document, transformStyle.getString(), transformOrigin);\n    }\n\n    return null;\n  }\n\n  apply(ctx) {\n    var {\n      transforms\n    } = this;\n    var len = transforms.length;\n\n    for (var i = 0; i < len; i++) {\n      transforms[i].apply(ctx);\n    }\n  }\n\n  unapply(ctx) {\n    var {\n      transforms\n    } = this;\n    var len = transforms.length;\n\n    for (var i = len - 1; i >= 0; i--) {\n      transforms[i].unapply(ctx);\n    }\n  } // TODO: applyToPoint unused ... remove?\n\n\n  applyToPoint(point) {\n    var {\n      transforms\n    } = this;\n    var len = transforms.length;\n\n    for (var i = 0; i < len; i++) {\n      transforms[i].applyToPoint(point);\n    }\n  }\n\n}\nTransform.transformTypes = {\n  translate: Translate,\n  rotate: Rotate,\n  scale: Scale,\n  matrix: Matrix,\n  skewX: SkewX,\n  skewY: SkewY\n};\n\nclass Element {\n  constructor(document, node) {\n    var captureTextNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.document = document;\n    this.node = node;\n    this.captureTextNodes = captureTextNodes;\n    this.attributes = {};\n    this.styles = {};\n    this.stylesSpecificity = {};\n    this.animationFrozen = false;\n    this.animationFrozenValue = '';\n    this.parent = null;\n    this.children = [];\n\n    if (!node || node.nodeType !== 1) {\n      // ELEMENT_NODE\n      return;\n    } // add attributes\n\n\n    Array.from(node.attributes).forEach(attribute => {\n      var nodeName = normalizeAttributeName(attribute.nodeName);\n      this.attributes[nodeName] = new Property(document, nodeName, attribute.value);\n    });\n    this.addStylesFromStyleDefinition(); // add inline styles\n\n    if (this.getAttribute('style').hasValue()) {\n      var styles = this.getAttribute('style').getString().split(';').map(_ => _.trim());\n      styles.forEach(style => {\n        if (!style) {\n          return;\n        }\n\n        var [name, value] = style.split(':').map(_ => _.trim());\n        this.styles[name] = new Property(document, name, value);\n      });\n    }\n\n    var {\n      definitions\n    } = document;\n    var id = this.getAttribute('id'); // add id\n\n    if (id.hasValue()) {\n      if (!definitions[id.getString()]) {\n        definitions[id.getString()] = this;\n      }\n    }\n\n    Array.from(node.childNodes).forEach(childNode => {\n      if (childNode.nodeType === 1) {\n        this.addChild(childNode); // ELEMENT_NODE\n      } else if (captureTextNodes && (childNode.nodeType === 3 || childNode.nodeType === 4)) {\n        var textNode = document.createTextNode(childNode);\n\n        if (textNode.getText().length > 0) {\n          this.addChild(textNode); // TEXT_NODE\n        }\n      }\n    });\n  }\n\n  getAttribute(name) {\n    var createIfNotExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var attr = this.attributes[name];\n\n    if (!attr && createIfNotExists) {\n      var _attr = new Property(this.document, name, '');\n\n      this.attributes[name] = _attr;\n      return _attr;\n    }\n\n    return attr || Property.empty(this.document);\n  }\n\n  getHrefAttribute() {\n    for (var key in this.attributes) {\n      if (key === 'href' || key.endsWith(':href')) {\n        return this.attributes[key];\n      }\n    }\n\n    return Property.empty(this.document);\n  }\n\n  getStyle(name) {\n    var createIfNotExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var skipAncestors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var style = this.styles[name];\n\n    if (style) {\n      return style;\n    }\n\n    var attr = this.getAttribute(name);\n\n    if (attr !== null && attr !== void 0 && attr.hasValue()) {\n      this.styles[name] = attr; // move up to me to cache\n\n      return attr;\n    }\n\n    if (!skipAncestors) {\n      var {\n        parent\n      } = this;\n\n      if (parent) {\n        var parentStyle = parent.getStyle(name);\n\n        if (parentStyle !== null && parentStyle !== void 0 && parentStyle.hasValue()) {\n          return parentStyle;\n        }\n      }\n    }\n\n    if (createIfNotExists) {\n      var _style = new Property(this.document, name, '');\n\n      this.styles[name] = _style;\n      return _style;\n    }\n\n    return style || Property.empty(this.document);\n  }\n\n  render(ctx) {\n    // don't render display=none\n    // don't render visibility=hidden\n    if (this.getStyle('display').getString() === 'none' || this.getStyle('visibility').getString() === 'hidden') {\n      return;\n    }\n\n    ctx.save();\n\n    if (this.getStyle('mask').hasValue()) {\n      // mask\n      var mask = this.getStyle('mask').getDefinition();\n\n      if (mask) {\n        this.applyEffects(ctx);\n        mask.apply(ctx, this);\n      }\n    } else if (this.getStyle('filter').getValue('none') !== 'none') {\n      // filter\n      var filter = this.getStyle('filter').getDefinition();\n\n      if (filter) {\n        this.applyEffects(ctx);\n        filter.apply(ctx, this);\n      }\n    } else {\n      this.setContext(ctx);\n      this.renderChildren(ctx);\n      this.clearContext(ctx);\n    }\n\n    ctx.restore();\n  }\n\n  setContext(_) {// NO RENDER\n  }\n\n  applyEffects(ctx) {\n    // transform\n    var transform = Transform.fromElement(this.document, this);\n\n    if (transform) {\n      transform.apply(ctx);\n    } // clip\n\n\n    var clipPathStyleProp = this.getStyle('clip-path', false, true);\n\n    if (clipPathStyleProp.hasValue()) {\n      var clip = clipPathStyleProp.getDefinition();\n\n      if (clip) {\n        clip.apply(ctx);\n      }\n    }\n  }\n\n  clearContext(_) {// NO RENDER\n  }\n\n  renderChildren(ctx) {\n    this.children.forEach(child => {\n      child.render(ctx);\n    });\n  }\n\n  addChild(childNode) {\n    var child = childNode instanceof Element ? childNode : this.document.createElement(childNode);\n    child.parent = this;\n\n    if (!Element.ignoreChildTypes.includes(child.type)) {\n      this.children.push(child);\n    }\n  }\n\n  matchesSelector(selector) {\n    var _node$getAttribute;\n\n    var {\n      node\n    } = this;\n\n    if (typeof node.matches === 'function') {\n      return node.matches(selector);\n    }\n\n    var styleClasses = (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'class');\n\n    if (!styleClasses || styleClasses === '') {\n      return false;\n    }\n\n    return styleClasses.split(' ').some(styleClass => \".\".concat(styleClass) === selector);\n  }\n\n  addStylesFromStyleDefinition() {\n    var {\n      styles,\n      stylesSpecificity\n    } = this.document;\n\n    for (var selector in styles) {\n      if (!selector.startsWith('@') && this.matchesSelector(selector)) {\n        var style = styles[selector];\n        var specificity = stylesSpecificity[selector];\n\n        if (style) {\n          for (var name in style) {\n            var existingSpecificity = this.stylesSpecificity[name];\n\n            if (typeof existingSpecificity === 'undefined') {\n              existingSpecificity = '000';\n            }\n\n            if (specificity >= existingSpecificity) {\n              this.styles[name] = style[name];\n              this.stylesSpecificity[name] = specificity;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  removeStyles(element, ignoreStyles) {\n    var toRestore = ignoreStyles.reduce((toRestore, name) => {\n      var styleProp = element.getStyle(name);\n\n      if (!styleProp.hasValue()) {\n        return toRestore;\n      }\n\n      var value = styleProp.getString();\n      styleProp.setValue('');\n      return [...toRestore, [name, value]];\n    }, []);\n    return toRestore;\n  }\n\n  restoreStyles(element, styles) {\n    styles.forEach(_ref => {\n      var [name, value] = _ref;\n      element.getStyle(name, true).setValue(value);\n    });\n  }\n\n  isFirstChild() {\n    var _this$parent;\n\n    return ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.children.indexOf(this)) === 0;\n  }\n\n}\nElement.ignoreChildTypes = ['title'];\n\nclass UnknownElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n  }\n\n}\n\nfunction wrapFontFamily(fontFamily) {\n  var trimmed = fontFamily.trim();\n  return /^('|\")/.test(trimmed) ? trimmed : \"\\\"\".concat(trimmed, \"\\\"\");\n}\n\nfunction prepareFontFamily(fontFamily) {\n  return typeof process === 'undefined' ? fontFamily : fontFamily.trim().split(',').map(wrapFontFamily).join(',');\n}\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\r\n * @param fontStyle\r\n * @returns CSS font style.\r\n */\n\n\nfunction prepareFontStyle(fontStyle) {\n  if (!fontStyle) {\n    return '';\n  }\n\n  var targetFontStyle = fontStyle.trim().toLowerCase();\n\n  switch (targetFontStyle) {\n    case 'normal':\n    case 'italic':\n    case 'oblique':\n    case 'inherit':\n    case 'initial':\n    case 'unset':\n      return targetFontStyle;\n\n    default:\n      if (/^oblique\\s+(-|)\\d+deg$/.test(targetFontStyle)) {\n        return targetFontStyle;\n      }\n\n      return '';\n  }\n}\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\r\n * @param fontWeight\r\n * @returns CSS font weight.\r\n */\n\n\nfunction prepareFontWeight(fontWeight) {\n  if (!fontWeight) {\n    return '';\n  }\n\n  var targetFontWeight = fontWeight.trim().toLowerCase();\n\n  switch (targetFontWeight) {\n    case 'normal':\n    case 'bold':\n    case 'lighter':\n    case 'bolder':\n    case 'inherit':\n    case 'initial':\n    case 'unset':\n      return targetFontWeight;\n\n    default:\n      if (/^[\\d.]+$/.test(targetFontWeight)) {\n        return targetFontWeight;\n      }\n\n      return '';\n  }\n}\n\nclass Font {\n  constructor(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) {\n    var inheritFont = inherit ? typeof inherit === 'string' ? Font.parse(inherit) : inherit : {};\n    this.fontFamily = fontFamily || inheritFont.fontFamily;\n    this.fontSize = fontSize || inheritFont.fontSize;\n    this.fontStyle = fontStyle || inheritFont.fontStyle;\n    this.fontWeight = fontWeight || inheritFont.fontWeight;\n    this.fontVariant = fontVariant || inheritFont.fontVariant;\n  }\n\n  static parse() {\n    var font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var inherit = arguments.length > 1 ? arguments[1] : undefined;\n    var fontStyle = '';\n    var fontVariant = '';\n    var fontWeight = '';\n    var fontSize = '';\n    var fontFamily = '';\n    var parts = compressSpaces(font).trim().split(' ');\n    var set = {\n      fontSize: false,\n      fontStyle: false,\n      fontWeight: false,\n      fontVariant: false\n    };\n    parts.forEach(part => {\n      switch (true) {\n        case !set.fontStyle && Font.styles.includes(part):\n          if (part !== 'inherit') {\n            fontStyle = part;\n          }\n\n          set.fontStyle = true;\n          break;\n\n        case !set.fontVariant && Font.variants.includes(part):\n          if (part !== 'inherit') {\n            fontVariant = part;\n          }\n\n          set.fontStyle = true;\n          set.fontVariant = true;\n          break;\n\n        case !set.fontWeight && Font.weights.includes(part):\n          if (part !== 'inherit') {\n            fontWeight = part;\n          }\n\n          set.fontStyle = true;\n          set.fontVariant = true;\n          set.fontWeight = true;\n          break;\n\n        case !set.fontSize:\n          if (part !== 'inherit') {\n            [fontSize] = part.split('/');\n          }\n\n          set.fontStyle = true;\n          set.fontVariant = true;\n          set.fontWeight = true;\n          set.fontSize = true;\n          break;\n\n        default:\n          if (part !== 'inherit') {\n            fontFamily += part;\n          }\n\n      }\n    });\n    return new Font(fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit);\n  }\n\n  toString() {\n    return [prepareFontStyle(this.fontStyle), this.fontVariant, prepareFontWeight(this.fontWeight), this.fontSize, // Wrap fontFamily only on nodejs and only for canvas.ctx\n    prepareFontFamily(this.fontFamily)].join(' ').trim();\n  }\n\n}\nFont.styles = 'normal|italic|oblique|inherit';\nFont.variants = 'normal|small-caps|inherit';\nFont.weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';\n\nclass BoundingBox {\n  constructor() {\n    var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.NaN;\n    var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.NaN;\n    var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.NaN;\n    var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Number.NaN;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  get x() {\n    return this.x1;\n  }\n\n  get y() {\n    return this.y1;\n  }\n\n  get width() {\n    return this.x2 - this.x1;\n  }\n\n  get height() {\n    return this.y2 - this.y1;\n  }\n\n  addPoint(x, y) {\n    if (typeof x !== 'undefined') {\n      if (isNaN(this.x1) || isNaN(this.x2)) {\n        this.x1 = x;\n        this.x2 = x;\n      }\n\n      if (x < this.x1) {\n        this.x1 = x;\n      }\n\n      if (x > this.x2) {\n        this.x2 = x;\n      }\n    }\n\n    if (typeof y !== 'undefined') {\n      if (isNaN(this.y1) || isNaN(this.y2)) {\n        this.y1 = y;\n        this.y2 = y;\n      }\n\n      if (y < this.y1) {\n        this.y1 = y;\n      }\n\n      if (y > this.y2) {\n        this.y2 = y;\n      }\n    }\n  }\n\n  addX(x) {\n    this.addPoint(x, null);\n  }\n\n  addY(y) {\n    this.addPoint(null, y);\n  }\n\n  addBoundingBox(boundingBox) {\n    if (!boundingBox) {\n      return;\n    }\n\n    var {\n      x1,\n      y1,\n      x2,\n      y2\n    } = boundingBox;\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  sumCubic(t, p0, p1, p2, p3) {\n    return Math.pow(1 - t, 3) * p0 + 3 * Math.pow(1 - t, 2) * t * p1 + 3 * (1 - t) * Math.pow(t, 2) * p2 + Math.pow(t, 3) * p3;\n  }\n\n  bezierCurveAdd(forX, p0, p1, p2, p3) {\n    var b = 6 * p0 - 12 * p1 + 6 * p2;\n    var a = -3 * p0 + 9 * p1 - 9 * p2 + 3 * p3;\n    var c = 3 * p1 - 3 * p0;\n\n    if (a === 0) {\n      if (b === 0) {\n        return;\n      }\n\n      var t = -c / b;\n\n      if (0 < t && t < 1) {\n        if (forX) {\n          this.addX(this.sumCubic(t, p0, p1, p2, p3));\n        } else {\n          this.addY(this.sumCubic(t, p0, p1, p2, p3));\n        }\n      }\n\n      return;\n    }\n\n    var b2ac = Math.pow(b, 2) - 4 * c * a;\n\n    if (b2ac < 0) {\n      return;\n    }\n\n    var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\n    if (0 < t1 && t1 < 1) {\n      if (forX) {\n        this.addX(this.sumCubic(t1, p0, p1, p2, p3));\n      } else {\n        this.addY(this.sumCubic(t1, p0, p1, p2, p3));\n      }\n    }\n\n    var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\n    if (0 < t2 && t2 < 1) {\n      if (forX) {\n        this.addX(this.sumCubic(t2, p0, p1, p2, p3));\n      } else {\n        this.addY(this.sumCubic(t2, p0, p1, p2, p3));\n      }\n    }\n  } // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\n\n  addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n    this.addPoint(p0x, p0y);\n    this.addPoint(p3x, p3y);\n    this.bezierCurveAdd(true, p0x, p1x, p2x, p3x);\n    this.bezierCurveAdd(false, p0y, p1y, p2y, p3y);\n  }\n\n  addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n    var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n    var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n    var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n    var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n    this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);\n  }\n\n  isPointInBox(x, y) {\n    var {\n      x1,\n      y1,\n      x2,\n      y2\n    } = this;\n    return x1 <= x && x <= x2 && y1 <= y && y <= y2;\n  }\n\n}\n\nclass PathParser extends svg_pathdata__WEBPACK_IMPORTED_MODULE_15__/* .SVGPathData */ .OU {\n  constructor(path) {\n    super(path // Fix spaces after signs.\n    .replace(/([+\\-.])\\s+/gm, '$1') // Remove invalid part.\n    .replace(/[^MmZzLlHhVvCcSsQqTtAae\\d\\s.,+-].*/g, ''));\n    this.control = null;\n    this.start = null;\n    this.current = null;\n    this.command = null;\n    this.commands = this.commands;\n    this.i = -1;\n    this.previousCommand = null;\n    this.points = [];\n    this.angles = [];\n  }\n\n  reset() {\n    this.i = -1;\n    this.command = null;\n    this.previousCommand = null;\n    this.start = new Point(0, 0);\n    this.control = new Point(0, 0);\n    this.current = new Point(0, 0);\n    this.points = [];\n    this.angles = [];\n  }\n\n  isEnd() {\n    var {\n      i,\n      commands\n    } = this;\n    return i >= commands.length - 1;\n  }\n\n  next() {\n    var command = this.commands[++this.i];\n    this.previousCommand = this.command;\n    this.command = command;\n    return command;\n  }\n\n  getPoint() {\n    var xProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'x';\n    var yProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'y';\n    var point = new Point(this.command[xProp], this.command[yProp]);\n    return this.makeAbsolute(point);\n  }\n\n  getAsControlPoint(xProp, yProp) {\n    var point = this.getPoint(xProp, yProp);\n    this.control = point;\n    return point;\n  }\n\n  getAsCurrentPoint(xProp, yProp) {\n    var point = this.getPoint(xProp, yProp);\n    this.current = point;\n    return point;\n  }\n\n  getReflectedControlPoint() {\n    var previousCommand = this.previousCommand.type;\n\n    if (previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_15__/* .SVGPathData.CURVE_TO */ .OU.CURVE_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_15__/* .SVGPathData.SMOOTH_CURVE_TO */ .OU.SMOOTH_CURVE_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_15__/* .SVGPathData.QUAD_TO */ .OU.QUAD_TO && previousCommand !== svg_pathdata__WEBPACK_IMPORTED_MODULE_15__/* .SVGPathData.SMOOTH_QUAD_TO */ .OU.SMOOTH_QUAD_TO) {\n      return this.current;\n    } // reflect point\n\n\n    var {\n      current: {\n        x: cx,\n        y: cy\n      },\n      control: {\n        x: ox,\n        y: oy\n      }\n    } = this;\n    var point = new Point(2 * cx - ox, 2 * cy - oy);\n    return point;\n  }\n\n  makeAbsolute(point) {\n    if (this.command.relative) {\n      var {\n        x,\n        y\n      } = this.current;\n      point.x += x;\n      point.y += y;\n    }\n\n    return point;\n  }\n\n  addMarker(point, from, priorTo) {\n    var {\n      points,\n      angles\n    } = this; // if the last angle isn't filled in because we didn't have this point yet ...\n\n    if (priorTo && angles.length > 0 && !angles[angles.length - 1]) {\n      angles[angles.length - 1] = points[points.length - 1].angleTo(priorTo);\n    }\n\n    this.addMarkerAngle(point, from ? from.angleTo(point) : null);\n  }\n\n  addMarkerAngle(point, angle) {\n    this.points.push(point);\n    this.angles.push(angle);\n  }\n\n  getMarkerPoints() {\n    return this.points;\n  }\n\n  getMarkerAngles() {\n    var {\n      angles\n    } = this;\n    var len = angles.length;\n\n    for (var i = 0; i < len; i++) {\n      if (!angles[i]) {\n        for (var j = i + 1; j < len; j++) {\n          if (angles[j]) {\n            angles[i] = angles[j];\n            break;\n          }\n        }\n      }\n    }\n\n    return angles;\n  }\n\n}\n\nclass RenderedElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.modifiedEmSizeStack = false;\n  }\n\n  calculateOpacity() {\n    var opacity = 1.0; // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n\n    var element = this;\n\n    while (element) {\n      var opacityStyle = element.getStyle('opacity', false, true); // no ancestors on style call\n\n      if (opacityStyle.hasValue(true)) {\n        opacity *= opacityStyle.getNumber();\n      }\n\n      element = element.parent;\n    }\n\n    return opacity;\n  }\n\n  setContext(ctx) {\n    var fromMeasure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!fromMeasure) {\n      // causes stack overflow when measuring text with gradients\n      // fill\n      var fillStyleProp = this.getStyle('fill');\n      var fillOpacityStyleProp = this.getStyle('fill-opacity');\n      var strokeStyleProp = this.getStyle('stroke');\n      var strokeOpacityProp = this.getStyle('stroke-opacity');\n\n      if (fillStyleProp.isUrlDefinition()) {\n        var fillStyle = fillStyleProp.getFillStyleDefinition(this, fillOpacityStyleProp);\n\n        if (fillStyle) {\n          ctx.fillStyle = fillStyle;\n        }\n      } else if (fillStyleProp.hasValue()) {\n        if (fillStyleProp.getString() === 'currentColor') {\n          fillStyleProp.setValue(this.getStyle('color').getColor());\n        }\n\n        var _fillStyle = fillStyleProp.getColor();\n\n        if (_fillStyle !== 'inherit') {\n          ctx.fillStyle = _fillStyle === 'none' ? 'rgba(0,0,0,0)' : _fillStyle;\n        }\n      }\n\n      if (fillOpacityStyleProp.hasValue()) {\n        var _fillStyle2 = new Property(this.document, 'fill', ctx.fillStyle).addOpacity(fillOpacityStyleProp).getColor();\n\n        ctx.fillStyle = _fillStyle2;\n      } // stroke\n\n\n      if (strokeStyleProp.isUrlDefinition()) {\n        var strokeStyle = strokeStyleProp.getFillStyleDefinition(this, strokeOpacityProp);\n\n        if (strokeStyle) {\n          ctx.strokeStyle = strokeStyle;\n        }\n      } else if (strokeStyleProp.hasValue()) {\n        if (strokeStyleProp.getString() === 'currentColor') {\n          strokeStyleProp.setValue(this.getStyle('color').getColor());\n        }\n\n        var _strokeStyle = strokeStyleProp.getString();\n\n        if (_strokeStyle !== 'inherit') {\n          ctx.strokeStyle = _strokeStyle === 'none' ? 'rgba(0,0,0,0)' : _strokeStyle;\n        }\n      }\n\n      if (strokeOpacityProp.hasValue()) {\n        var _strokeStyle2 = new Property(this.document, 'stroke', ctx.strokeStyle).addOpacity(strokeOpacityProp).getString();\n\n        ctx.strokeStyle = _strokeStyle2;\n      }\n\n      var strokeWidthStyleProp = this.getStyle('stroke-width');\n\n      if (strokeWidthStyleProp.hasValue()) {\n        var newLineWidth = strokeWidthStyleProp.getPixels();\n        ctx.lineWidth = !newLineWidth ? PSEUDO_ZERO // browsers don't respect 0 (or node-canvas? :-)\n        : newLineWidth;\n      }\n\n      var strokeLinecapStyleProp = this.getStyle('stroke-linecap');\n      var strokeLinejoinStyleProp = this.getStyle('stroke-linejoin');\n      var strokeMiterlimitProp = this.getStyle('stroke-miterlimit'); // NEED TEST\n      // const pointOrderStyleProp = this.getStyle('paint-order');\n\n      var strokeDasharrayStyleProp = this.getStyle('stroke-dasharray');\n      var strokeDashoffsetProp = this.getStyle('stroke-dashoffset');\n\n      if (strokeLinecapStyleProp.hasValue()) {\n        ctx.lineCap = strokeLinecapStyleProp.getString();\n      }\n\n      if (strokeLinejoinStyleProp.hasValue()) {\n        ctx.lineJoin = strokeLinejoinStyleProp.getString();\n      }\n\n      if (strokeMiterlimitProp.hasValue()) {\n        ctx.miterLimit = strokeMiterlimitProp.getNumber();\n      } // NEED TEST\n      // if (pointOrderStyleProp.hasValue()) {\n      // \t// ?\n      // \tctx.paintOrder = pointOrderStyleProp.getValue();\n      // }\n\n\n      if (strokeDasharrayStyleProp.hasValue() && strokeDasharrayStyleProp.getString() !== 'none') {\n        var gaps = toNumbers(strokeDasharrayStyleProp.getString());\n\n        if (typeof ctx.setLineDash !== 'undefined') {\n          ctx.setLineDash(gaps);\n        } else // @ts-expect-error Handle browser prefix.\n          if (typeof ctx.webkitLineDash !== 'undefined') {\n            // @ts-expect-error Handle browser prefix.\n            ctx.webkitLineDash = gaps;\n          } else // @ts-expect-error Handle browser prefix.\n            if (typeof ctx.mozDash !== 'undefined' && !(gaps.length === 1 && gaps[0] === 0)) {\n              // @ts-expect-error Handle browser prefix.\n              ctx.mozDash = gaps;\n            }\n\n        var offset = strokeDashoffsetProp.getPixels();\n\n        if (typeof ctx.lineDashOffset !== 'undefined') {\n          ctx.lineDashOffset = offset;\n        } else // @ts-expect-error Handle browser prefix.\n          if (typeof ctx.webkitLineDashOffset !== 'undefined') {\n            // @ts-expect-error Handle browser prefix.\n            ctx.webkitLineDashOffset = offset;\n          } else // @ts-expect-error Handle browser prefix.\n            if (typeof ctx.mozDashOffset !== 'undefined') {\n              // @ts-expect-error Handle browser prefix.\n              ctx.mozDashOffset = offset;\n            }\n      }\n    } // font\n\n\n    this.modifiedEmSizeStack = false;\n\n    if (typeof ctx.font !== 'undefined') {\n      var fontStyleProp = this.getStyle('font');\n      var fontStyleStyleProp = this.getStyle('font-style');\n      var fontVariantStyleProp = this.getStyle('font-variant');\n      var fontWeightStyleProp = this.getStyle('font-weight');\n      var fontSizeStyleProp = this.getStyle('font-size');\n      var fontFamilyStyleProp = this.getStyle('font-family');\n      var font = new Font(fontStyleStyleProp.getString(), fontVariantStyleProp.getString(), fontWeightStyleProp.getString(), fontSizeStyleProp.hasValue() ? \"\".concat(fontSizeStyleProp.getPixels(true), \"px\") : '', fontFamilyStyleProp.getString(), Font.parse(fontStyleProp.getString(), ctx.font));\n      fontStyleStyleProp.setValue(font.fontStyle);\n      fontVariantStyleProp.setValue(font.fontVariant);\n      fontWeightStyleProp.setValue(font.fontWeight);\n      fontSizeStyleProp.setValue(font.fontSize);\n      fontFamilyStyleProp.setValue(font.fontFamily);\n      ctx.font = font.toString();\n\n      if (fontSizeStyleProp.isPixels()) {\n        this.document.emSize = fontSizeStyleProp.getPixels();\n        this.modifiedEmSizeStack = true;\n      }\n    }\n\n    if (!fromMeasure) {\n      // effects\n      this.applyEffects(ctx); // opacity\n\n      ctx.globalAlpha = this.calculateOpacity();\n    }\n  }\n\n  clearContext(ctx) {\n    super.clearContext(ctx);\n\n    if (this.modifiedEmSizeStack) {\n      this.document.popEmSize();\n    }\n  }\n\n}\n\nclass PathElement extends RenderedElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'path';\n    this.pathParser = null;\n    this.pathParser = new PathParser(this.getAttribute('d').getString());\n  }\n\n  path(ctx) {\n    var {\n      pathParser\n    } = this;\n    var boundingBox = new BoundingBox();\n    pathParser.reset();\n\n    if (ctx) {\n      ctx.beginPath();\n    }\n\n    while (!pathParser.isEnd()) {\n      switch (pathParser.next().type) {\n        case PathParser.MOVE_TO:\n          this.pathM(ctx, boundingBox);\n          break;\n\n        case PathParser.LINE_TO:\n          this.pathL(ctx, boundingBox);\n          break;\n\n        case PathParser.HORIZ_LINE_TO:\n          this.pathH(ctx, boundingBox);\n          break;\n\n        case PathParser.VERT_LINE_TO:\n          this.pathV(ctx, boundingBox);\n          break;\n\n        case PathParser.CURVE_TO:\n          this.pathC(ctx, boundingBox);\n          break;\n\n        case PathParser.SMOOTH_CURVE_TO:\n          this.pathS(ctx, boundingBox);\n          break;\n\n        case PathParser.QUAD_TO:\n          this.pathQ(ctx, boundingBox);\n          break;\n\n        case PathParser.SMOOTH_QUAD_TO:\n          this.pathT(ctx, boundingBox);\n          break;\n\n        case PathParser.ARC:\n          this.pathA(ctx, boundingBox);\n          break;\n\n        case PathParser.CLOSE_PATH:\n          this.pathZ(ctx, boundingBox);\n          break;\n      }\n    }\n\n    return boundingBox;\n  }\n\n  getBoundingBox(_) {\n    return this.path();\n  }\n\n  getMarkers() {\n    var {\n      pathParser\n    } = this;\n    var points = pathParser.getMarkerPoints();\n    var angles = pathParser.getMarkerAngles();\n    var markers = points.map((point, i) => [point, angles[i]]);\n    return markers;\n  }\n\n  renderChildren(ctx) {\n    this.path(ctx);\n    this.document.screen.mouse.checkPath(this, ctx);\n    var fillRuleStyleProp = this.getStyle('fill-rule');\n\n    if (ctx.fillStyle !== '') {\n      if (fillRuleStyleProp.getString('inherit') !== 'inherit') {\n        ctx.fill(fillRuleStyleProp.getString());\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (ctx.strokeStyle !== '') {\n      if (this.getAttribute('vector-effect').getString() === 'non-scaling-stroke') {\n        ctx.save();\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.stroke();\n        ctx.restore();\n      } else {\n        ctx.stroke();\n      }\n    }\n\n    var markers = this.getMarkers();\n\n    if (markers) {\n      var markersLastIndex = markers.length - 1;\n      var markerStartStyleProp = this.getStyle('marker-start');\n      var markerMidStyleProp = this.getStyle('marker-mid');\n      var markerEndStyleProp = this.getStyle('marker-end');\n\n      if (markerStartStyleProp.isUrlDefinition()) {\n        var marker = markerStartStyleProp.getDefinition();\n        var [point, angle] = markers[0];\n        marker.render(ctx, point, angle);\n      }\n\n      if (markerMidStyleProp.isUrlDefinition()) {\n        var _marker = markerMidStyleProp.getDefinition();\n\n        for (var i = 1; i < markersLastIndex; i++) {\n          var [_point, _angle] = markers[i];\n\n          _marker.render(ctx, _point, _angle);\n        }\n      }\n\n      if (markerEndStyleProp.isUrlDefinition()) {\n        var _marker2 = markerEndStyleProp.getDefinition();\n\n        var [_point2, _angle2] = markers[markersLastIndex];\n\n        _marker2.render(ctx, _point2, _angle2);\n      }\n    }\n  }\n\n  static pathM(pathParser) {\n    var point = pathParser.getAsCurrentPoint();\n    pathParser.start = pathParser.current;\n    return {\n      point\n    };\n  }\n\n  pathM(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      point\n    } = PathElement.pathM(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.moveTo(x, y);\n    }\n  }\n\n  static pathL(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var point = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      point\n    };\n  }\n\n  pathL(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point\n    } = PathElement.pathL(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point, current);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n    }\n  }\n\n  static pathH(pathParser) {\n    var {\n      current,\n      command\n    } = pathParser;\n    var point = new Point((command.relative ? current.x : 0) + command.x, current.y);\n    pathParser.current = point;\n    return {\n      current,\n      point\n    };\n  }\n\n  pathH(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point\n    } = PathElement.pathH(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point, current);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n    }\n  }\n\n  static pathV(pathParser) {\n    var {\n      current,\n      command\n    } = pathParser;\n    var point = new Point(current.x, (command.relative ? current.y : 0) + command.y);\n    pathParser.current = point;\n    return {\n      current,\n      point\n    };\n  }\n\n  pathV(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point\n    } = PathElement.pathV(pathParser);\n    var {\n      x,\n      y\n    } = point;\n    pathParser.addMarker(point, current);\n    boundingBox.addPoint(x, y);\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n    }\n  }\n\n  static pathC(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var point = pathParser.getPoint('x1', 'y1');\n    var controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathC(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathC(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, point);\n    boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathS(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var point = pathParser.getReflectedControlPoint();\n    var controlPoint = pathParser.getAsControlPoint('x2', 'y2');\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathS(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathS(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, point);\n    boundingBox.addBezierCurve(current.x, current.y, point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.bezierCurveTo(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathQ(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var controlPoint = pathParser.getAsControlPoint('x1', 'y1');\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathQ(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathQ(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n    boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathT(pathParser) {\n    var {\n      current\n    } = pathParser;\n    var controlPoint = pathParser.getReflectedControlPoint();\n    pathParser.control = controlPoint;\n    var currentPoint = pathParser.getAsCurrentPoint();\n    return {\n      current,\n      controlPoint,\n      currentPoint\n    };\n  }\n\n  pathT(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      current,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathT(pathParser);\n    pathParser.addMarker(currentPoint, controlPoint, controlPoint);\n    boundingBox.addQuadraticCurve(current.x, current.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n\n    if (ctx) {\n      ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    }\n  }\n\n  static pathA(pathParser) {\n    var {\n      current,\n      command\n    } = pathParser;\n    var {\n      rX,\n      rY,\n      xRot,\n      lArcFlag,\n      sweepFlag\n    } = command;\n    var xAxisRotation = xRot * (Math.PI / 180.0);\n    var currentPoint = pathParser.getAsCurrentPoint(); // Conversion from endpoint to center parameterization\n    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n    // x1', y1'\n\n    var currp = new Point(Math.cos(xAxisRotation) * (current.x - currentPoint.x) / 2.0 + Math.sin(xAxisRotation) * (current.y - currentPoint.y) / 2.0, -Math.sin(xAxisRotation) * (current.x - currentPoint.x) / 2.0 + Math.cos(xAxisRotation) * (current.y - currentPoint.y) / 2.0); // adjust radii\n\n    var l = Math.pow(currp.x, 2) / Math.pow(rX, 2) + Math.pow(currp.y, 2) / Math.pow(rY, 2);\n\n    if (l > 1) {\n      rX *= Math.sqrt(l);\n      rY *= Math.sqrt(l);\n    } // cx', cy'\n\n\n    var s = (lArcFlag === sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rX, 2) * Math.pow(rY, 2) - Math.pow(rX, 2) * Math.pow(currp.y, 2) - Math.pow(rY, 2) * Math.pow(currp.x, 2)) / (Math.pow(rX, 2) * Math.pow(currp.y, 2) + Math.pow(rY, 2) * Math.pow(currp.x, 2)));\n\n    if (isNaN(s)) {\n      s = 0;\n    }\n\n    var cpp = new Point(s * rX * currp.y / rY, s * -rY * currp.x / rX); // cx, cy\n\n    var centp = new Point((current.x + currentPoint.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (current.y + currentPoint.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y); // initial angle\n\n    var a1 = vectorsAngle([1, 0], [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY]); // θ1\n    // angle delta\n\n    var u = [(currp.x - cpp.x) / rX, (currp.y - cpp.y) / rY];\n    var v = [(-currp.x - cpp.x) / rX, (-currp.y - cpp.y) / rY];\n    var ad = vectorsAngle(u, v); // Δθ\n\n    if (vectorsRatio(u, v) <= -1) {\n      ad = Math.PI;\n    }\n\n    if (vectorsRatio(u, v) >= 1) {\n      ad = 0;\n    }\n\n    return {\n      currentPoint,\n      rX,\n      rY,\n      sweepFlag,\n      xAxisRotation,\n      centp,\n      a1,\n      ad\n    };\n  }\n\n  pathA(ctx, boundingBox) {\n    var {\n      pathParser\n    } = this;\n    var {\n      currentPoint,\n      rX,\n      rY,\n      sweepFlag,\n      xAxisRotation,\n      centp,\n      a1,\n      ad\n    } = PathElement.pathA(pathParser); // for markers\n\n    var dir = 1 - sweepFlag ? 1.0 : -1.0;\n    var ah = a1 + dir * (ad / 2.0);\n    var halfWay = new Point(centp.x + rX * Math.cos(ah), centp.y + rY * Math.sin(ah));\n    pathParser.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);\n    pathParser.addMarkerAngle(currentPoint, ah - dir * Math.PI);\n    boundingBox.addPoint(currentPoint.x, currentPoint.y); // TODO: this is too naive, make it better\n\n    if (ctx && !isNaN(a1) && !isNaN(ad)) {\n      var r = rX > rY ? rX : rY;\n      var sx = rX > rY ? 1 : rX / rY;\n      var sy = rX > rY ? rY / rX : 1;\n      ctx.translate(centp.x, centp.y);\n      ctx.rotate(xAxisRotation);\n      ctx.scale(sx, sy);\n      ctx.arc(0, 0, r, a1, a1 + ad, Boolean(1 - sweepFlag));\n      ctx.scale(1 / sx, 1 / sy);\n      ctx.rotate(-xAxisRotation);\n      ctx.translate(-centp.x, -centp.y);\n    }\n  }\n\n  static pathZ(pathParser) {\n    pathParser.current = pathParser.start;\n  }\n\n  pathZ(ctx, boundingBox) {\n    PathElement.pathZ(this.pathParser);\n\n    if (ctx) {\n      // only close path if it is not a straight line\n      if (boundingBox.x1 !== boundingBox.x2 && boundingBox.y1 !== boundingBox.y2) {\n        ctx.closePath();\n      }\n    }\n  }\n\n}\n\nclass GlyphElement extends PathElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'glyph';\n    this.horizAdvX = this.getAttribute('horiz-adv-x').getNumber();\n    this.unicode = this.getAttribute('unicode').getString();\n    this.arabicForm = this.getAttribute('arabic-form').getString();\n  }\n\n}\n\nclass TextElement extends RenderedElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, new.target === TextElement ? true : captureTextNodes);\n    this.type = 'text';\n    this.x = 0;\n    this.y = 0;\n    this.measureCache = -1;\n  }\n\n  setContext(ctx) {\n    var fromMeasure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    super.setContext(ctx, fromMeasure);\n    var textBaseline = this.getStyle('dominant-baseline').getTextBaseline() || this.getStyle('alignment-baseline').getTextBaseline();\n\n    if (textBaseline) {\n      ctx.textBaseline = textBaseline;\n    }\n  }\n\n  initializeCoordinates() {\n    this.x = 0;\n    this.y = 0;\n    this.leafTexts = [];\n    this.textChunkStart = 0;\n    this.minX = Number.POSITIVE_INFINITY;\n    this.maxX = Number.NEGATIVE_INFINITY;\n  }\n\n  getBoundingBox(ctx) {\n    if (this.type !== 'text') {\n      return this.getTElementBoundingBox(ctx);\n    } // first, calculate child positions\n\n\n    this.initializeCoordinates();\n    this.adjustChildCoordinatesRecursive(ctx);\n    var boundingBox = null; // then calculate bounding box\n\n    this.children.forEach((_, i) => {\n      var childBoundingBox = this.getChildBoundingBox(ctx, this, this, i);\n\n      if (!boundingBox) {\n        boundingBox = childBoundingBox;\n      } else {\n        boundingBox.addBoundingBox(childBoundingBox);\n      }\n    });\n    return boundingBox;\n  }\n\n  getFontSize() {\n    var {\n      document,\n      parent\n    } = this;\n    var inheritFontSize = Font.parse(document.ctx.font).fontSize;\n    var fontSize = parent.getStyle('font-size').getNumber(inheritFontSize);\n    return fontSize;\n  }\n\n  getTElementBoundingBox(ctx) {\n    var fontSize = this.getFontSize();\n    return new BoundingBox(this.x, this.y - fontSize, this.x + this.measureText(ctx), this.y);\n  }\n\n  getGlyph(font, text, i) {\n    var char = text[i];\n    var glyph = null;\n\n    if (font.isArabic) {\n      var len = text.length;\n      var prevChar = text[i - 1];\n      var nextChar = text[i + 1];\n      var arabicForm = 'isolated';\n\n      if ((i === 0 || prevChar === ' ') && i < len - 1 && nextChar !== ' ') {\n        arabicForm = 'terminal';\n      }\n\n      if (i > 0 && prevChar !== ' ' && i < len - 1 && nextChar !== ' ') {\n        arabicForm = 'medial';\n      }\n\n      if (i > 0 && prevChar !== ' ' && (i === len - 1 || nextChar === ' ')) {\n        arabicForm = 'initial';\n      }\n\n      if (typeof font.glyphs[char] !== 'undefined') {\n        // NEED TEST\n        var maybeGlyph = font.glyphs[char];\n        glyph = maybeGlyph instanceof GlyphElement ? maybeGlyph : maybeGlyph[arabicForm];\n      }\n    } else {\n      glyph = font.glyphs[char];\n    }\n\n    if (!glyph) {\n      glyph = font.missingGlyph;\n    }\n\n    return glyph;\n  }\n\n  getText() {\n    return '';\n  }\n\n  getTextFromNode(node) {\n    var textNode = node || this.node;\n    var childNodes = Array.from(textNode.parentNode.childNodes);\n    var index = childNodes.indexOf(textNode);\n    var lastIndex = childNodes.length - 1;\n    var text = compressSpaces( // textNode.value\n    // || textNode.text\n    textNode.textContent || '');\n\n    if (index === 0) {\n      text = trimLeft(text);\n    }\n\n    if (index === lastIndex) {\n      text = trimRight(text);\n    }\n\n    return text;\n  }\n\n  renderChildren(ctx) {\n    if (this.type !== 'text') {\n      this.renderTElementChildren(ctx);\n      return;\n    } // first, calculate child positions\n\n\n    this.initializeCoordinates();\n    this.adjustChildCoordinatesRecursive(ctx); // then render\n\n    this.children.forEach((_, i) => {\n      this.renderChild(ctx, this, this, i);\n    });\n    var {\n      mouse\n    } = this.document.screen; // Do not calc bounding box if mouse is not working.\n\n    if (mouse.isWorking()) {\n      mouse.checkBoundingBox(this, this.getBoundingBox(ctx));\n    }\n  }\n\n  renderTElementChildren(ctx) {\n    var {\n      document,\n      parent\n    } = this;\n    var renderText = this.getText();\n    var customFont = parent.getStyle('font-family').getDefinition();\n\n    if (customFont) {\n      var {\n        unitsPerEm\n      } = customFont.fontFace;\n      var ctxFont = Font.parse(document.ctx.font);\n      var fontSize = parent.getStyle('font-size').getNumber(ctxFont.fontSize);\n      var fontStyle = parent.getStyle('font-style').getString(ctxFont.fontStyle);\n      var scale = fontSize / unitsPerEm;\n      var text = customFont.isRTL ? renderText.split('').reverse().join('') : renderText;\n      var dx = toNumbers(parent.getAttribute('dx').getString());\n      var len = text.length;\n\n      for (var i = 0; i < len; i++) {\n        var glyph = this.getGlyph(customFont, text, i);\n        ctx.translate(this.x, this.y);\n        ctx.scale(scale, -scale);\n        var lw = ctx.lineWidth;\n        ctx.lineWidth = ctx.lineWidth * unitsPerEm / fontSize;\n\n        if (fontStyle === 'italic') {\n          ctx.transform(1, 0, .4, 1, 0, 0);\n        }\n\n        glyph.render(ctx);\n\n        if (fontStyle === 'italic') {\n          ctx.transform(1, 0, -.4, 1, 0, 0);\n        }\n\n        ctx.lineWidth = lw;\n        ctx.scale(1 / scale, -1 / scale);\n        ctx.translate(-this.x, -this.y);\n        this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / unitsPerEm;\n\n        if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n          this.x += dx[i];\n        }\n      }\n\n      return;\n    }\n\n    var {\n      x,\n      y\n    } = this; // NEED TEST\n    // if (ctx.paintOrder === 'stroke') {\n    // \tif (ctx.strokeStyle) {\n    // \t\tctx.strokeText(renderText, x, y);\n    // \t}\n    // \tif (ctx.fillStyle) {\n    // \t\tctx.fillText(renderText, x, y);\n    // \t}\n    // } else {\n\n    if (ctx.fillStyle) {\n      ctx.fillText(renderText, x, y);\n    }\n\n    if (ctx.strokeStyle) {\n      ctx.strokeText(renderText, x, y);\n    } // }\n\n  }\n\n  applyAnchoring() {\n    if (this.textChunkStart >= this.leafTexts.length) {\n      return;\n    } // This is basically the \"Apply anchoring\" part of https://www.w3.org/TR/SVG2/text.html#TextLayoutAlgorithm.\n    // The difference is that we apply the anchoring as soon as a chunk is finished. This saves some extra looping.\n    // Vertical text is not supported.\n\n\n    var firstElement = this.leafTexts[this.textChunkStart];\n    var textAnchor = firstElement.getStyle('text-anchor').getString('start');\n    var isRTL = false; // we treat RTL like LTR\n\n    var shift = 0;\n\n    if (textAnchor === 'start' && !isRTL || textAnchor === 'end' && isRTL) {\n      shift = firstElement.x - this.minX;\n    } else if (textAnchor === 'end' && !isRTL || textAnchor === 'start' && isRTL) {\n      shift = firstElement.x - this.maxX;\n    } else {\n      shift = firstElement.x - (this.minX + this.maxX) / 2;\n    }\n\n    for (var i = this.textChunkStart; i < this.leafTexts.length; i++) {\n      this.leafTexts[i].x += shift;\n    } // start new chunk\n\n\n    this.minX = Number.POSITIVE_INFINITY;\n    this.maxX = Number.NEGATIVE_INFINITY;\n    this.textChunkStart = this.leafTexts.length;\n  }\n\n  adjustChildCoordinatesRecursive(ctx) {\n    this.children.forEach((_, i) => {\n      this.adjustChildCoordinatesRecursiveCore(ctx, this, this, i);\n    });\n    this.applyAnchoring();\n  }\n\n  adjustChildCoordinatesRecursiveCore(ctx, textParent, parent, i) {\n    var child = parent.children[i];\n\n    if (child.children.length > 0) {\n      child.children.forEach((_, i) => {\n        textParent.adjustChildCoordinatesRecursiveCore(ctx, textParent, child, i);\n      });\n    } else {\n      // only leafs are relevant\n      this.adjustChildCoordinates(ctx, textParent, parent, i);\n    }\n  }\n\n  adjustChildCoordinates(ctx, textParent, parent, i) {\n    var child = parent.children[i];\n\n    if (typeof child.measureText !== 'function') {\n      return child;\n    }\n\n    ctx.save();\n    child.setContext(ctx, true);\n    var xAttr = child.getAttribute('x');\n    var yAttr = child.getAttribute('y');\n    var dxAttr = child.getAttribute('dx');\n    var dyAttr = child.getAttribute('dy');\n    var customFont = child.getStyle('font-family').getDefinition();\n    var isRTL = Boolean(customFont) && customFont.isRTL;\n\n    if (i === 0) {\n      // First children inherit attributes from parent(s). Positional attributes\n      // are only inherited from a parent to it's first child.\n      if (!xAttr.hasValue()) {\n        xAttr.setValue(child.getInheritedAttribute('x'));\n      }\n\n      if (!yAttr.hasValue()) {\n        yAttr.setValue(child.getInheritedAttribute('y'));\n      }\n\n      if (!dxAttr.hasValue()) {\n        dxAttr.setValue(child.getInheritedAttribute('dx'));\n      }\n\n      if (!dyAttr.hasValue()) {\n        dyAttr.setValue(child.getInheritedAttribute('dy'));\n      }\n    }\n\n    var width = child.measureText(ctx);\n\n    if (isRTL) {\n      textParent.x -= width;\n    }\n\n    if (xAttr.hasValue()) {\n      // an \"x\" attribute marks the start of a new chunk\n      textParent.applyAnchoring();\n      child.x = xAttr.getPixels('x');\n\n      if (dxAttr.hasValue()) {\n        child.x += dxAttr.getPixels('x');\n      }\n    } else {\n      if (dxAttr.hasValue()) {\n        textParent.x += dxAttr.getPixels('x');\n      }\n\n      child.x = textParent.x;\n    }\n\n    textParent.x = child.x;\n\n    if (!isRTL) {\n      textParent.x += width;\n    }\n\n    if (yAttr.hasValue()) {\n      child.y = yAttr.getPixels('y');\n\n      if (dyAttr.hasValue()) {\n        child.y += dyAttr.getPixels('y');\n      }\n    } else {\n      if (dyAttr.hasValue()) {\n        textParent.y += dyAttr.getPixels('y');\n      }\n\n      child.y = textParent.y;\n    }\n\n    textParent.y = child.y; // update the current chunk and it's bounds\n\n    textParent.leafTexts.push(child);\n    textParent.minX = Math.min(textParent.minX, child.x, child.x + width);\n    textParent.maxX = Math.max(textParent.maxX, child.x, child.x + width);\n    child.clearContext(ctx);\n    ctx.restore();\n    return child;\n  }\n\n  getChildBoundingBox(ctx, textParent, parent, i) {\n    var child = parent.children[i]; // not a text node?\n\n    if (typeof child.getBoundingBox !== 'function') {\n      return null;\n    }\n\n    var boundingBox = child.getBoundingBox(ctx);\n\n    if (!boundingBox) {\n      return null;\n    }\n\n    child.children.forEach((_, i) => {\n      var childBoundingBox = textParent.getChildBoundingBox(ctx, textParent, child, i);\n      boundingBox.addBoundingBox(childBoundingBox);\n    });\n    return boundingBox;\n  }\n\n  renderChild(ctx, textParent, parent, i) {\n    var child = parent.children[i];\n    child.render(ctx);\n    child.children.forEach((_, i) => {\n      textParent.renderChild(ctx, textParent, child, i);\n    });\n  }\n\n  measureText(ctx) {\n    var {\n      measureCache\n    } = this;\n\n    if (~measureCache) {\n      return measureCache;\n    }\n\n    var renderText = this.getText();\n    var measure = this.measureTargetText(ctx, renderText);\n    this.measureCache = measure;\n    return measure;\n  }\n\n  measureTargetText(ctx, targetText) {\n    if (!targetText.length) {\n      return 0;\n    }\n\n    var {\n      parent\n    } = this;\n    var customFont = parent.getStyle('font-family').getDefinition();\n\n    if (customFont) {\n      var fontSize = this.getFontSize();\n      var text = customFont.isRTL ? targetText.split('').reverse().join('') : targetText;\n      var dx = toNumbers(parent.getAttribute('dx').getString());\n      var len = text.length;\n      var _measure = 0;\n\n      for (var i = 0; i < len; i++) {\n        var glyph = this.getGlyph(customFont, text, i);\n        _measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;\n\n        if (typeof dx[i] !== 'undefined' && !isNaN(dx[i])) {\n          _measure += dx[i];\n        }\n      }\n\n      return _measure;\n    }\n\n    if (!ctx.measureText) {\n      return targetText.length * 10;\n    }\n\n    ctx.save();\n    this.setContext(ctx, true);\n    var {\n      width: measure\n    } = ctx.measureText(targetText);\n    this.clearContext(ctx);\n    ctx.restore();\n    return measure;\n  }\n  /**\r\n   * Inherits positional attributes from {@link TextElement} parent(s). Attributes\r\n   * are only inherited from a parent to its first child.\r\n   * @param name - The attribute name.\r\n   * @returns The attribute value or null.\r\n   */\n\n\n  getInheritedAttribute(name) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this\n    var current = this;\n\n    while (current instanceof TextElement && current.isFirstChild()) {\n      var parentAttr = current.parent.getAttribute(name);\n\n      if (parentAttr.hasValue(true)) {\n        return parentAttr.getValue('0');\n      }\n\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n}\n\nclass TSpanElement extends TextElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, new.target === TSpanElement ? true : captureTextNodes);\n    this.type = 'tspan'; // if this node has children, then they own the text\n\n    this.text = this.children.length > 0 ? '' : this.getTextFromNode();\n  }\n\n  getText() {\n    return this.text;\n  }\n\n}\n\nclass TextNode extends TSpanElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'textNode';\n  }\n\n}\n\nclass SVGElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'svg';\n    this.root = false;\n  }\n\n  setContext(ctx) {\n    var _this$node$parentNode;\n\n    var {\n      document\n    } = this;\n    var {\n      screen,\n      window\n    } = document;\n    var canvas = ctx.canvas;\n    screen.setDefaults(ctx);\n\n    if (canvas.style && typeof ctx.font !== 'undefined' && window && typeof window.getComputedStyle !== 'undefined') {\n      ctx.font = window.getComputedStyle(canvas).getPropertyValue('font');\n      var fontSizeProp = new Property(document, 'fontSize', Font.parse(ctx.font).fontSize);\n\n      if (fontSizeProp.hasValue()) {\n        document.rootEmSize = fontSizeProp.getPixels('y');\n        document.emSize = document.rootEmSize;\n      }\n    } // create new view port\n\n\n    if (!this.getAttribute('x').hasValue()) {\n      this.getAttribute('x', true).setValue(0);\n    }\n\n    if (!this.getAttribute('y').hasValue()) {\n      this.getAttribute('y', true).setValue(0);\n    }\n\n    var {\n      width,\n      height\n    } = screen.viewPort;\n\n    if (!this.getStyle('width').hasValue()) {\n      this.getStyle('width', true).setValue('100%');\n    }\n\n    if (!this.getStyle('height').hasValue()) {\n      this.getStyle('height', true).setValue('100%');\n    }\n\n    if (!this.getStyle('color').hasValue()) {\n      this.getStyle('color', true).setValue('black');\n    }\n\n    var refXAttr = this.getAttribute('refX');\n    var refYAttr = this.getAttribute('refY');\n    var viewBoxAttr = this.getAttribute('viewBox');\n    var viewBox = viewBoxAttr.hasValue() ? toNumbers(viewBoxAttr.getString()) : null;\n    var clip = !this.root && this.getStyle('overflow').getValue('hidden') !== 'visible';\n    var minX = 0;\n    var minY = 0;\n    var clipX = 0;\n    var clipY = 0;\n\n    if (viewBox) {\n      minX = viewBox[0];\n      minY = viewBox[1];\n    }\n\n    if (!this.root) {\n      width = this.getStyle('width').getPixels('x');\n      height = this.getStyle('height').getPixels('y');\n\n      if (this.type === 'marker') {\n        clipX = minX;\n        clipY = minY;\n        minX = 0;\n        minY = 0;\n      }\n    }\n\n    screen.viewPort.setCurrent(width, height); // Default value of transform-origin is center only for root SVG elements\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform-origin\n\n    if (this.node // is not temporary SVGElement\n    && (!this.parent || ((_this$node$parentNode = this.node.parentNode) === null || _this$node$parentNode === void 0 ? void 0 : _this$node$parentNode.nodeName) === 'foreignObject') && this.getStyle('transform', false, true).hasValue() && !this.getStyle('transform-origin', false, true).hasValue()) {\n      this.getStyle('transform-origin', true, true).setValue('50% 50%');\n    }\n\n    super.setContext(ctx);\n    ctx.translate(this.getAttribute('x').getPixels('x'), this.getAttribute('y').getPixels('y'));\n\n    if (viewBox) {\n      width = viewBox[2];\n      height = viewBox[3];\n    }\n\n    document.setViewBox({\n      ctx,\n      aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n      width: screen.viewPort.width,\n      desiredWidth: width,\n      height: screen.viewPort.height,\n      desiredHeight: height,\n      minX,\n      minY,\n      refX: refXAttr.getValue(),\n      refY: refYAttr.getValue(),\n      clip,\n      clipX,\n      clipY\n    });\n\n    if (viewBox) {\n      screen.viewPort.removeCurrent();\n      screen.viewPort.setCurrent(width, height);\n    }\n  }\n\n  clearContext(ctx) {\n    super.clearContext(ctx);\n    this.document.screen.viewPort.removeCurrent();\n  }\n  /**\r\n   * Resize SVG to fit in given size.\r\n   * @param width\r\n   * @param height\r\n   * @param preserveAspectRatio\r\n   */\n\n\n  resize(width) {\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n    var preserveAspectRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var widthAttr = this.getAttribute('width', true);\n    var heightAttr = this.getAttribute('height', true);\n    var viewBoxAttr = this.getAttribute('viewBox');\n    var styleAttr = this.getAttribute('style');\n    var originWidth = widthAttr.getNumber(0);\n    var originHeight = heightAttr.getNumber(0);\n\n    if (preserveAspectRatio) {\n      if (typeof preserveAspectRatio === 'string') {\n        this.getAttribute('preserveAspectRatio', true).setValue(preserveAspectRatio);\n      } else {\n        var preserveAspectRatioAttr = this.getAttribute('preserveAspectRatio');\n\n        if (preserveAspectRatioAttr.hasValue()) {\n          preserveAspectRatioAttr.setValue(preserveAspectRatioAttr.getString().replace(/^\\s*(\\S.*\\S)\\s*$/, '$1'));\n        }\n      }\n    }\n\n    widthAttr.setValue(width);\n    heightAttr.setValue(height);\n\n    if (!viewBoxAttr.hasValue()) {\n      viewBoxAttr.setValue(\"0 0 \".concat(originWidth || width, \" \").concat(originHeight || height));\n    }\n\n    if (styleAttr.hasValue()) {\n      var widthStyle = this.getStyle('width');\n      var heightStyle = this.getStyle('height');\n\n      if (widthStyle.hasValue()) {\n        widthStyle.setValue(\"\".concat(width, \"px\"));\n      }\n\n      if (heightStyle.hasValue()) {\n        heightStyle.setValue(\"\".concat(height, \"px\"));\n      }\n    }\n  }\n\n}\n\nclass RectElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'rect';\n  }\n\n  path(ctx) {\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width', false, true).getPixels('x');\n    var height = this.getStyle('height', false, true).getPixels('y');\n    var rxAttr = this.getAttribute('rx');\n    var ryAttr = this.getAttribute('ry');\n    var rx = rxAttr.getPixels('x');\n    var ry = ryAttr.getPixels('y');\n\n    if (rxAttr.hasValue() && !ryAttr.hasValue()) {\n      ry = rx;\n    }\n\n    if (ryAttr.hasValue() && !rxAttr.hasValue()) {\n      rx = ry;\n    }\n\n    rx = Math.min(rx, width / 2.0);\n    ry = Math.min(ry, height / 2.0);\n\n    if (ctx) {\n      var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n      ctx.beginPath(); // always start the path so we don't fill prior paths\n\n      if (height > 0 && width > 0) {\n        ctx.moveTo(x + rx, y);\n        ctx.lineTo(x + width - rx, y);\n        ctx.bezierCurveTo(x + width - rx + KAPPA * rx, y, x + width, y + ry - KAPPA * ry, x + width, y + ry);\n        ctx.lineTo(x + width, y + height - ry);\n        ctx.bezierCurveTo(x + width, y + height - ry + KAPPA * ry, x + width - rx + KAPPA * rx, y + height, x + width - rx, y + height);\n        ctx.lineTo(x + rx, y + height);\n        ctx.bezierCurveTo(x + rx - KAPPA * rx, y + height, x, y + height - ry + KAPPA * ry, x, y + height - ry);\n        ctx.lineTo(x, y + ry);\n        ctx.bezierCurveTo(x, y + ry - KAPPA * ry, x + rx - KAPPA * rx, y, x + rx, y);\n        ctx.closePath();\n      }\n    }\n\n    return new BoundingBox(x, y, x + width, y + height);\n  }\n\n  getMarkers() {\n    return null;\n  }\n\n}\n\nclass CircleElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'circle';\n  }\n\n  path(ctx) {\n    var cx = this.getAttribute('cx').getPixels('x');\n    var cy = this.getAttribute('cy').getPixels('y');\n    var r = this.getAttribute('r').getPixels();\n\n    if (ctx && r > 0) {\n      ctx.beginPath();\n      ctx.arc(cx, cy, r, 0, Math.PI * 2, false);\n      ctx.closePath();\n    }\n\n    return new BoundingBox(cx - r, cy - r, cx + r, cy + r);\n  }\n\n  getMarkers() {\n    return null;\n  }\n\n}\n\nclass EllipseElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'ellipse';\n  }\n\n  path(ctx) {\n    var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n    var rx = this.getAttribute('rx').getPixels('x');\n    var ry = this.getAttribute('ry').getPixels('y');\n    var cx = this.getAttribute('cx').getPixels('x');\n    var cy = this.getAttribute('cy').getPixels('y');\n\n    if (ctx && rx > 0 && ry > 0) {\n      ctx.beginPath();\n      ctx.moveTo(cx + rx, cy);\n      ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);\n      ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);\n      ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);\n      ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);\n      ctx.closePath();\n    }\n\n    return new BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);\n  }\n\n  getMarkers() {\n    return null;\n  }\n\n}\n\nclass LineElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'line';\n  }\n\n  getPoints() {\n    return [new Point(this.getAttribute('x1').getPixels('x'), this.getAttribute('y1').getPixels('y')), new Point(this.getAttribute('x2').getPixels('x'), this.getAttribute('y2').getPixels('y'))];\n  }\n\n  path(ctx) {\n    var [{\n      x: x0,\n      y: y0\n    }, {\n      x: x1,\n      y: y1\n    }] = this.getPoints();\n\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n    }\n\n    return new BoundingBox(x0, y0, x1, y1);\n  }\n\n  getMarkers() {\n    var [p0, p1] = this.getPoints();\n    var a = p0.angleTo(p1);\n    return [[p0, a], [p1, a]];\n  }\n\n}\n\nclass PolylineElement extends PathElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'polyline';\n    this.points = [];\n    this.points = Point.parsePath(this.getAttribute('points').getString());\n  }\n\n  path(ctx) {\n    var {\n      points\n    } = this;\n    var [{\n      x: x0,\n      y: y0\n    }] = points;\n    var boundingBox = new BoundingBox(x0, y0);\n\n    if (ctx) {\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n    }\n\n    points.forEach(_ref => {\n      var {\n        x,\n        y\n      } = _ref;\n      boundingBox.addPoint(x, y);\n\n      if (ctx) {\n        ctx.lineTo(x, y);\n      }\n    });\n    return boundingBox;\n  }\n\n  getMarkers() {\n    var {\n      points\n    } = this;\n    var lastIndex = points.length - 1;\n    var markers = [];\n    points.forEach((point, i) => {\n      if (i === lastIndex) {\n        return;\n      }\n\n      markers.push([point, point.angleTo(points[i + 1])]);\n    });\n\n    if (markers.length > 0) {\n      markers.push([points[points.length - 1], markers[markers.length - 1][1]]);\n    }\n\n    return markers;\n  }\n\n}\n\nclass PolygonElement extends PolylineElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'polygon';\n  }\n\n  path(ctx) {\n    var boundingBox = super.path(ctx);\n    var [{\n      x,\n      y\n    }] = this.points;\n\n    if (ctx) {\n      ctx.lineTo(x, y);\n      ctx.closePath();\n    }\n\n    return boundingBox;\n  }\n\n}\n\nclass PatternElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'pattern';\n  }\n\n  createPattern(ctx, _, parentOpacityProp) {\n    var width = this.getStyle('width').getPixels('x', true);\n    var height = this.getStyle('height').getPixels('y', true); // render me using a temporary svg element\n\n    var patternSvg = new SVGElement(this.document, null);\n    patternSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n    patternSvg.attributes.width = new Property(this.document, 'width', \"\".concat(width, \"px\"));\n    patternSvg.attributes.height = new Property(this.document, 'height', \"\".concat(height, \"px\"));\n    patternSvg.attributes.transform = new Property(this.document, 'transform', this.getAttribute('patternTransform').getValue());\n    patternSvg.children = this.children;\n    var patternCanvas = this.document.createCanvas(width, height);\n    var patternCtx = patternCanvas.getContext('2d');\n    var xAttr = this.getAttribute('x');\n    var yAttr = this.getAttribute('y');\n\n    if (xAttr.hasValue() && yAttr.hasValue()) {\n      patternCtx.translate(xAttr.getPixels('x', true), yAttr.getPixels('y', true));\n    }\n\n    if (parentOpacityProp.hasValue()) {\n      this.styles['fill-opacity'] = parentOpacityProp;\n    } else {\n      Reflect.deleteProperty(this.styles, 'fill-opacity');\n    } // render 3x3 grid so when we transform there's no white space on edges\n\n\n    for (var x = -1; x <= 1; x++) {\n      for (var y = -1; y <= 1; y++) {\n        patternCtx.save();\n        patternSvg.attributes.x = new Property(this.document, 'x', x * patternCanvas.width);\n        patternSvg.attributes.y = new Property(this.document, 'y', y * patternCanvas.height);\n        patternSvg.render(patternCtx);\n        patternCtx.restore();\n      }\n    }\n\n    var pattern = ctx.createPattern(patternCanvas, 'repeat');\n    return pattern;\n  }\n\n}\n\nclass MarkerElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'marker';\n  }\n\n  render(ctx, point, angle) {\n    if (!point) {\n      return;\n    }\n\n    var {\n      x,\n      y\n    } = point;\n    var orient = this.getAttribute('orient').getString('auto');\n    var markerUnits = this.getAttribute('markerUnits').getString('strokeWidth');\n    ctx.translate(x, y);\n\n    if (orient === 'auto') {\n      ctx.rotate(angle);\n    }\n\n    if (markerUnits === 'strokeWidth') {\n      ctx.scale(ctx.lineWidth, ctx.lineWidth);\n    }\n\n    ctx.save(); // render me using a temporary svg element\n\n    var markerSvg = new SVGElement(this.document, null);\n    markerSvg.type = this.type;\n    markerSvg.attributes.viewBox = new Property(this.document, 'viewBox', this.getAttribute('viewBox').getValue());\n    markerSvg.attributes.refX = new Property(this.document, 'refX', this.getAttribute('refX').getValue());\n    markerSvg.attributes.refY = new Property(this.document, 'refY', this.getAttribute('refY').getValue());\n    markerSvg.attributes.width = new Property(this.document, 'width', this.getAttribute('markerWidth').getValue());\n    markerSvg.attributes.height = new Property(this.document, 'height', this.getAttribute('markerHeight').getValue());\n    markerSvg.attributes.overflow = new Property(this.document, 'overflow', this.getAttribute('overflow').getValue());\n    markerSvg.attributes.fill = new Property(this.document, 'fill', this.getAttribute('fill').getColor('black'));\n    markerSvg.attributes.stroke = new Property(this.document, 'stroke', this.getAttribute('stroke').getValue('none'));\n    markerSvg.children = this.children;\n    markerSvg.render(ctx);\n    ctx.restore();\n\n    if (markerUnits === 'strokeWidth') {\n      ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);\n    }\n\n    if (orient === 'auto') {\n      ctx.rotate(-angle);\n    }\n\n    ctx.translate(-x, -y);\n  }\n\n}\n\nclass DefsElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'defs';\n  }\n\n  render() {// NOOP\n  }\n\n}\n\nclass GElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'g';\n  }\n\n  getBoundingBox(ctx) {\n    var boundingBox = new BoundingBox();\n    this.children.forEach(child => {\n      boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n    });\n    return boundingBox;\n  }\n\n}\n\nclass GradientElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.attributesToInherit = ['gradientUnits'];\n    this.stops = [];\n    var {\n      stops,\n      children\n    } = this;\n    children.forEach(child => {\n      if (child.type === 'stop') {\n        stops.push(child);\n      }\n    });\n  }\n\n  getGradientUnits() {\n    return this.getAttribute('gradientUnits').getString('objectBoundingBox');\n  }\n\n  createGradient(ctx, element, parentOpacityProp) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    var stopsContainer = this;\n\n    if (this.getHrefAttribute().hasValue()) {\n      stopsContainer = this.getHrefAttribute().getDefinition();\n      this.inheritStopContainer(stopsContainer);\n    }\n\n    var {\n      stops\n    } = stopsContainer;\n    var gradient = this.getGradient(ctx, element);\n\n    if (!gradient) {\n      return this.addParentOpacity(parentOpacityProp, stops[stops.length - 1].color);\n    }\n\n    stops.forEach(stop => {\n      gradient.addColorStop(stop.offset, this.addParentOpacity(parentOpacityProp, stop.color));\n    });\n\n    if (this.getAttribute('gradientTransform').hasValue()) {\n      // render as transformed pattern on temporary canvas\n      var {\n        document\n      } = this;\n      var {\n        MAX_VIRTUAL_PIXELS,\n        viewPort\n      } = document.screen;\n      var [rootView] = viewPort.viewPorts;\n      var rect = new RectElement(document, null);\n      rect.attributes.x = new Property(document, 'x', -MAX_VIRTUAL_PIXELS / 3.0);\n      rect.attributes.y = new Property(document, 'y', -MAX_VIRTUAL_PIXELS / 3.0);\n      rect.attributes.width = new Property(document, 'width', MAX_VIRTUAL_PIXELS);\n      rect.attributes.height = new Property(document, 'height', MAX_VIRTUAL_PIXELS);\n      var group = new GElement(document, null);\n      group.attributes.transform = new Property(document, 'transform', this.getAttribute('gradientTransform').getValue());\n      group.children = [rect];\n      var patternSvg = new SVGElement(document, null);\n      patternSvg.attributes.x = new Property(document, 'x', 0);\n      patternSvg.attributes.y = new Property(document, 'y', 0);\n      patternSvg.attributes.width = new Property(document, 'width', rootView.width);\n      patternSvg.attributes.height = new Property(document, 'height', rootView.height);\n      patternSvg.children = [group];\n      var patternCanvas = document.createCanvas(rootView.width, rootView.height);\n      var patternCtx = patternCanvas.getContext('2d');\n      patternCtx.fillStyle = gradient;\n      patternSvg.render(patternCtx);\n      return patternCtx.createPattern(patternCanvas, 'no-repeat');\n    }\n\n    return gradient;\n  }\n\n  inheritStopContainer(stopsContainer) {\n    this.attributesToInherit.forEach(attributeToInherit => {\n      if (!this.getAttribute(attributeToInherit).hasValue() && stopsContainer.getAttribute(attributeToInherit).hasValue()) {\n        this.getAttribute(attributeToInherit, true).setValue(stopsContainer.getAttribute(attributeToInherit).getValue());\n      }\n    });\n  }\n\n  addParentOpacity(parentOpacityProp, color) {\n    if (parentOpacityProp.hasValue()) {\n      var colorProp = new Property(this.document, 'color', color);\n      return colorProp.addOpacity(parentOpacityProp).getColor();\n    }\n\n    return color;\n  }\n\n}\n\nclass LinearGradientElement extends GradientElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'linearGradient';\n    this.attributesToInherit.push('x1', 'y1', 'x2', 'y2');\n  }\n\n  getGradient(ctx, element) {\n    var isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n    var boundingBox = isBoundingBoxUnits ? element.getBoundingBox(ctx) : null;\n\n    if (isBoundingBoxUnits && !boundingBox) {\n      return null;\n    }\n\n    if (!this.getAttribute('x1').hasValue() && !this.getAttribute('y1').hasValue() && !this.getAttribute('x2').hasValue() && !this.getAttribute('y2').hasValue()) {\n      this.getAttribute('x1', true).setValue(0);\n      this.getAttribute('y1', true).setValue(0);\n      this.getAttribute('x2', true).setValue(1);\n      this.getAttribute('y2', true).setValue(0);\n    }\n\n    var x1 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x1').getNumber() : this.getAttribute('x1').getPixels('x');\n    var y1 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y1').getNumber() : this.getAttribute('y1').getPixels('y');\n    var x2 = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('x2').getNumber() : this.getAttribute('x2').getPixels('x');\n    var y2 = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('y2').getNumber() : this.getAttribute('y2').getPixels('y');\n\n    if (x1 === x2 && y1 === y2) {\n      return null;\n    }\n\n    return ctx.createLinearGradient(x1, y1, x2, y2);\n  }\n\n}\n\nclass RadialGradientElement extends GradientElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'radialGradient';\n    this.attributesToInherit.push('cx', 'cy', 'r', 'fx', 'fy', 'fr');\n  }\n\n  getGradient(ctx, element) {\n    var isBoundingBoxUnits = this.getGradientUnits() === 'objectBoundingBox';\n    var boundingBox = element.getBoundingBox(ctx);\n\n    if (isBoundingBoxUnits && !boundingBox) {\n      return null;\n    }\n\n    if (!this.getAttribute('cx').hasValue()) {\n      this.getAttribute('cx', true).setValue('50%');\n    }\n\n    if (!this.getAttribute('cy').hasValue()) {\n      this.getAttribute('cy', true).setValue('50%');\n    }\n\n    if (!this.getAttribute('r').hasValue()) {\n      this.getAttribute('r', true).setValue('50%');\n    }\n\n    var cx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('cx').getNumber() : this.getAttribute('cx').getPixels('x');\n    var cy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('cy').getNumber() : this.getAttribute('cy').getPixels('y');\n    var fx = cx;\n    var fy = cy;\n\n    if (this.getAttribute('fx').hasValue()) {\n      fx = isBoundingBoxUnits ? boundingBox.x + boundingBox.width * this.getAttribute('fx').getNumber() : this.getAttribute('fx').getPixels('x');\n    }\n\n    if (this.getAttribute('fy').hasValue()) {\n      fy = isBoundingBoxUnits ? boundingBox.y + boundingBox.height * this.getAttribute('fy').getNumber() : this.getAttribute('fy').getPixels('y');\n    }\n\n    var r = isBoundingBoxUnits ? (boundingBox.width + boundingBox.height) / 2.0 * this.getAttribute('r').getNumber() : this.getAttribute('r').getPixels();\n    var fr = this.getAttribute('fr').getPixels();\n    return ctx.createRadialGradient(fx, fy, fr, cx, cy, r);\n  }\n\n}\n\nclass StopElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'stop';\n    var offset = Math.max(0, Math.min(1, this.getAttribute('offset').getNumber()));\n    var stopOpacity = this.getStyle('stop-opacity');\n    var stopColor = this.getStyle('stop-color', true);\n\n    if (stopColor.getString() === '') {\n      stopColor.setValue('#000');\n    }\n\n    if (stopOpacity.hasValue()) {\n      stopColor = stopColor.addOpacity(stopOpacity);\n    }\n\n    this.offset = offset;\n    this.color = stopColor.getColor();\n  }\n\n}\n\nclass AnimateElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'animate';\n    this.duration = 0;\n    this.initialValue = null;\n    this.initialUnits = '';\n    this.removed = false;\n    this.frozen = false;\n    document.screen.animations.push(this);\n    this.begin = this.getAttribute('begin').getMilliseconds();\n    this.maxDuration = this.begin + this.getAttribute('dur').getMilliseconds();\n    this.from = this.getAttribute('from');\n    this.to = this.getAttribute('to');\n    this.values = new Property(document, 'values', null);\n    var valuesAttr = this.getAttribute('values');\n\n    if (valuesAttr.hasValue()) {\n      this.values.setValue(valuesAttr.getString().split(';'));\n    }\n  }\n\n  getProperty() {\n    var attributeType = this.getAttribute('attributeType').getString();\n    var attributeName = this.getAttribute('attributeName').getString();\n\n    if (attributeType === 'CSS') {\n      return this.parent.getStyle(attributeName, true);\n    }\n\n    return this.parent.getAttribute(attributeName, true);\n  }\n\n  calcValue() {\n    var {\n      initialUnits\n    } = this;\n    var {\n      progress,\n      from,\n      to\n    } = this.getProgress(); // tween value linearly\n\n    var newValue = from.getNumber() + (to.getNumber() - from.getNumber()) * progress;\n\n    if (initialUnits === '%') {\n      newValue *= 100.0; // numValue() returns 0-1 whereas properties are 0-100\n    }\n\n    return \"\".concat(newValue).concat(initialUnits);\n  }\n\n  update(delta) {\n    var {\n      parent\n    } = this;\n    var prop = this.getProperty(); // set initial value\n\n    if (!this.initialValue) {\n      this.initialValue = prop.getString();\n      this.initialUnits = prop.getUnits();\n    } // if we're past the end time\n\n\n    if (this.duration > this.maxDuration) {\n      var fill = this.getAttribute('fill').getString('remove'); // loop for indefinitely repeating animations\n\n      if (this.getAttribute('repeatCount').getString() === 'indefinite' || this.getAttribute('repeatDur').getString() === 'indefinite') {\n        this.duration = 0;\n      } else if (fill === 'freeze' && !this.frozen) {\n        this.frozen = true;\n        parent.animationFrozen = true;\n        parent.animationFrozenValue = prop.getString();\n      } else if (fill === 'remove' && !this.removed) {\n        this.removed = true;\n        prop.setValue(parent.animationFrozen ? parent.animationFrozenValue : this.initialValue);\n        return true;\n      }\n\n      return false;\n    }\n\n    this.duration += delta; // if we're past the begin time\n\n    var updated = false;\n\n    if (this.begin < this.duration) {\n      var newValue = this.calcValue(); // tween\n\n      var typeAttr = this.getAttribute('type');\n\n      if (typeAttr.hasValue()) {\n        // for transform, etc.\n        var type = typeAttr.getString();\n        newValue = \"\".concat(type, \"(\").concat(newValue, \")\");\n      }\n\n      prop.setValue(newValue);\n      updated = true;\n    }\n\n    return updated;\n  }\n\n  getProgress() {\n    var {\n      document,\n      values\n    } = this;\n    var result = {\n      progress: (this.duration - this.begin) / (this.maxDuration - this.begin)\n    };\n\n    if (values.hasValue()) {\n      var p = result.progress * (values.getValue().length - 1);\n      var lb = Math.floor(p);\n      var ub = Math.ceil(p);\n      result.from = new Property(document, 'from', parseFloat(values.getValue()[lb]));\n      result.to = new Property(document, 'to', parseFloat(values.getValue()[ub]));\n      result.progress = (p - lb) / (ub - lb);\n    } else {\n      result.from = this.from;\n      result.to = this.to;\n    }\n\n    return result;\n  }\n\n}\n\nclass AnimateColorElement extends AnimateElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'animateColor';\n  }\n\n  calcValue() {\n    var {\n      progress,\n      from,\n      to\n    } = this.getProgress();\n    var colorFrom = new rgbcolor__WEBPACK_IMPORTED_MODULE_11__(from.getColor());\n    var colorTo = new rgbcolor__WEBPACK_IMPORTED_MODULE_11__(to.getColor());\n\n    if (colorFrom.ok && colorTo.ok) {\n      // tween color linearly\n      var r = colorFrom.r + (colorTo.r - colorFrom.r) * progress;\n      var g = colorFrom.g + (colorTo.g - colorFrom.g) * progress;\n      var b = colorFrom.b + (colorTo.b - colorFrom.b) * progress; // ? alpha\n\n      return \"rgb(\".concat(Math.floor(r), \", \").concat(Math.floor(g), \", \").concat(Math.floor(b), \")\");\n    }\n\n    return this.getAttribute('from').getColor();\n  }\n\n}\n\nclass AnimateTransformElement extends AnimateElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'animateTransform';\n  }\n\n  calcValue() {\n    var {\n      progress,\n      from,\n      to\n    } = this.getProgress(); // tween value linearly\n\n    var transformFrom = toNumbers(from.getString());\n    var transformTo = toNumbers(to.getString());\n    var newValue = transformFrom.map((from, i) => {\n      var to = transformTo[i];\n      return from + (to - from) * progress;\n    }).join(' ');\n    return newValue;\n  }\n\n}\n\nclass FontElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'font';\n    this.glyphs = {};\n    this.horizAdvX = this.getAttribute('horiz-adv-x').getNumber();\n    var {\n      definitions\n    } = document;\n    var {\n      children\n    } = this;\n\n    for (var child of children) {\n      switch (child.type) {\n        case 'font-face':\n          {\n            this.fontFace = child;\n            var fontFamilyStyle = child.getStyle('font-family');\n\n            if (fontFamilyStyle.hasValue()) {\n              definitions[fontFamilyStyle.getString()] = this;\n            }\n\n            break;\n          }\n\n        case 'missing-glyph':\n          this.missingGlyph = child;\n          break;\n\n        case 'glyph':\n          {\n            var glyph = child;\n\n            if (glyph.arabicForm) {\n              this.isRTL = true;\n              this.isArabic = true;\n\n              if (typeof this.glyphs[glyph.unicode] === 'undefined') {\n                this.glyphs[glyph.unicode] = {};\n              }\n\n              this.glyphs[glyph.unicode][glyph.arabicForm] = glyph;\n            } else {\n              this.glyphs[glyph.unicode] = glyph;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n\n  render() {// NO RENDER\n  }\n\n}\n\nclass FontFaceElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'font-face';\n    this.ascent = this.getAttribute('ascent').getNumber();\n    this.descent = this.getAttribute('descent').getNumber();\n    this.unitsPerEm = this.getAttribute('units-per-em').getNumber();\n  }\n\n}\n\nclass MissingGlyphElement extends PathElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'missing-glyph';\n    this.horizAdvX = 0;\n  }\n\n}\n\nclass TRefElement extends TextElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'tref';\n  }\n\n  getText() {\n    var element = this.getHrefAttribute().getDefinition();\n\n    if (element) {\n      var firstChild = element.children[0];\n\n      if (firstChild) {\n        return firstChild.getText();\n      }\n    }\n\n    return '';\n  }\n\n}\n\nclass AElement extends TextElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'a';\n    var {\n      childNodes\n    } = node;\n    var firstChild = childNodes[0];\n    var hasText = childNodes.length > 0 && Array.from(childNodes).every(node => node.nodeType === 3);\n    this.hasText = hasText;\n    this.text = hasText ? this.getTextFromNode(firstChild) : '';\n  }\n\n  getText() {\n    return this.text;\n  }\n\n  renderChildren(ctx) {\n    if (this.hasText) {\n      // render as text element\n      super.renderChildren(ctx);\n      var {\n        document,\n        x,\n        y\n      } = this;\n      var {\n        mouse\n      } = document.screen;\n      var fontSize = new Property(document, 'fontSize', Font.parse(document.ctx.font).fontSize); // Do not calc bounding box if mouse is not working.\n\n      if (mouse.isWorking()) {\n        mouse.checkBoundingBox(this, new BoundingBox(x, y - fontSize.getPixels('y'), x + this.measureText(ctx), y));\n      }\n    } else if (this.children.length > 0) {\n      // render as temporary group\n      var g = new GElement(this.document, null);\n      g.children = this.children;\n      g.parent = this;\n      g.render(ctx);\n    }\n  }\n\n  onClick() {\n    var {\n      window\n    } = this.document;\n\n    if (window) {\n      window.open(this.getHrefAttribute().getString());\n    }\n  }\n\n  onMouseMove() {\n    var ctx = this.document.ctx;\n    ctx.canvas.style.cursor = 'pointer';\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_18__/* [\"default\"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nclass TextPathElement extends TextElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'textPath';\n    this.textWidth = 0;\n    this.textHeight = 0;\n    this.pathLength = -1;\n    this.glyphInfo = null;\n    this.letterSpacingCache = [];\n    this.measuresCache = new Map([['', 0]]);\n    var pathElement = this.getHrefAttribute().getDefinition();\n    this.text = this.getTextFromNode();\n    this.dataArray = this.parsePathData(pathElement);\n  }\n\n  getText() {\n    return this.text;\n  }\n\n  path(ctx) {\n    var {\n      dataArray\n    } = this;\n\n    if (ctx) {\n      ctx.beginPath();\n    }\n\n    dataArray.forEach(_ref => {\n      var {\n        type,\n        points\n      } = _ref;\n\n      switch (type) {\n        case PathParser.LINE_TO:\n          if (ctx) {\n            ctx.lineTo(points[0], points[1]);\n          }\n\n          break;\n\n        case PathParser.MOVE_TO:\n          if (ctx) {\n            ctx.moveTo(points[0], points[1]);\n          }\n\n          break;\n\n        case PathParser.CURVE_TO:\n          if (ctx) {\n            ctx.bezierCurveTo(points[0], points[1], points[2], points[3], points[4], points[5]);\n          }\n\n          break;\n\n        case PathParser.QUAD_TO:\n          if (ctx) {\n            ctx.quadraticCurveTo(points[0], points[1], points[2], points[3]);\n          }\n\n          break;\n\n        case PathParser.ARC:\n          {\n            var [cx, cy, rx, ry, theta, dTheta, psi, fs] = points;\n            var r = rx > ry ? rx : ry;\n            var scaleX = rx > ry ? 1 : rx / ry;\n            var scaleY = rx > ry ? ry / rx : 1;\n\n            if (ctx) {\n              ctx.translate(cx, cy);\n              ctx.rotate(psi);\n              ctx.scale(scaleX, scaleY);\n              ctx.arc(0, 0, r, theta, theta + dTheta, Boolean(1 - fs));\n              ctx.scale(1 / scaleX, 1 / scaleY);\n              ctx.rotate(-psi);\n              ctx.translate(-cx, -cy);\n            }\n\n            break;\n          }\n\n        case PathParser.CLOSE_PATH:\n          if (ctx) {\n            ctx.closePath();\n          }\n\n          break;\n      }\n    });\n  }\n\n  renderChildren(ctx) {\n    this.setTextData(ctx);\n    ctx.save();\n    var textDecoration = this.parent.getStyle('text-decoration').getString();\n    var fontSize = this.getFontSize();\n    var {\n      glyphInfo\n    } = this;\n    var fill = ctx.fillStyle;\n\n    if (textDecoration === 'underline') {\n      ctx.beginPath();\n    }\n\n    glyphInfo.forEach((glyph, i) => {\n      var {\n        p0,\n        p1,\n        rotation,\n        text: partialText\n      } = glyph;\n      ctx.save();\n      ctx.translate(p0.x, p0.y);\n      ctx.rotate(rotation);\n\n      if (ctx.fillStyle) {\n        ctx.fillText(partialText, 0, 0);\n      }\n\n      if (ctx.strokeStyle) {\n        ctx.strokeText(partialText, 0, 0);\n      }\n\n      ctx.restore();\n\n      if (textDecoration === 'underline') {\n        if (i === 0) {\n          ctx.moveTo(p0.x, p0.y + fontSize / 8);\n        }\n\n        ctx.lineTo(p1.x, p1.y + fontSize / 5);\n      } // // To assist with debugging visually, uncomment following\n      //\n      // ctx.beginPath();\n      // if (i % 2)\n      // \tctx.strokeStyle = 'red';\n      // else\n      // \tctx.strokeStyle = 'green';\n      // ctx.moveTo(p0.x, p0.y);\n      // ctx.lineTo(p1.x, p1.y);\n      // ctx.stroke();\n      // ctx.closePath();\n\n    });\n\n    if (textDecoration === 'underline') {\n      ctx.lineWidth = fontSize / 20;\n      ctx.strokeStyle = fill;\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n\n  getLetterSpacingAt() {\n    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.letterSpacingCache[idx] || 0;\n  }\n\n  findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, inputOffset, dy, c, charI) {\n    var offset = inputOffset;\n    var glyphWidth = this.measureText(ctx, c);\n\n    if (c === ' ' && anchor === 'justify' && textFullWidth < fullPathWidth) {\n      glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;\n    }\n\n    if (charI > -1) {\n      offset += this.getLetterSpacingAt(charI);\n    }\n\n    var splineStep = this.textHeight / 20;\n    var p0 = this.getEquidistantPointOnPath(offset, splineStep, 0);\n    var p1 = this.getEquidistantPointOnPath(offset + glyphWidth, splineStep, 0);\n    var segment = {\n      p0,\n      p1\n    };\n    var rotation = p0 && p1 ? Math.atan2(p1.y - p0.y, p1.x - p0.x) : 0;\n\n    if (dy) {\n      var dyX = Math.cos(Math.PI / 2 + rotation) * dy;\n      var dyY = Math.cos(-rotation) * dy;\n      segment.p0 = _objectSpread$2(_objectSpread$2({}, p0), {}, {\n        x: p0.x + dyX,\n        y: p0.y + dyY\n      });\n      segment.p1 = _objectSpread$2(_objectSpread$2({}, p1), {}, {\n        x: p1.x + dyX,\n        y: p1.y + dyY\n      });\n    }\n\n    offset += glyphWidth;\n    return {\n      offset,\n      segment,\n      rotation\n    };\n  }\n\n  measureText(ctx, text) {\n    var {\n      measuresCache\n    } = this;\n    var targetText = text || this.getText();\n\n    if (measuresCache.has(targetText)) {\n      return measuresCache.get(targetText);\n    }\n\n    var measure = this.measureTargetText(ctx, targetText);\n    measuresCache.set(targetText, measure);\n    return measure;\n  } // This method supposes what all custom fonts already loaded.\n  // If some font will be loaded after this method call, <textPath> will not be rendered correctly.\n  // You need to call this method manually to update glyphs cache.\n\n\n  setTextData(ctx) {\n    if (this.glyphInfo) {\n      return;\n    }\n\n    var renderText = this.getText();\n    var chars = renderText.split('');\n    var spacesNumber = renderText.split(' ').length - 1;\n    var dx = this.parent.getAttribute('dx').split().map(_ => _.getPixels('x'));\n    var dy = this.parent.getAttribute('dy').getPixels('y');\n    var anchor = this.parent.getStyle('text-anchor').getString('start');\n    var thisSpacing = this.getStyle('letter-spacing');\n    var parentSpacing = this.parent.getStyle('letter-spacing');\n    var letterSpacing = 0;\n\n    if (!thisSpacing.hasValue() || thisSpacing.getValue() === 'inherit') {\n      letterSpacing = parentSpacing.getPixels();\n    } else if (thisSpacing.hasValue()) {\n      if (thisSpacing.getValue() !== 'initial' && thisSpacing.getValue() !== 'unset') {\n        letterSpacing = thisSpacing.getPixels();\n      }\n    } // fill letter-spacing cache\n\n\n    var letterSpacingCache = [];\n    var textLen = renderText.length;\n    this.letterSpacingCache = letterSpacingCache;\n\n    for (var i = 0; i < textLen; i++) {\n      letterSpacingCache.push(typeof dx[i] !== 'undefined' ? dx[i] : letterSpacing);\n    }\n\n    var dxSum = letterSpacingCache.reduce((acc, cur, i) => i === 0 ? 0 : acc + cur || 0, 0);\n    var textWidth = this.measureText(ctx);\n    var textFullWidth = Math.max(textWidth + dxSum, 0);\n    this.textWidth = textWidth;\n    this.textHeight = this.getFontSize();\n    this.glyphInfo = [];\n    var fullPathWidth = this.getPathLength();\n    var startOffset = this.getStyle('startOffset').getNumber(0) * fullPathWidth;\n    var offset = 0;\n\n    if (anchor === 'middle' || anchor === 'center') {\n      offset = -textFullWidth / 2;\n    }\n\n    if (anchor === 'end' || anchor === 'right') {\n      offset = -textFullWidth;\n    }\n\n    offset += startOffset;\n    chars.forEach((char, i) => {\n      // Find such segment what distance between p0 and p1 is approx. width of glyph\n      var {\n        offset: nextOffset,\n        segment,\n        rotation\n      } = this.findSegmentToFitChar(ctx, anchor, textFullWidth, fullPathWidth, spacesNumber, offset, dy, char, i);\n      offset = nextOffset;\n\n      if (!segment.p0 || !segment.p1) {\n        return;\n      } // const width = this.getLineLength(\n      // \tsegment.p0.x,\n      // \tsegment.p0.y,\n      // \tsegment.p1.x,\n      // \tsegment.p1.y\n      // );\n      // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.\n      // Can foresee having a rough pair table built in that the developer can override as needed.\n      // Or use \"dx\" attribute of the <text> node as a naive replacement\n      // const kern = 0;\n      // placeholder for future implementation\n      // const midpoint = this.getPointOnLine(\n      // \tkern + width / 2.0,\n      // \tsegment.p0.x, segment.p0.y, segment.p1.x, segment.p1.y\n      // );\n\n\n      this.glyphInfo.push({\n        // transposeX: midpoint.x,\n        // transposeY: midpoint.y,\n        text: chars[i],\n        p0: segment.p0,\n        p1: segment.p1,\n        rotation\n      });\n    });\n  }\n\n  parsePathData(path) {\n    this.pathLength = -1; // reset path length\n\n    if (!path) {\n      return [];\n    }\n\n    var pathCommands = [];\n    var {\n      pathParser\n    } = path;\n    pathParser.reset(); // convert l, H, h, V, and v to L\n\n    while (!pathParser.isEnd()) {\n      var {\n        current\n      } = pathParser;\n      var startX = current ? current.x : 0;\n      var startY = current ? current.y : 0;\n      var command = pathParser.next();\n      var nextCommandType = command.type;\n      var points = [];\n\n      switch (command.type) {\n        case PathParser.MOVE_TO:\n          this.pathM(pathParser, points);\n          break;\n\n        case PathParser.LINE_TO:\n          nextCommandType = this.pathL(pathParser, points);\n          break;\n\n        case PathParser.HORIZ_LINE_TO:\n          nextCommandType = this.pathH(pathParser, points);\n          break;\n\n        case PathParser.VERT_LINE_TO:\n          nextCommandType = this.pathV(pathParser, points);\n          break;\n\n        case PathParser.CURVE_TO:\n          this.pathC(pathParser, points);\n          break;\n\n        case PathParser.SMOOTH_CURVE_TO:\n          nextCommandType = this.pathS(pathParser, points);\n          break;\n\n        case PathParser.QUAD_TO:\n          this.pathQ(pathParser, points);\n          break;\n\n        case PathParser.SMOOTH_QUAD_TO:\n          nextCommandType = this.pathT(pathParser, points);\n          break;\n\n        case PathParser.ARC:\n          points = this.pathA(pathParser);\n          break;\n\n        case PathParser.CLOSE_PATH:\n          PathElement.pathZ(pathParser);\n          break;\n      }\n\n      if (command.type !== PathParser.CLOSE_PATH) {\n        pathCommands.push({\n          type: nextCommandType,\n          points,\n          start: {\n            x: startX,\n            y: startY\n          },\n          pathLength: this.calcLength(startX, startY, nextCommandType, points)\n        });\n      } else {\n        pathCommands.push({\n          type: PathParser.CLOSE_PATH,\n          points: [],\n          pathLength: 0\n        });\n      }\n    }\n\n    return pathCommands;\n  }\n\n  pathM(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathM(pathParser).point;\n    points.push(x, y);\n  }\n\n  pathL(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathL(pathParser).point;\n    points.push(x, y);\n    return PathParser.LINE_TO;\n  }\n\n  pathH(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathH(pathParser).point;\n    points.push(x, y);\n    return PathParser.LINE_TO;\n  }\n\n  pathV(pathParser, points) {\n    var {\n      x,\n      y\n    } = PathElement.pathV(pathParser).point;\n    points.push(x, y);\n    return PathParser.LINE_TO;\n  }\n\n  pathC(pathParser, points) {\n    var {\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathC(pathParser);\n    points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n  }\n\n  pathS(pathParser, points) {\n    var {\n      point,\n      controlPoint,\n      currentPoint\n    } = PathElement.pathS(pathParser);\n    points.push(point.x, point.y, controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    return PathParser.CURVE_TO;\n  }\n\n  pathQ(pathParser, points) {\n    var {\n      controlPoint,\n      currentPoint\n    } = PathElement.pathQ(pathParser);\n    points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n  }\n\n  pathT(pathParser, points) {\n    var {\n      controlPoint,\n      currentPoint\n    } = PathElement.pathT(pathParser);\n    points.push(controlPoint.x, controlPoint.y, currentPoint.x, currentPoint.y);\n    return PathParser.QUAD_TO;\n  }\n\n  pathA(pathParser) {\n    var {\n      rX,\n      rY,\n      sweepFlag,\n      xAxisRotation,\n      centp,\n      a1,\n      ad\n    } = PathElement.pathA(pathParser);\n\n    if (sweepFlag === 0 && ad > 0) {\n      ad -= 2 * Math.PI;\n    }\n\n    if (sweepFlag === 1 && ad < 0) {\n      ad += 2 * Math.PI;\n    }\n\n    return [centp.x, centp.y, rX, rY, a1, ad, xAxisRotation, sweepFlag];\n  }\n\n  calcLength(x, y, commandType, points) {\n    var len = 0;\n    var p1 = null;\n    var p2 = null;\n    var t = 0;\n\n    switch (commandType) {\n      case PathParser.LINE_TO:\n        return this.getLineLength(x, y, points[0], points[1]);\n\n      case PathParser.CURVE_TO:\n        // Approximates by breaking curve into 100 line segments\n        len = 0.0;\n        p1 = this.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n\n        for (t = 0.01; t <= 1; t += 0.01) {\n          p2 = this.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);\n          len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          p1 = p2;\n        }\n\n        return len;\n\n      case PathParser.QUAD_TO:\n        // Approximates by breaking curve into 100 line segments\n        len = 0.0;\n        p1 = this.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);\n\n        for (t = 0.01; t <= 1; t += 0.01) {\n          p2 = this.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);\n          len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          p1 = p2;\n        }\n\n        return len;\n\n      case PathParser.ARC:\n        {\n          // Approximates by breaking curve into line segments\n          len = 0.0;\n          var start = points[4]; // 4 = theta\n\n          var dTheta = points[5]; // 5 = dTheta\n\n          var end = points[4] + dTheta;\n          var inc = Math.PI / 180.0; // 1 degree resolution\n\n          if (Math.abs(start - end) < inc) {\n            inc = Math.abs(start - end);\n          } // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi\n\n\n          p1 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);\n\n          if (dTheta < 0) {\n            // clockwise\n            for (t = start - inc; t > end; t -= inc) {\n              p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n              len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n              p1 = p2;\n            }\n          } else {\n            // counter-clockwise\n            for (t = start + inc; t < end; t += inc) {\n              p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);\n              len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n              p1 = p2;\n            }\n          }\n\n          p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);\n          len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);\n          return len;\n        }\n    }\n\n    return 0;\n  }\n\n  getPointOnLine(dist, p1x, p1y, p2x, p2y) {\n    var fromX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : p1x;\n    var fromY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : p1y;\n    var m = (p2y - p1y) / (p2x - p1x + PSEUDO_ZERO);\n    var run = Math.sqrt(dist * dist / (1 + m * m));\n\n    if (p2x < p1x) {\n      run *= -1;\n    }\n\n    var rise = m * run;\n    var pt = null;\n\n    if (p2x === p1x) {\n      // vertical line\n      pt = {\n        x: fromX,\n        y: fromY + rise\n      };\n    } else if ((fromY - p1y) / (fromX - p1x + PSEUDO_ZERO) === m) {\n      pt = {\n        x: fromX + run,\n        y: fromY + rise\n      };\n    } else {\n      var ix = 0;\n      var iy = 0;\n      var len = this.getLineLength(p1x, p1y, p2x, p2y);\n\n      if (len < PSEUDO_ZERO) {\n        return null;\n      }\n\n      var u = (fromX - p1x) * (p2x - p1x) + (fromY - p1y) * (p2y - p1y);\n      u /= len * len;\n      ix = p1x + u * (p2x - p1x);\n      iy = p1y + u * (p2y - p1y);\n      var pRise = this.getLineLength(fromX, fromY, ix, iy);\n      var pRun = Math.sqrt(dist * dist - pRise * pRise);\n      run = Math.sqrt(pRun * pRun / (1 + m * m));\n\n      if (p2x < p1x) {\n        run *= -1;\n      }\n\n      rise = m * run;\n      pt = {\n        x: ix + run,\n        y: iy + rise\n      };\n    }\n\n    return pt;\n  }\n\n  getPointOnPath(distance) {\n    var fullLen = this.getPathLength();\n    var cumulativePathLength = 0;\n    var p = null;\n\n    if (distance < -0.00005 || distance - 0.00005 > fullLen) {\n      return null;\n    }\n\n    var {\n      dataArray\n    } = this;\n\n    for (var command of dataArray) {\n      if (command && (command.pathLength < 0.00005 || cumulativePathLength + command.pathLength + 0.00005 < distance)) {\n        cumulativePathLength += command.pathLength;\n        continue;\n      }\n\n      var delta = distance - cumulativePathLength;\n      var currentT = 0;\n\n      switch (command.type) {\n        case PathParser.LINE_TO:\n          p = this.getPointOnLine(delta, command.start.x, command.start.y, command.points[0], command.points[1], command.start.x, command.start.y);\n          break;\n\n        case PathParser.ARC:\n          {\n            var start = command.points[4]; // 4 = theta\n\n            var dTheta = command.points[5]; // 5 = dTheta\n\n            var end = command.points[4] + dTheta;\n            currentT = start + delta / command.pathLength * dTheta;\n\n            if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {\n              break;\n            }\n\n            p = this.getPointOnEllipticalArc(command.points[0], command.points[1], command.points[2], command.points[3], currentT, command.points[6]);\n            break;\n          }\n\n        case PathParser.CURVE_TO:\n          currentT = delta / command.pathLength;\n\n          if (currentT > 1) {\n            currentT = 1;\n          }\n\n          p = this.getPointOnCubicBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3], command.points[4], command.points[5]);\n          break;\n\n        case PathParser.QUAD_TO:\n          currentT = delta / command.pathLength;\n\n          if (currentT > 1) {\n            currentT = 1;\n          }\n\n          p = this.getPointOnQuadraticBezier(currentT, command.start.x, command.start.y, command.points[0], command.points[1], command.points[2], command.points[3]);\n          break;\n      }\n\n      if (p) {\n        return p;\n      }\n\n      break;\n    }\n\n    return null;\n  }\n\n  getLineLength(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n\n  getPathLength() {\n    if (this.pathLength === -1) {\n      this.pathLength = this.dataArray.reduce((length, command) => command.pathLength > 0 ? length + command.pathLength : length, 0);\n    }\n\n    return this.pathLength;\n  }\n\n  getPointOnCubicBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n    var x = p4x * CB1(pct) + p3x * CB2(pct) + p2x * CB3(pct) + p1x * CB4(pct);\n    var y = p4y * CB1(pct) + p3y * CB2(pct) + p2y * CB3(pct) + p1y * CB4(pct);\n    return {\n      x,\n      y\n    };\n  }\n\n  getPointOnQuadraticBezier(pct, p1x, p1y, p2x, p2y, p3x, p3y) {\n    var x = p3x * QB1(pct) + p2x * QB2(pct) + p1x * QB3(pct);\n    var y = p3y * QB1(pct) + p2y * QB2(pct) + p1y * QB3(pct);\n    return {\n      x,\n      y\n    };\n  }\n\n  getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {\n    var cosPsi = Math.cos(psi);\n    var sinPsi = Math.sin(psi);\n    var pt = {\n      x: rx * Math.cos(theta),\n      y: ry * Math.sin(theta)\n    };\n    return {\n      x: cx + (pt.x * cosPsi - pt.y * sinPsi),\n      y: cy + (pt.x * sinPsi + pt.y * cosPsi)\n    };\n  } // TODO need some optimisations. possibly build cache only for curved segments?\n\n\n  buildEquidistantCache(inputStep, inputPrecision) {\n    var fullLen = this.getPathLength();\n    var precision = inputPrecision || 0.25; // accuracy vs performance\n\n    var step = inputStep || fullLen / 100;\n\n    if (!this.equidistantCache || this.equidistantCache.step !== step || this.equidistantCache.precision !== precision) {\n      // Prepare cache\n      this.equidistantCache = {\n        step,\n        precision,\n        points: []\n      }; // Calculate points\n\n      var s = 0;\n\n      for (var l = 0; l <= fullLen; l += precision) {\n        var p0 = this.getPointOnPath(l);\n        var p1 = this.getPointOnPath(l + precision);\n\n        if (!p0 || !p1) {\n          continue;\n        }\n\n        s += this.getLineLength(p0.x, p0.y, p1.x, p1.y);\n\n        if (s >= step) {\n          this.equidistantCache.points.push({\n            x: p0.x,\n            y: p0.y,\n            distance: l\n          });\n          s -= step;\n        }\n      }\n    }\n  }\n\n  getEquidistantPointOnPath(targetDistance, step, precision) {\n    this.buildEquidistantCache(step, precision);\n\n    if (targetDistance < 0 || targetDistance - this.getPathLength() > 0.00005) {\n      return null;\n    }\n\n    var idx = Math.round(targetDistance / this.getPathLength() * (this.equidistantCache.points.length - 1));\n    return this.equidistantCache.points[idx] || null;\n  }\n\n}\n\nvar dataUriRegex = /^\\s*data:(([^/,;]+\\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;\nclass ImageElement extends RenderedElement {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'image';\n    this.loaded = false;\n    var href = this.getHrefAttribute().getString();\n\n    if (!href) {\n      return;\n    }\n\n    var isSvg = href.endsWith('.svg') || /^\\s*data:image\\/svg\\+xml/i.test(href);\n    document.images.push(this);\n\n    if (!isSvg) {\n      void this.loadImage(href);\n    } else {\n      void this.loadSvg(href);\n    }\n\n    this.isSvg = isSvg;\n  }\n\n  loadImage(href) {\n    var _this = this;\n\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      try {\n        var image = yield _this.document.createImage(href);\n        _this.image = image;\n      } catch (err) {\n        console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), err);\n      }\n\n      _this.loaded = true;\n    })();\n  }\n\n  loadSvg(href) {\n    var _this2 = this;\n\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      var match = dataUriRegex.exec(href);\n\n      if (match) {\n        var data = match[5];\n\n        if (match[4] === 'base64') {\n          _this2.image = atob(data);\n        } else {\n          _this2.image = decodeURIComponent(data);\n        }\n      } else {\n        try {\n          var response = yield _this2.document.fetch(href);\n          var svg = yield response.text();\n          _this2.image = svg;\n        } catch (err) {\n          console.error(\"Error while loading image \\\"\".concat(href, \"\\\":\"), err);\n        }\n      }\n\n      _this2.loaded = true;\n    })();\n  }\n\n  renderChildren(ctx) {\n    var {\n      document,\n      image,\n      loaded\n    } = this;\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width').getPixels('x');\n    var height = this.getStyle('height').getPixels('y');\n\n    if (!loaded || !image || !width || !height) {\n      return;\n    }\n\n    ctx.save();\n    ctx.translate(x, y);\n\n    if (this.isSvg) {\n      var subDocument = document.canvg.forkString(ctx, this.image, {\n        ignoreMouse: true,\n        ignoreAnimation: true,\n        ignoreDimensions: true,\n        ignoreClear: true,\n        offsetX: 0,\n        offsetY: 0,\n        scaleWidth: width,\n        scaleHeight: height\n      });\n      subDocument.document.documentElement.parent = this;\n      void subDocument.render();\n    } else {\n      var _image = this.image;\n      document.setViewBox({\n        ctx,\n        aspectRatio: this.getAttribute('preserveAspectRatio').getString(),\n        width,\n        desiredWidth: _image.width,\n        height,\n        desiredHeight: _image.height\n      });\n\n      if (this.loaded) {\n        if (typeof _image.complete === 'undefined' || _image.complete) {\n          ctx.drawImage(_image, 0, 0);\n        }\n      }\n    }\n\n    ctx.restore();\n  }\n\n  getBoundingBox() {\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width').getPixels('x');\n    var height = this.getStyle('height').getPixels('y');\n    return new BoundingBox(x, y, x + width, y + height);\n  }\n\n}\n\nclass SymbolElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'symbol';\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\n\nclass SVGFontLoader {\n  constructor(document) {\n    this.document = document;\n    this.loaded = false;\n    document.fonts.push(this);\n  }\n\n  load(fontFamily, url) {\n    var _this = this;\n\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      try {\n        var {\n          document\n        } = _this;\n        var svgDocument = yield document.canvg.parser.load(url);\n        var fonts = svgDocument.getElementsByTagName('font');\n        Array.from(fonts).forEach(fontNode => {\n          var font = document.createElement(fontNode);\n          document.definitions[fontFamily] = font;\n        });\n      } catch (err) {\n        console.error(\"Error while loading font \\\"\".concat(url, \"\\\":\"), err);\n      }\n\n      _this.loaded = true;\n    })();\n  }\n\n}\n\nclass StyleElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'style';\n    var css = compressSpaces(Array.from(node.childNodes) // NEED TEST\n    .map(_ => _.textContent).join('').replace(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/)|(^[\\s]*\\/\\/.*)/gm, '') // remove comments\n    .replace(/@import.*;/g, '') // remove imports\n    );\n    var cssDefs = css.split('}');\n    cssDefs.forEach(_ => {\n      var def = _.trim();\n\n      if (!def) {\n        return;\n      }\n\n      var cssParts = def.split('{');\n      var cssClasses = cssParts[0].split(',');\n      var cssProps = cssParts[1].split(';');\n      cssClasses.forEach(_ => {\n        var cssClass = _.trim();\n\n        if (!cssClass) {\n          return;\n        }\n\n        var props = document.styles[cssClass] || {};\n        cssProps.forEach(cssProp => {\n          var prop = cssProp.indexOf(':');\n          var name = cssProp.substr(0, prop).trim();\n          var value = cssProp.substr(prop + 1, cssProp.length - prop).trim();\n\n          if (name && value) {\n            props[name] = new Property(document, name, value);\n          }\n        });\n        document.styles[cssClass] = props;\n        document.stylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);\n\n        if (cssClass === '@font-face') {\n          //  && !nodeEnv\n          var fontFamily = props['font-family'].getString().replace(/\"|'/g, '');\n          var srcs = props.src.getString().split(',');\n          srcs.forEach(src => {\n            if (src.indexOf('format(\"svg\")') > 0) {\n              var url = parseExternalUrl(src);\n\n              if (url) {\n                void new SVGFontLoader(document).load(fontFamily, url);\n              }\n            }\n          });\n        }\n      });\n    });\n  }\n\n}\nStyleElement.parseExternalUrl = parseExternalUrl;\n\nclass UseElement extends RenderedElement {\n  constructor() {\n    super(...arguments);\n    this.type = 'use';\n  }\n\n  setContext(ctx) {\n    super.setContext(ctx);\n    var xAttr = this.getAttribute('x');\n    var yAttr = this.getAttribute('y');\n\n    if (xAttr.hasValue()) {\n      ctx.translate(xAttr.getPixels('x'), 0);\n    }\n\n    if (yAttr.hasValue()) {\n      ctx.translate(0, yAttr.getPixels('y'));\n    }\n  }\n\n  path(ctx) {\n    var {\n      element\n    } = this;\n\n    if (element) {\n      element.path(ctx);\n    }\n  }\n\n  renderChildren(ctx) {\n    var {\n      document,\n      element\n    } = this;\n\n    if (element) {\n      var tempSvg = element;\n\n      if (element.type === 'symbol') {\n        // render me using a temporary svg element in symbol cases (http://www.w3.org/TR/SVG/struct.html#UseElement)\n        tempSvg = new SVGElement(document, null);\n        tempSvg.attributes.viewBox = new Property(document, 'viewBox', element.getAttribute('viewBox').getString());\n        tempSvg.attributes.preserveAspectRatio = new Property(document, 'preserveAspectRatio', element.getAttribute('preserveAspectRatio').getString());\n        tempSvg.attributes.overflow = new Property(document, 'overflow', element.getAttribute('overflow').getString());\n        tempSvg.children = element.children; // element is still the parent of the children\n\n        element.styles.opacity = new Property(document, 'opacity', this.calculateOpacity());\n      }\n\n      if (tempSvg.type === 'svg') {\n        var widthStyle = this.getStyle('width', false, true);\n        var heightStyle = this.getStyle('height', false, true); // if symbol or svg, inherit width/height from me\n\n        if (widthStyle.hasValue()) {\n          tempSvg.attributes.width = new Property(document, 'width', widthStyle.getString());\n        }\n\n        if (heightStyle.hasValue()) {\n          tempSvg.attributes.height = new Property(document, 'height', heightStyle.getString());\n        }\n      }\n\n      var oldParent = tempSvg.parent;\n      tempSvg.parent = this;\n      tempSvg.render(ctx);\n      tempSvg.parent = oldParent;\n    }\n  }\n\n  getBoundingBox(ctx) {\n    var {\n      element\n    } = this;\n\n    if (element) {\n      return element.getBoundingBox(ctx);\n    }\n\n    return null;\n  }\n\n  elementTransform() {\n    var {\n      document,\n      element\n    } = this;\n    return Transform.fromElement(document, element);\n  }\n\n  get element() {\n    if (!this.cachedElement) {\n      this.cachedElement = this.getHrefAttribute().getDefinition();\n    }\n\n    return this.cachedElement;\n  }\n\n}\n\nfunction imGet(img, x, y, width, _height, rgba) {\n  return img[y * width * 4 + x * 4 + rgba];\n}\n\nfunction imSet(img, x, y, width, _height, rgba, val) {\n  img[y * width * 4 + x * 4 + rgba] = val;\n}\n\nfunction m(matrix, i, v) {\n  var mi = matrix[i];\n  return mi * v;\n}\n\nfunction c(a, m1, m2, m3) {\n  return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;\n}\n\nclass FeColorMatrixElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'feColorMatrix';\n    var matrix = toNumbers(this.getAttribute('values').getString());\n\n    switch (this.getAttribute('type').getString('matrix')) {\n      // http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement\n      case 'saturate':\n        {\n          var s = matrix[0];\n          /* eslint-disable array-element-newline */\n\n          matrix = [0.213 + 0.787 * s, 0.715 - 0.715 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 + 0.285 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 - 0.715 * s, 0.072 + 0.928 * s, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          /* eslint-enable array-element-newline */\n\n          break;\n        }\n\n      case 'hueRotate':\n        {\n          var a = matrix[0] * Math.PI / 180.0;\n          /* eslint-disable array-element-newline */\n\n          matrix = [c(a, 0.213, 0.787, -0.213), c(a, 0.715, -0.715, -0.715), c(a, 0.072, -0.072, 0.928), 0, 0, c(a, 0.213, -0.213, 0.143), c(a, 0.715, 0.285, 0.140), c(a, 0.072, -0.072, -0.283), 0, 0, c(a, 0.213, -0.213, -0.787), c(a, 0.715, -0.715, 0.715), c(a, 0.072, 0.928, 0.072), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          /* eslint-enable array-element-newline */\n\n          break;\n        }\n\n      case 'luminanceToAlpha':\n        /* eslint-disable array-element-newline */\n        matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2125, 0.7154, 0.0721, 0, 0, 0, 0, 0, 0, 1];\n        /* eslint-enable array-element-newline */\n\n        break;\n    }\n\n    this.matrix = matrix;\n    this.includeOpacity = this.getAttribute('includeOpacity').hasValue();\n  }\n\n  apply(ctx, _x, _y, width, height) {\n    // assuming x==0 && y==0 for now\n    var {\n      includeOpacity,\n      matrix\n    } = this;\n    var srcData = ctx.getImageData(0, 0, width, height);\n\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        var r = imGet(srcData.data, x, y, width, height, 0);\n        var g = imGet(srcData.data, x, y, width, height, 1);\n        var b = imGet(srcData.data, x, y, width, height, 2);\n        var a = imGet(srcData.data, x, y, width, height, 3);\n        var nr = m(matrix, 0, r) + m(matrix, 1, g) + m(matrix, 2, b) + m(matrix, 3, a) + m(matrix, 4, 1);\n        var ng = m(matrix, 5, r) + m(matrix, 6, g) + m(matrix, 7, b) + m(matrix, 8, a) + m(matrix, 9, 1);\n        var nb = m(matrix, 10, r) + m(matrix, 11, g) + m(matrix, 12, b) + m(matrix, 13, a) + m(matrix, 14, 1);\n        var na = m(matrix, 15, r) + m(matrix, 16, g) + m(matrix, 17, b) + m(matrix, 18, a) + m(matrix, 19, 1);\n\n        if (includeOpacity) {\n          nr = 0;\n          ng = 0;\n          nb = 0;\n          na *= a / 255;\n        }\n\n        imSet(srcData.data, x, y, width, height, 0, nr);\n        imSet(srcData.data, x, y, width, height, 1, ng);\n        imSet(srcData.data, x, y, width, height, 2, nb);\n        imSet(srcData.data, x, y, width, height, 3, na);\n      }\n    }\n\n    ctx.clearRect(0, 0, width, height);\n    ctx.putImageData(srcData, 0, 0);\n  }\n\n}\n\nclass MaskElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'mask';\n  }\n\n  apply(ctx, element) {\n    var {\n      document\n    } = this; // render as temp svg\n\n    var x = this.getAttribute('x').getPixels('x');\n    var y = this.getAttribute('y').getPixels('y');\n    var width = this.getStyle('width').getPixels('x');\n    var height = this.getStyle('height').getPixels('y');\n\n    if (!width && !height) {\n      var boundingBox = new BoundingBox();\n      this.children.forEach(child => {\n        boundingBox.addBoundingBox(child.getBoundingBox(ctx));\n      });\n      x = Math.floor(boundingBox.x1);\n      y = Math.floor(boundingBox.y1);\n      width = Math.floor(boundingBox.width);\n      height = Math.floor(boundingBox.height);\n    }\n\n    var ignoredStyles = this.removeStyles(element, MaskElement.ignoreStyles);\n    var maskCanvas = document.createCanvas(x + width, y + height);\n    var maskCtx = maskCanvas.getContext('2d');\n    document.screen.setDefaults(maskCtx);\n    this.renderChildren(maskCtx); // convert mask to alpha with a fake node\n    // TODO: refactor out apply from feColorMatrix\n\n    new FeColorMatrixElement(document, {\n      nodeType: 1,\n      childNodes: [],\n      attributes: [{\n        nodeName: 'type',\n        value: 'luminanceToAlpha'\n      }, {\n        nodeName: 'includeOpacity',\n        value: 'true'\n      }]\n    }).apply(maskCtx, 0, 0, x + width, y + height);\n    var tmpCanvas = document.createCanvas(x + width, y + height);\n    var tmpCtx = tmpCanvas.getContext('2d');\n    document.screen.setDefaults(tmpCtx);\n    element.render(tmpCtx);\n    tmpCtx.globalCompositeOperation = 'destination-in';\n    tmpCtx.fillStyle = maskCtx.createPattern(maskCanvas, 'no-repeat');\n    tmpCtx.fillRect(0, 0, x + width, y + height);\n    ctx.fillStyle = tmpCtx.createPattern(tmpCanvas, 'no-repeat');\n    ctx.fillRect(0, 0, x + width, y + height); // reassign mask\n\n    this.restoreStyles(element, ignoredStyles);\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\nMaskElement.ignoreStyles = ['mask', 'transform', 'clip-path'];\n\nvar noop = () => {// NOOP\n};\n\nclass ClipPathElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'clipPath';\n  }\n\n  apply(ctx) {\n    var {\n      document\n    } = this;\n    var contextProto = Reflect.getPrototypeOf(ctx);\n    var {\n      beginPath,\n      closePath\n    } = ctx;\n\n    if (contextProto) {\n      contextProto.beginPath = noop;\n      contextProto.closePath = noop;\n    }\n\n    Reflect.apply(beginPath, ctx, []);\n    this.children.forEach(child => {\n      if (typeof child.path === 'undefined') {\n        return;\n      }\n\n      var transform = typeof child.elementTransform !== 'undefined' ? child.elementTransform() : null; // handle <use />\n\n      if (!transform) {\n        transform = Transform.fromElement(document, child);\n      }\n\n      if (transform) {\n        transform.apply(ctx);\n      }\n\n      child.path(ctx);\n\n      if (contextProto) {\n        contextProto.closePath = closePath;\n      }\n\n      if (transform) {\n        transform.unapply(ctx);\n      }\n    });\n    Reflect.apply(closePath, ctx, []);\n    ctx.clip();\n\n    if (contextProto) {\n      contextProto.beginPath = beginPath;\n      contextProto.closePath = closePath;\n    }\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\n\nclass FilterElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'filter';\n  }\n\n  apply(ctx, element) {\n    // render as temp svg\n    var {\n      document,\n      children\n    } = this;\n    var boundingBox = element.getBoundingBox(ctx);\n\n    if (!boundingBox) {\n      return;\n    }\n\n    var px = 0;\n    var py = 0;\n    children.forEach(child => {\n      var efd = child.extraFilterDistance || 0;\n      px = Math.max(px, efd);\n      py = Math.max(py, efd);\n    });\n    var width = Math.floor(boundingBox.width);\n    var height = Math.floor(boundingBox.height);\n    var tmpCanvasWidth = width + 2 * px;\n    var tmpCanvasHeight = height + 2 * py;\n\n    if (tmpCanvasWidth < 1 || tmpCanvasHeight < 1) {\n      return;\n    }\n\n    var x = Math.floor(boundingBox.x);\n    var y = Math.floor(boundingBox.y);\n    var ignoredStyles = this.removeStyles(element, FilterElement.ignoreStyles);\n    var tmpCanvas = document.createCanvas(tmpCanvasWidth, tmpCanvasHeight);\n    var tmpCtx = tmpCanvas.getContext('2d');\n    document.screen.setDefaults(tmpCtx);\n    tmpCtx.translate(-x + px, -y + py);\n    element.render(tmpCtx); // apply filters\n\n    children.forEach(child => {\n      if (typeof child.apply === 'function') {\n        child.apply(tmpCtx, 0, 0, tmpCanvasWidth, tmpCanvasHeight);\n      }\n    }); // render on me\n\n    ctx.drawImage(tmpCanvas, 0, 0, tmpCanvasWidth, tmpCanvasHeight, x - px, y - py, tmpCanvasWidth, tmpCanvasHeight);\n    this.restoreStyles(element, ignoredStyles);\n  }\n\n  render(_) {// NO RENDER\n  }\n\n}\nFilterElement.ignoreStyles = ['filter', 'transform', 'clip-path'];\n\nclass FeDropShadowElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'feDropShadow';\n    this.addStylesFromStyleDefinition();\n  }\n\n  apply(_, _x, _y, _width, _height) {// TODO: implement\n  }\n\n}\n\nclass FeMorphologyElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'feMorphology';\n  }\n\n  apply(_, _x, _y, _width, _height) {// TODO: implement\n  }\n\n}\n\nclass FeCompositeElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'feComposite';\n  }\n\n  apply(_, _x, _y, _width, _height) {// TODO: implement\n  }\n\n}\n\nclass FeGaussianBlurElement extends Element {\n  constructor(document, node, captureTextNodes) {\n    super(document, node, captureTextNodes);\n    this.type = 'feGaussianBlur';\n    this.blurRadius = Math.floor(this.getAttribute('stdDeviation').getNumber());\n    this.extraFilterDistance = this.blurRadius;\n  }\n\n  apply(ctx, x, y, width, height) {\n    var {\n      document,\n      blurRadius\n    } = this;\n    var body = document.window ? document.window.document.body : null;\n    var canvas = ctx.canvas; // StackBlur requires canvas be on document\n\n    canvas.id = document.getUniqueId();\n\n    if (body) {\n      canvas.style.display = 'none';\n      body.appendChild(canvas);\n    }\n\n    (0,stackblur_canvas__WEBPACK_IMPORTED_MODULE_19__/* .canvasRGBA */ .vR)(canvas, x, y, width, height, blurRadius);\n\n    if (body) {\n      body.removeChild(canvas);\n    }\n  }\n\n}\n\nclass TitleElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'title';\n  }\n\n}\n\nclass DescElement extends Element {\n  constructor() {\n    super(...arguments);\n    this.type = 'desc';\n  }\n\n}\n\nvar elements = {\n  'svg': SVGElement,\n  'rect': RectElement,\n  'circle': CircleElement,\n  'ellipse': EllipseElement,\n  'line': LineElement,\n  'polyline': PolylineElement,\n  'polygon': PolygonElement,\n  'path': PathElement,\n  'pattern': PatternElement,\n  'marker': MarkerElement,\n  'defs': DefsElement,\n  'linearGradient': LinearGradientElement,\n  'radialGradient': RadialGradientElement,\n  'stop': StopElement,\n  'animate': AnimateElement,\n  'animateColor': AnimateColorElement,\n  'animateTransform': AnimateTransformElement,\n  'font': FontElement,\n  'font-face': FontFaceElement,\n  'missing-glyph': MissingGlyphElement,\n  'glyph': GlyphElement,\n  'text': TextElement,\n  'tspan': TSpanElement,\n  'tref': TRefElement,\n  'a': AElement,\n  'textPath': TextPathElement,\n  'image': ImageElement,\n  'g': GElement,\n  'symbol': SymbolElement,\n  'style': StyleElement,\n  'use': UseElement,\n  'mask': MaskElement,\n  'clipPath': ClipPathElement,\n  'filter': FilterElement,\n  'feDropShadow': FeDropShadowElement,\n  'feMorphology': FeMorphologyElement,\n  'feComposite': FeCompositeElement,\n  'feColorMatrix': FeColorMatrixElement,\n  'feGaussianBlur': FeGaussianBlurElement,\n  'title': TitleElement,\n  'desc': DescElement\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_18__/* [\"default\"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction createCanvas(width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  return canvas;\n}\n\nfunction createImage(_x) {\n  return _createImage.apply(this, arguments);\n}\n\nfunction _createImage() {\n  _createImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* (src) {\n    var anonymousCrossOrigin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var image = document.createElement('img');\n\n    if (anonymousCrossOrigin) {\n      image.crossOrigin = 'Anonymous';\n    }\n\n    return new Promise((resolve, reject) => {\n      image.onload = () => {\n        resolve(image);\n      };\n\n      image.onerror = (_event, _source, _lineno, _colno, error) => {\n        reject(error);\n      };\n\n      image.src = src;\n    });\n  });\n  return _createImage.apply(this, arguments);\n}\n\nclass Document {\n  constructor(canvg) {\n    var {\n      rootEmSize = 12,\n      emSize = 12,\n      createCanvas = Document.createCanvas,\n      createImage = Document.createImage,\n      anonymousCrossOrigin\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.canvg = canvg;\n    this.definitions = {};\n    this.styles = {};\n    this.stylesSpecificity = {};\n    this.images = [];\n    this.fonts = [];\n    this.emSizeStack = [];\n    this.uniqueId = 0;\n    this.screen = canvg.screen;\n    this.rootEmSize = rootEmSize;\n    this.emSize = emSize;\n    this.createCanvas = createCanvas;\n    this.createImage = this.bindCreateImage(createImage, anonymousCrossOrigin);\n    this.screen.wait(this.isImagesLoaded.bind(this));\n    this.screen.wait(this.isFontsLoaded.bind(this));\n  }\n\n  bindCreateImage(createImage, anonymousCrossOrigin) {\n    if (typeof anonymousCrossOrigin === 'boolean') {\n      return (source, forceAnonymousCrossOrigin) => createImage(source, typeof forceAnonymousCrossOrigin === 'boolean' ? forceAnonymousCrossOrigin : anonymousCrossOrigin);\n    }\n\n    return createImage;\n  }\n\n  get window() {\n    return this.screen.window;\n  }\n\n  get fetch() {\n    return this.screen.fetch;\n  }\n\n  get ctx() {\n    return this.screen.ctx;\n  }\n\n  get emSize() {\n    var {\n      emSizeStack\n    } = this;\n    return emSizeStack[emSizeStack.length - 1];\n  }\n\n  set emSize(value) {\n    var {\n      emSizeStack\n    } = this;\n    emSizeStack.push(value);\n  }\n\n  popEmSize() {\n    var {\n      emSizeStack\n    } = this;\n    emSizeStack.pop();\n  }\n\n  getUniqueId() {\n    return \"canvg\".concat(++this.uniqueId);\n  }\n\n  isImagesLoaded() {\n    return this.images.every(_ => _.loaded);\n  }\n\n  isFontsLoaded() {\n    return this.fonts.every(_ => _.loaded);\n  }\n\n  createDocumentElement(document) {\n    var documentElement = this.createElement(document.documentElement);\n    documentElement.root = true;\n    documentElement.addStylesFromStyleDefinition();\n    this.documentElement = documentElement;\n    return documentElement;\n  }\n\n  createElement(node) {\n    var elementType = node.nodeName.replace(/^[^:]+:/, '');\n    var ElementType = Document.elementTypes[elementType];\n\n    if (typeof ElementType !== 'undefined') {\n      return new ElementType(this, node);\n    }\n\n    return new UnknownElement(this, node);\n  }\n\n  createTextNode(node) {\n    return new TextNode(this, node);\n  }\n\n  setViewBox(config) {\n    this.screen.setViewBox(_objectSpread$1({\n      document: this\n    }, config));\n  }\n\n}\nDocument.createCanvas = createCanvas;\nDocument.createImage = createImage;\nDocument.elementTypes = elements;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_18__/* [\"default\"] */ .Z)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\r\n * SVG renderer on canvas.\r\n */\n\nclass Canvg {\n  /**\r\n   * Main constructor.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG Document.\r\n   * @param options - Rendering options.\r\n   */\n  constructor(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.parser = new Parser(options);\n    this.screen = new Screen(ctx, options);\n    this.options = options;\n    var document = new Document(this, options);\n    var documentElement = document.createDocumentElement(svg);\n    this.document = document;\n    this.documentElement = documentElement;\n  }\n  /**\r\n   * Create Canvg instance from SVG source string or URL.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string or URL.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  static from(ctx, svg) {\n    var _arguments = arguments;\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      var options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n      var parser = new Parser(options);\n      var svgDocument = yield parser.parse(svg);\n      return new Canvg(ctx, svgDocument, options);\n    })();\n  }\n  /**\r\n   * Create Canvg instance from SVG source string.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  static fromString(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var parser = new Parser(options);\n    var svgDocument = parser.parseFromString(svg);\n    return new Canvg(ctx, svgDocument, options);\n  }\n  /**\r\n   * Create new Canvg instance with inherited options.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string or URL.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  fork(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return Canvg.from(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));\n  }\n  /**\r\n   * Create new Canvg instance with inherited options.\r\n   * @param ctx - Rendering context.\r\n   * @param svg - SVG source string.\r\n   * @param options - Rendering options.\r\n   * @returns Canvg instance.\r\n   */\n\n\n  forkString(ctx, svg) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return Canvg.fromString(ctx, svg, _objectSpread(_objectSpread({}, this.options), options));\n  }\n  /**\r\n   * Document is ready promise.\r\n   * @returns Ready promise.\r\n   */\n\n\n  ready() {\n    return this.screen.ready();\n  }\n  /**\r\n   * Document is ready value.\r\n   * @returns Is ready or not.\r\n   */\n\n\n  isReady() {\n    return this.screen.isReady();\n  }\n  /**\r\n   * Render only first frame, ignoring animations and mouse.\r\n   * @param options - Rendering options.\r\n   */\n\n\n  render() {\n    var _arguments2 = arguments,\n        _this = this;\n\n    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__/* [\"default\"] */ .Z)(function* () {\n      var options = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {};\n\n      _this.start(_objectSpread({\n        enableRedraw: true,\n        ignoreAnimation: true,\n        ignoreMouse: true\n      }, options));\n\n      yield _this.ready();\n\n      _this.stop();\n    })();\n  }\n  /**\r\n   * Start rendering.\r\n   * @param options - Render options.\r\n   */\n\n\n  start() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var {\n      documentElement,\n      screen,\n      options: baseOptions\n    } = this;\n    screen.start(documentElement, _objectSpread(_objectSpread({\n      enableRedraw: true\n    }, baseOptions), options));\n  }\n  /**\r\n   * Stop rendering.\r\n   */\n\n\n  stop() {\n    this.screen.stop();\n  }\n  /**\r\n   * Resize SVG to fit in given size.\r\n   * @param width\r\n   * @param height\r\n   * @param preserveAspectRatio\r\n   */\n\n\n  resize(width) {\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : width;\n    var preserveAspectRatio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.documentElement.resize(width, height, preserveAspectRatio);\n  }\n\n}\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXMuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==\n\n\n/***/ })\n\n}]);"],"names":["self","push","__unused_webpack___webpack_module__","__webpack_exports__","__webpack_require__","r","d","AElement","AnimateColorElement","AnimateElement","AnimateTransformElement","BoundingBox","CB1","CB2","CB3","CB4","Canvg","CircleElement","ClipPathElement","DefsElement","DescElement","Document","Element","EllipseElement","FeColorMatrixElement","FeCompositeElement","FeDropShadowElement","FeGaussianBlurElement","FeMorphologyElement","FilterElement","Font","FontElement","FontFaceElement","GElement","GlyphElement","GradientElement","ImageElement","LineElement","LinearGradientElement","MarkerElement","MaskElement","Matrix","MissingGlyphElement","Mouse","PSEUDO_ZERO","Parser","PathElement","PathParser","PatternElement","Point","PolygonElement","PolylineElement","Property","QB1","QB2","QB3","RadialGradientElement","RectElement","RenderedElement","Rotate","SVGElement","SVGFontLoader","Scale","Screen","Skew","SkewX","SkewY","StopElement","StyleElement","SymbolElement","TRefElement","TSpanElement","TextElement","TextPathElement","TitleElement","Transform","Translate","UnknownElement","UseElement","ViewPort","compressSpaces","getSelectorSpecificity","normalizeAttributeName","normalizeColor","parseExternalUrl","index","toNumbers","trimLeft","trimRight","vectorMagnitude","vectorsAngle","vectorsRatio","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_17__","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_18__","raf__WEBPACK_IMPORTED_MODULE_9__","rgbcolor__WEBPACK_IMPORTED_MODULE_11__","svg_pathdata__WEBPACK_IMPORTED_MODULE_15__","stackblur_canvas__WEBPACK_IMPORTED_MODULE_19__","process","Object","freeze","__proto__","offscreen","DOMParser","DOMParserFallback","arguments","length","undefined","preset","window","ignoreAnimation","ignoreMouse","createCanvas","width","height","OffscreenCanvas","createImage","Z","createImageBitmap","response","fetch","url","blob","Reflect","deleteProperty","node","_ref","canvas","loadImage","str","replace","matches","match","map","parseFloat","allUppercase","name","test","toLowerCase","urlMatch","exec","color","startsWith","rgbParts","num","isFloat","String","Math","round","attributeRegex","idRegex","classRegex","pseudoElementRegex","pseudoClassWithBracketsRegex","pseudoClassRegex","elementRegex","findSelectorMatch","selector","regex","specificity","currentSelector","delta","join","v","sqrt","pow","u","acos","t","constructor","document","value","isNormalizedColor","empty","split","separator","getString","trim","hasValue","zeroIsValue","isString","regexp","result","isUrlDefinition","isPixels","asString","endsWith","setValue","getValue","def","getNumber","n","getColor","getDpi","getRem","rootEmSize","getEm","emSize","getUnits","getPixels","axisOrIsFontSize","processPercent","axis","isFontSize","viewPort","screen","min","computeSize","max","getMilliseconds","getRadians","PI","getDefinition","definitions","getFillStyleDefinition","element","opacity","createGradient","ctx","createPattern","getHrefAttribute","patternTransform","getAttribute","getTextBaseline","textBaselineMapping","addOpacity","len","commas","i","ok","alpha","toRGBA","viewPorts","clear","setCurrent","removeCurrent","pop","getCurrent","x","y","parse","point","defaultValue","parseScale","scale","parsePath","path","points","pathPoints","angleTo","atan2","applyTransform","transform","xp","yp","working","events","eventElements","onClick","bind","onMouseMove","isWorking","start","onclick","onmousemove","stop","hasEvents","runEvents","style","cursor","forEach","run","parent","checkPath","_ref2","isPointInPath","checkBoundingBox","boundingBox","_ref3","isPointInBox","mapXY","offsetLeft","offsetTop","offsetParent","scrollX","scrollY","event","clientX","clientY","type","eventTarget","defaultWindow","defaultFetch$1","FRAMERATE","MAX_VIRTUAL_PIXELS","CLIENT_WIDTH","CLIENT_HEIGHT","mouse","animations","waits","frameDuration","isReadyLock","isFirstRender","intervalId","wait","checker","ready","readyPromise","Promise","resolve","isReady","every","_","resolveReady","setDefaults","strokeStyle","lineCap","lineJoin","miterLimit","setViewBox","aspectRatio","desiredWidth","desiredHeight","minX","minY","refX","refY","clip","clipX","clipY","aspectRatioAlign","aspectRatioMeetOrSlice","cleanAspectRatio","align","meetOrSlice","scaleX","scaleY","scaleMin","scaleMax","finalDesiredWidth","finalDesiredHeight","refXProp","refYProp","hasRefs","translate","scaledClipX","scaledClipY","beginPath","moveTo","lineTo","closePath","isMeetMinY","isSliceMaxY","isMeetMinX","isSliceMaxX","enableRedraw","ignoreDimensions","ignoreClear","forceRedraw","scaleWidth","scaleHeight","offsetX","offsetY","render","now","Date","then","tick","shouldUpdate","cancel","reduce","animation","update","widthStyle","getStyle","heightStyle","concat","cWidth","clientWidth","cHeight","clientHeight","viewBox","xRatio","yRatio","_widthStyle","isNaN","_heightStyle","transformStyle","clearRect","defaultFetch","DefaultDOMParser","resource","_this","parseFromString","load","xml","parser","checkDocument","err","parserError","getElementsByTagName","textContent","_this2","text","apply","unapply","applyToPoint","rotate","transformOrigin","angle","originX","originY","cx","cy","numbers","tx","ty","rad","cos","sin","scaleSize","matrix","a","b","c","e","f","det","h","g","skew","tan","transforms","data","parseTransform","TransformType","transformTypes","fromElement","transformOriginXProperty","transformOriginYProperty","skewX","skewY","captureTextNodes","attributes","styles","stylesSpecificity","animationFrozen","animationFrozenValue","children","nodeType","Array","from","attribute","nodeName","addStylesFromStyleDefinition","id","childNodes","childNode","addChild","textNode","createTextNode","getText","createIfNotExists","attr","_attr","key","skipAncestors","parentStyle","_style","save","mask","applyEffects","filter","setContext","renderChildren","clearContext","restore","clipPathStyleProp","child","createElement","ignoreChildTypes","includes","matchesSelector","_node$getAttribute","styleClasses","call","some","styleClass","existingSpecificity","removeStyles","ignoreStyles","toRestore","styleProp","restoreStyles","isFirstChild","_this$parent","indexOf","wrapFontFamily","fontFamily","trimmed","fontStyle","fontVariant","fontWeight","fontSize","inherit","inheritFont","font","parts","set","part","variants","weights","toString","prepareFontStyle","targetFontStyle","prepareFontWeight","targetFontWeight","x1","Number","NaN","y1","x2","y2","addPoint","addX","addY","addBoundingBox","sumCubic","p0","p1","p2","p3","bezierCurveAdd","forX","b2ac","t1","t2","addBezierCurve","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","addQuadraticCurve","cp1x","cp1y","OU","control","current","command","commands","previousCommand","angles","reset","isEnd","next","getPoint","xProp","yProp","makeAbsolute","getAsControlPoint","getAsCurrentPoint","getReflectedControlPoint","CURVE_TO","SMOOTH_CURVE_TO","QUAD_TO","SMOOTH_QUAD_TO","ox","oy","relative","addMarker","priorTo","addMarkerAngle","getMarkerPoints","getMarkerAngles","j","modifiedEmSizeStack","calculateOpacity","opacityStyle","fromMeasure","fillStyleProp","fillOpacityStyleProp","strokeStyleProp","strokeOpacityProp","fillStyle","_fillStyle","_fillStyle2","_strokeStyle","_strokeStyle2","strokeWidthStyleProp","newLineWidth","lineWidth","strokeLinecapStyleProp","strokeLinejoinStyleProp","strokeMiterlimitProp","strokeDasharrayStyleProp","strokeDashoffsetProp","gaps","setLineDash","webkitLineDash","mozDash","offset","lineDashOffset","webkitLineDashOffset","mozDashOffset","fontStyleProp","fontStyleStyleProp","fontVariantStyleProp","fontWeightStyleProp","fontSizeStyleProp","fontFamilyStyleProp","globalAlpha","popEmSize","pathParser","MOVE_TO","pathM","LINE_TO","pathL","HORIZ_LINE_TO","pathH","VERT_LINE_TO","pathV","pathC","pathS","pathQ","pathT","ARC","pathA","CLOSE_PATH","pathZ","getBoundingBox","getMarkers","fillRuleStyleProp","fill","setTransform","stroke","markers","markersLastIndex","markerStartStyleProp","markerMidStyleProp","markerEndStyleProp","marker","_marker","_point","_angle","_marker2","_point2","_angle2","controlPoint","currentPoint","bezierCurveTo","quadraticCurveTo","rX","rY","xRot","lArcFlag","sweepFlag","xAxisRotation","currp","l","s","cpp","centp","a1","ad","dir","ah","halfWay","sx","sy","arc","Boolean","horizAdvX","unicode","arabicForm","measureCache","textBaseline","initializeCoordinates","leafTexts","textChunkStart","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","getTElementBoundingBox","adjustChildCoordinatesRecursive","childBoundingBox","getChildBoundingBox","getFontSize","inheritFontSize","measureText","getGlyph","char","glyph","isArabic","prevChar","nextChar","glyphs","maybeGlyph","missingGlyph","getTextFromNode","parentNode","lastIndex","renderTElementChildren","renderChild","renderText","customFont","unitsPerEm","fontFace","ctxFont","isRTL","reverse","dx","lw","fillText","strokeText","applyAnchoring","firstElement","textAnchor","shift","adjustChildCoordinatesRecursiveCore","textParent","adjustChildCoordinates","xAttr","yAttr","dxAttr","dyAttr","getInheritedAttribute","measure","measureTargetText","targetText","_measure","parentAttr","TextNode","root","_this$node$parentNode","getComputedStyle","getPropertyValue","fontSizeProp","refXAttr","refYAttr","viewBoxAttr","resize","preserveAspectRatio","widthAttr","heightAttr","styleAttr","originWidth","originHeight","preserveAspectRatioAttr","rxAttr","ryAttr","rx","ry","KAPPA","getPoints","x0","y0","parentOpacityProp","patternSvg","patternCanvas","patternCtx","getContext","orient","markerUnits","markerSvg","overflow","attributesToInherit","stops","getGradientUnits","stopsContainer","inheritStopContainer","gradient","getGradient","addParentOpacity","addColorStop","rootView","rect","group","attributeToInherit","colorProp","isBoundingBoxUnits","createLinearGradient","fx","fy","fr","createRadialGradient","stopOpacity","stopColor","duration","initialValue","initialUnits","removed","frozen","begin","maxDuration","to","values","valuesAttr","getProperty","attributeType","attributeName","calcValue","progress","getProgress","newValue","prop","updated","typeAttr","p","lb","floor","ub","ceil","colorFrom","colorTo","transformFrom","transformTo","fontFamilyStyle","ascent","descent","firstChild","hasText","open","ownKeys$2","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread$2","target","source","getOwnPropertyDescriptors","defineProperties","defineProperty","textWidth","textHeight","pathLength","glyphInfo","letterSpacingCache","measuresCache","Map","pathElement","dataArray","parsePathData","theta","dTheta","psi","fs","setTextData","textDecoration","rotation","partialText","getLetterSpacingAt","idx","findSegmentToFitChar","anchor","textFullWidth","fullPathWidth","spacesNumber","inputOffset","dy","charI","glyphWidth","splineStep","getEquidistantPointOnPath","segment","dyX","dyY","has","get","chars","thisSpacing","parentSpacing","letterSpacing","textLen","dxSum","acc","cur","getPathLength","startOffset","nextOffset","pathCommands","startX","startY","nextCommandType","calcLength","commandType","getLineLength","getPointOnCubicBezier","getPointOnQuadraticBezier","end","inc","abs","getPointOnEllipticalArc","getPointOnLine","dist","fromX","fromY","m","rise","pt","ix","iy","pRise","pRun","getPointOnPath","distance","fullLen","cumulativePathLength","currentT","pct","p4x","p4y","cosPsi","sinPsi","buildEquidistantCache","inputStep","inputPrecision","precision","step","equidistantCache","targetDistance","dataUriRegex","loaded","href","isSvg","images","loadSvg","image","console","error","atob","decodeURIComponent","svg","subDocument","canvg","forkString","documentElement","_image","complete","drawImage","fonts","svgDocument","fontNode","cssDefs","cssParts","cssClasses","cssProps","cssClass","props","cssProp","substr","srcs","src","tempSvg","oldParent","elementTransform","cachedElement","m1","m2","m3","includeOpacity","_x","_y","srcData","getImageData","img","val","nr","mi","ng","nb","na","putImageData","ignoredStyles","maskCanvas","maskCtx","tmpCanvas","tmpCtx","globalCompositeOperation","fillRect","noop","contextProto","getPrototypeOf","px","py","efd","extraFilterDistance","tmpCanvasWidth","tmpCanvasHeight","_width","_height","blurRadius","body","getUniqueId","display","appendChild","vR","removeChild","ownKeys$1","_createImage","anonymousCrossOrigin","crossOrigin","reject","onload","onerror","_event","_source","_lineno","_colno","emSizeStack","uniqueId","bindCreateImage","isImagesLoaded","isFontsLoaded","forceAnonymousCrossOrigin","createDocumentElement","elementType","ElementType","elementTypes","config","_objectSpread$1","ownKeys","_objectSpread","options","_arguments","fromString","fork","_arguments2","baseOptions"],"sourceRoot":""}